Anchored allocation at 235c460 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The most base type"

Anchored allocation at 235c860 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 235cea0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed."

Anchored allocation at 235d1b0 of size 3008
This allocation matches pattern PyDictKeysObject.
"__name__" : "__builtin__"
"__doc__" : "Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices."

Anchored allocation at 2360390 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 2360fa0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 2361bb0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23627c0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "int(x=0) -> int or long
int(x, base=10) -> int or long

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is outside the integer range, the function returns a long instead.

If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4"

Anchored allocation at 23636e0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "str(object='') -> string

Return a nice string representation of the object.
If the argument is a string, the return value is the same object."

Anchored allocation at 23642f0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "bytearray(iterable_of_ints) -> bytearray.
bytearray(string, encoding[, errors]) -> bytearray.
bytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray.
bytearray(memory_view) -> bytearray.

Construct a mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a bytearray object
  - any object implementing the buffer API.

bytearray(int) -> bytearray.

Construct a zero-initialized bytearray of the given length."

Anchored allocation at 2364f00 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type) -> unbound super object
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super(C, self).meth(arg)"

Anchored allocation at 2365210 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "list() -> new empty list
list(iterable) -> new list initialized from iterable's items"

Anchored allocation at 2365e20 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "xrange(stop) -> xrange object
xrange(start, stop[, step]) -> xrange object

Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is 
slightly faster than range() and more memory efficient."

Anchored allocation at 2366130 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "slice(stop)
slice(start, stop[, step])

Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])."

Anchored allocation at 2366440 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)"

Anchored allocation at 2367050 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "set() -> new empty set object
set(iterable) -> new set object

Build an unordered collection of unique elements."

Anchored allocation at 2367c60 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "unicode(object='') -> unicode object
unicode(string[, encoding[, errors]]) -> unicode object

Create a new Unicode object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'."

Anchored allocation at 2368aa0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "staticmethod(function) -> method

Convert a function to be a static method.

A static method does not receive an implicit first argument.
To declare a static method, use this idiom:

     class C:
     def f(arg1, arg2, ...): ...
     f = staticmethod(f)

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.

Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin."

Anchored allocation at 2368db0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "buffer(object [, offset[, size]])

Create a new buffer object which references the given object.
The buffer will reference a slice of the target object from the
start of the object (or at the specified offset). The slice will
extend to the end of the target object (or with the specified size)."

Anchored allocation at 23690c0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "complex(real[, imag]) -> complex number

Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0."

Anchored allocation at 2369cd0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "float(x) -> floating point number

Convert a string or number to a floating point number, if possible."

Anchored allocation at 236abf0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "long(x=0) -> long
long(x, base=10) -> long

Convert a number or string to a long integer, or return 0L if no arguments
are given.  If x is floating point, the conversion truncates towards zero.

If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4L"

Anchored allocation at 236b800 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 236bb10 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object

Build an immutable unordered collection of unique elements."

Anchored allocation at 236c720 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "reversed(sequence) -> reverse iterator over values of the sequence

Return a reverse iterator"

Anchored allocation at 236ca30 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "memoryview(object)

Create a new memoryview object which references the given object."

Anchored allocation at 236d640 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "tuple() -> empty tuple
tuple(iterable) -> tuple initialized from iterable's items

If the argument is a tuple, the return value is the same object."

Anchored allocation at 236e250 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 236e560 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "code(argcount, nlocals, stacksize, flags, codestring, constants, names,
      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart."

Anchored allocation at 236f170 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 236f480 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 236f790 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "classobj(name, bases, dict)

Create a class object.  The name must be a string; the second argument
a tuple of classes, and the third a dictionary."

Anchored allocation at 236faa0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23706b0 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23709c0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23715d0 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23718e0 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 2371bf0 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 2371f00 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "instance(class[, dict])

Create an instance without calling its __init__() method.
The class must be a classic class.
If present, dict must be a dictionary or None."

Anchored allocation at 2372e20 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "file(name[, mode[, buffering]]) -> file object

Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a 'b' to the mode for binary files.
Add a '+' to the mode to allow simultaneous reading and writing.
If the buffering argument is given, 0 means unbuffered, 1 means line
buffered, and larger numbers specify the buffer size.  The preferred way
to open a file is with the builtin open() function.
Add a 'U' to mode to open the file for input with universal newline
support.  Any line ending in the input file will be seen as a '\n'
in Python.  Also, a file so opened gains the attribute 'newlines';
the value for this attribute is one of None (no newline read yet),
'\r', '\n', '\r\n' or a tuple containing all the newline types seen.

'U' cannot be combined with 'w' or '+' mode.
"

Anchored allocation at 23759b0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.long_info

A struct sequence that holds information about Python's
internal representation of integers.  The attributes are read only."

Anchored allocation at 23765c0 of size 188
This allocation matches pattern PyDictKeysObject.
"purelib" : "{base}/local/lib/python{py_version_short}/dist-packages"
"stdlib" : "{base}/lib/python{py_version_short}"
"scripts" : "{base}/local/bin"
"platinclude" : "{platbase}/local/include/python{py_version_short}"
"include" : "{base}/local/include/python{py_version_short}"
"data" : "{base}/local"
"platstdlib" : "{platbase}/lib/python{py_version_short}"
"platlib" : "{platbase}/local/lib/python{py_version_short}/dist-packages"

Anchored allocation at 23768d0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.float_info

A structseq holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information."

Anchored allocation at 23777f0 of size c08
This allocation matches pattern PyDictKeysObject.
"prefix" : "/usr"
"byteorder" : "little"
"_multiarch" : "x86_64-linux-gnu"
"executable" : "/usr/bin/python"
"copyright" : "Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved."
"exec_prefix" : "/usr"
"platform" : "linux2"
"version" : "2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609]"
"__doc__" : "This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
  Assigning to sys.exitfunc is deprecated; use the atexit module instead.

stdin -- standard input file object; used by raw_input() and input()
stdout -- standard output file object; used by the print statement
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

exc_type -- type of exception currently being handled
exc_value -- value of exception currently being handled
exc_traceback -- traceback of exception currently being handled
  The function exc_info() should be used instead of these three,
  because it is thread-safe.

Static objects:

float_info -- a dict with information about the float inplementation.
long_info -- a struct sequence with information about the long implementation.
maxint -- the largest supported integer (the smallest is -maxint-1)
maxsize -- the largest supported length of containers.
maxunicode -- the largest supported character
builtin_module_names -- tuple of module names built into this interpreter
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
hexversion -- version information encoded as a single integer
copyright -- copyright notice pertaining to this interpreter
platform -- platform identifier
executable -- absolute path of the executable binary of the Python interpreter
prefix -- prefix used to find the Python library
exec_prefix -- prefix used to find the machine-specific Python library
float_repr_style -- string indicating the style of repr() output for floats
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in __builtin__._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exc_clear() -- clear the exception state for the current thread
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
"
"__name__" : "sys"
"float_repr_style" : "short"

Anchored allocation at 2378400 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/genericpath.pyc"
"__name__" : "genericpath"
"__doc__" : "
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
"

Anchored allocation at 2378710 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
"
"__file__" : "/usr/lib/python2.7/stat.pyc"
"__name__" : "stat"

Anchored allocation at 2379320 of size c08
This allocation matches pattern PyDictKeysObject.
"default_action" : "default"
"__file__" : "/usr/lib/python2.7/warnings.pyc"
"__name__" : "warnings"
"defaultaction" : "default"
"__doc__" : "Python part of the warnings subsystem."

Anchored allocation at 2379f30 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 237a600 of size 188
This allocation matches pattern PyDictKeysObject.
"__module__" : "warnings"
"__doc__" : "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "

Anchored allocation at 237ab70 of size c08
This allocation matches pattern PyDictKeysObject.
"pardir" : ".."
"sep" : "/"
"defpath" : ":/bin:/usr/bin"
"pathsep" : ":"
"curdir" : "."
"devnull" : "/dev/null"
"__doc__" : "Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The "os.path" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
"
"__file__" : "/usr/lib/python2.7/posixpath.pyc"
"__name__" : "posixpath"
"extsep" : "."

Anchored allocation at 237c350 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/linecache.pyc"
"__name__" : "linecache"
"__doc__" : "Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
"

Anchored allocation at 237c660 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "warnings"
"__doc__" : "Holds the result of a single showwarning() call."

Anchored allocation at 237dee0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
"
"__file__" : "/usr/lib/python2.7/types.pyc"
"__name__" : "types"

Anchored allocation at 237eaf0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Extract, format and print information about Python stack traces."
"__file__" : "/usr/lib/python2.7/traceback.pyc"
"__name__" : "traceback"

Anchored allocation at 2380980 of size 188
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 2380b10 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 2380e80 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "classmethod(function) -> method

Convert a function to be a class method.

A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:

  class C:
      def f(cls, arg1, arg2, ...): ...
      f = classmethod(f)

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.

Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin."

Anchored allocation at 2381550 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 2381c20 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 23822f0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 23829c0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 2383090 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 23833a0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 2385740 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.version_info

Version information as a named tuple."

Anchored allocation at 2386350 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Common base class for all exceptions"

Anchored allocation at 2386660 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "sys.flags

Flags provided through command line arguments or environment vars."

Anchored allocation at 2387270 of size c08
This allocation matches pattern PyDictKeysObject.
"prefix" : "/usr"
"_multiarch" : "x86_64-linux-gnu"
"executable" : "/usr/bin/python"
"copyright" : "Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved."
"exec_prefix" : "/usr"
"platform" : "linux2"
"version" : "2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609]"
"__doc__" : "This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
  Assigning to sys.exitfunc is deprecated; use the atexit module instead.

stdin -- standard input file object; used by raw_input() and input()
stdout -- standard output file object; used by the print statement
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

exc_type -- type of exception currently being handled
exc_value -- value of exception currently being handled
exc_traceback -- traceback of exception currently being handled
  The function exc_info() should be used instead of these three,
  because it is thread-safe.

Static objects:

float_info -- a dict with information about the float inplementation.
long_info -- a struct sequence with information about the long implementation.
maxint -- the largest supported integer (the smallest is -maxint-1)
maxsize -- the largest supported length of containers.
maxunicode -- the largest supported character
builtin_module_names -- tuple of module names built into this interpreter
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
hexversion -- version information encoded as a single integer
copyright -- copyright notice pertaining to this interpreter
platform -- platform identifier
executable -- absolute path of the executable binary of the Python interpreter
prefix -- prefix used to find the Python library
exec_prefix -- prefix used to find the machine-specific Python library
float_repr_style -- string indicating the style of repr() output for floats
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in __builtin__._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exc_clear() -- clear the exception state for the current thread
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
"
"__name__" : "sys"
"byteorder" : "little"
"float_repr_style" : "short"

Anchored allocation at 2387e80 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Base class for I/O related errors."

Anchored allocation at 2388190 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Invalid syntax."

Anchored allocation at 23885e0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode encoding error."

Anchored allocation at 2388940 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode decoding error."

Anchored allocation at 2388cd0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Unicode translation error."

Anchored allocation at 2389240 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "module(name[, doc])

Create a module object.
The name must be a string; the optional doc argument can have any type."

Anchored allocation at 2389550 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "zipimporter(archivepath) -> zipimporter object

Create a new zipimporter instance. 'archivepath' must be a path to
a zipfile, or to a specific path inside a zipfile. For example, it can be
'/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
valid directory inside the archive.

'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
archive.

The 'archive' attribute of zipimporter objects contains the name of the
zipfile targeted."

Anchored allocation at 2389860 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Python's standard exception class hierarchy.

Exceptions found here are defined both in the exceptions module and the
built-in namespace.  It is recommended that user-defined exceptions
inherit from Exception.  See the documentation for the exception
inheritance hierarchy.
"
"__name__" : "exceptions"

Anchored allocation at 238a470 of size c08
This allocation matches pattern PyDictKeysObject.
"__name__" : "exceptions"
"__doc__" : "Python's standard exception class hierarchy.

Exceptions found here are defined both in the exceptions module and the
built-in namespace.  It is recommended that user-defined exceptions
inherit from Exception.  See the documentation for the exception
inheritance hierarchy.
"

Anchored allocation at 238b080 of size 3008
This allocation matches pattern PyDictKeysObject.
"__name__" : "__builtin__"
"__doc__" : "Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices."

Anchored allocation at 238e090 of size 308
This allocation matches pattern PyDictKeysObject.
"__name__" : "_weakref"
"__doc__" : "Weak-reference support module."

Anchored allocation at 238e990 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame."
"__name__" : "signal"

Anchored allocation at 238f990 of size 308
This allocation matches pattern PyDictKeysObject.
"default_action" : "default"
"__name__" : "_warnings"
"__doc__" : "_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up."

Anchored allocation at 23906f0 of size 308
This allocation matches pattern PyDictKeysObject.
"__name__" : "zipimport"
"__doc__" : "zipimport provides support for importing Python modules from Zip archives.

This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.

It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives."

Anchored allocation at 2390a00 of size 188
This allocation matches pattern PyDictKeysObject.
"__name__" : "zipimport"
"__doc__" : "zipimport provides support for importing Python modules from Zip archives.

This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.

It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives."

Anchored allocation at 2390b90 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame."
"__name__" : "signal"

Anchored allocation at 23937c0 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/encodings/__init__.pyc"
"__package__" : "encodings"
"_unknown" : "--unknown--"
"__name__" : "encodings"
"_norm_encoding_map" : "                                              . 0123456789       ABCDEFGHIJKLMNOPQRSTUVWXYZ      abcdefghijklmnopqrstuvwxyz                                                                                                                                     "
"__doc__" : " Standard "encodings" Package

    Standard Python encoding modules are stored in this package
    directory.

    Codec modules must have names corresponding to normalized encoding
    names as defined in the normalize_encoding() function below, e.g.
    'utf-8' must be implemented by the module 'utf_8.py'.

    Each codec module must export the following interface:

    * getregentry() -> codecs.CodecInfo object
    The getregentry() API must a CodecInfo object with encoder, decoder,
    incrementalencoder, incrementaldecoder, streamwriter and streamreader
    atttributes which adhere to the Python Codec Interface Standard.

    In addition, a module may optionally also define the following
    APIs which are then used by the package's codec search function:

    * getaliases() -> sequence of encoding name strings to use as aliases

    Alias names returned by getaliases() must be normalized encoding
    names as defined by normalize_encoding().

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"

Anchored allocation at 23947d0 of size 188
This allocation matches pattern PyDictKeysObject.
"purelib" : "{base}/Lib/site-packages"
"stdlib" : "{base}/Lib"
"scripts" : "{base}/Scripts"
"platinclude" : "{base}/Include"
"include" : "{base}/Include"
"data" : "{base}"
"platstdlib" : "{base}/Lib"
"platlib" : "{base}/Lib/site-packages"

Anchored allocation at 2394960 of size 188
This allocation matches pattern PyDictKeysObject.
"purelib" : "{base}/Lib/site-packages"
"stdlib" : "{base}/Lib"
"scripts" : "{base}/Scripts"
"platinclude" : "{base}/Include"
"include" : "{base}/Include"
"data" : "{base}"
"platstdlib" : "{base}/Lib"
"platlib" : "{base}/Lib/site-packages"

Anchored allocation at 2394af0 of size 308
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/lib/python{py_version_short}"
"platlib" : "{userbase}/lib/python{py_version_short}/site-packages"
"purelib" : "{userbase}/lib/python{py_version_short}/site-packages"
"stdlib" : "{userbase}/lib/python{py_version_short}"
"scripts" : "{userbase}/bin"
"include" : "{userbase}/include/python{py_version_short}"
"data" : "{userbase}"

Anchored allocation at 2394e00 of size 308
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/Python{py_version_nodot}"
"platlib" : "{userbase}/Python{py_version_nodot}/site-packages"
"purelib" : "{userbase}/Python{py_version_nodot}/site-packages"
"stdlib" : "{userbase}/Python{py_version_nodot}"
"scripts" : "{userbase}/Scripts"
"include" : "{userbase}/Python{py_version_nodot}/Include"
"data" : "{userbase}"

Anchored allocation at 2395110 of size 308
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/lib/python{py_version_short}"
"platlib" : "{userbase}/lib/python{py_version_short}/site-packages"
"purelib" : "{userbase}/lib/python{py_version_short}/site-packages"
"stdlib" : "{userbase}/lib/python{py_version_short}"
"scripts" : "{userbase}/bin"
"include" : "{userbase}/include/python{py_version_short}"
"data" : "{userbase}"

Anchored allocation at 2395420 of size 308
This allocation matches pattern PyDictKeysObject.
"platstdlib" : "{userbase}/lib/python"
"platlib" : "{userbase}/lib/python/site-packages"
"purelib" : "{userbase}/lib/python/site-packages"
"stdlib" : "{userbase}/lib/python"
"scripts" : "{userbase}/bin"
"include" : "{userbase}/include"
"data" : "{userbase}"

Anchored allocation at 2395a40 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Compiled regular expression objects"

Anchored allocation at 23961d0 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/plat-x86_64-linux-gnu/_sysconfigdata_nd.pyc"
"__name__" : "_sysconfigdata_nd"

Anchored allocation at 2396700 of size 188
This allocation matches pattern PyDictKeysObject.
"purelib" : "{base}/lib/python{py_version_short}/dist-packages"
"stdlib" : "{base}/lib/python{py_version_short}"
"scripts" : "{base}/bin"
"platinclude" : "{platbase}/include/python{py_version_short}"
"include" : "{base}/include/python{py_version_short}"
"data" : "{base}"
"platstdlib" : "{platbase}/lib/python{py_version_short}"
"platlib" : "{platbase}/lib/python{py_version_short}/dist-packages"

Anchored allocation at 2396fe0 of size c08
This allocation matches pattern PyDictKeysObject.
"pardir" : ".."
"_PY_VERSION" : "2.7.12"
"_PY_VERSION_SHORT_NO_DOT" : "27"
"__doc__" : "Provide access to Python's configuration information.

"
"__file__" : "/usr/lib/python2.7/sysconfig.pyc"
"_EXEC_PREFIX" : "/usr"
"_PROJECT_BASE" : "/usr/bin"
"__name__" : "sysconfig"
"_PY_VERSION_SHORT" : "2.7"
"_PREFIX" : "/usr"

Anchored allocation at 2398280 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 2398590 of size 308
This allocation matches pattern PyDictKeysObject.
"LANG" : "en_US.UTF-8"
"TERM" : "xterm"
"SHELL" : "/bin/bash"
"LESSCLOSE" : "/usr/bin/lesspipe %s %s"
"XDG_RUNTIME_DIR" : "/run/user/0"
"SHLVL" : "1"
"SSH_TTY" : "/dev/pts/22"
"HOME" : "/root"
"QT_QPA_PLATFORMTHEME" : "appmenu-qt5"
"PWD" : "/root"
"LESSOPEN" : "| /usr/bin/lesspipe %s"
"SSH_CLIENT" : "10.162.210.29 46768 22"
"LOGNAME" : "root"
"USER" : "root"
"PATH" : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
"MAIL" : "/var/mail/root"
"LS_COLORS" : "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"
"XDG_SESSION_ID" : "238"
"_" : "/usr/bin/python"
"SSH_CONNECTION" : "10.162.210.29 46768 10.52.4.217 22"

Anchored allocation at 2399210 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "site"
"__doc__" : "Define the builtin 'help'.
    This is a wrapper around pydoc.help (with a twist).

    "

Anchored allocation at 2399820 of size 188
This allocation matches pattern PyDictKeysObject.
"purelib" : "{base}/lib/python{py_version_short}/site-packages"
"stdlib" : "{base}/lib/python{py_version_short}"
"scripts" : "{base}/bin"
"platinclude" : "{platbase}/include/python{py_version_short}"
"include" : "{base}/include/python{py_version_short}"
"data" : "{base}"
"platstdlib" : "{platbase}/lib/python{py_version_short}"
"platlib" : "{platbase}/lib/python{py_version_short}/site-packages"

Anchored allocation at 239a370 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/_sysconfigdata.pyc"
"__name__" : "_sysconfigdata"

Anchored allocation at 239b8c0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "os"

Anchored allocation at 239bbd0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
"
"__file__" : "/usr/lib/python2.7/copy_reg.pyc"
"__name__" : "copy_reg"

Anchored allocation at 239c8d0 of size 308
This allocation matches pattern PyDictKeysObject.
"__name__" : "_weakref"
"__doc__" : "Weak-reference support module."

Anchored allocation at 239cbe0 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/_weakrefset.pyc"
"__name__" : "_weakrefset"

Anchored allocation at 239cef0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_weakrefset"

Anchored allocation at 239d200 of size 1808
This allocation matches pattern PyDictKeysObject.
"__doc__" : "This module makes available standard errno system symbols.

The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.

The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.

Symbols that are not relevant to the underlying system are not defined.

To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'."
"__name__" : "errno"

Anchored allocation at 239ee00 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 239f420 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23a0030 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/UserDict.pyc"
"__name__" : "UserDict"
"__doc__" : "A more or less complete user-defined wrapper around dictionary objects."

Anchored allocation at 23a0340 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "stat_result: Result from stat or lstat.

This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.

Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.

See os.stat for more information."

Anchored allocation at 23a11b0 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/abc.pyc"
"__name__" : "abc"
"__doc__" : "Abstract Base Classes (ABCs) according to PEP 3119."

Anchored allocation at 23a2300 of size 3008
This allocation matches pattern PyDictKeysObject.
"__name__" : "errno"
"__doc__" : "This module makes available standard errno system symbols.

The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.

The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.

Symbols that are not relevant to the underlying system are not defined.

To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'."

Anchored allocation at 23a5310 of size 3008
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23a8320 of size 3008
This allocation matches pattern PyDictKeysObject.
"__name__" : "posix"
"__doc__" : "This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls."

Anchored allocation at 23ab330 of size 3008
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23ae340 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "statvfs_result: Result from statvfs or fstatvfs.

This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.

See os.statvfs for more information."

Anchored allocation at 23aef50 of size 3008
This allocation matches pattern PyDictKeysObject.
"__name__" : "posix"
"__doc__" : "This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls."

Anchored allocation at 23b1f60 of size 3008
This allocation matches pattern PyDictKeysObject.
"pathsep" : ":"
"linesep" : "
"
"devnull" : "/dev/null"
"__file__" : "/usr/lib/python2.7/os.pyc"
"pardir" : ".."
"sep" : "/"
"defpath" : ":/bin:/usr/bin"
"extsep" : "."
"__name__" : "os"
"name" : "posix"
"__doc__" : "OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
"
"curdir" : "."

Anchored allocation at 23b6f90 of size c08
This allocation matches pattern PyDictKeysObject.
"__module__" : "UserDict"

Anchored allocation at 23b7ba0 of size c08
This allocation matches pattern PyDictKeysObject.
"USER_SITE" : "/root/.local/lib/python2.7/site-packages"
"USER_BASE" : "/root/.local"
"__doc__" : "Append module search paths for third-party packages to sys.path.

****************************************************************
* This module is automatically imported during initialization. *
****************************************************************

In earlier versions of Python (up to 1.5a3), scripts or modules that
needed to use site-specific modules would place ``import site''
somewhere near the top of their code.  Because of the automatic
import, this is no longer necessary (but code that does it still
works).

This will append site-specific paths to the module search path.  On
Unix (including Mac OSX), it starts with sys.prefix and
sys.exec_prefix (if different) and appends
lib/python<version>/site-packages as well as lib/site-python.
On other platforms (such as Windows), it tries each of the
prefixes directly, as well as with lib/site-packages appended.  The
resulting directories, if they exist, are appended to sys.path, and
also inspected for path configuration files.

For Debian and derivatives, this sys.path is augmented with directories
for packages distributed within the distribution. Local addons go
into /usr/local/lib/python<version>/dist-packages, Debian addons
install into /usr/{lib,share}/python<version>/dist-packages.
/usr/lib/python<version>/site-packages is not used.

A path configuration file is a file whose name has the form
<package>.pth; its contents are additional directories (one per line)
to be added to sys.path.  Non-existing directories (or
non-directories) are never added to sys.path; no directory is added to
sys.path more than once.  Blank lines and lines beginning with
'#' are skipped. Lines starting with 'import' are executed.

For example, suppose sys.prefix and sys.exec_prefix are set to
/usr/local and there is a directory /usr/local/lib/python2.5/site-packages
with three subdirectories, foo, bar and spam, and two path
configuration files, foo.pth and bar.pth.  Assume foo.pth contains the
following:

  # foo package configuration
  foo
  bar
  bletch

and bar.pth contains:

  # bar package configuration
  bar

Then the following directories are added to sys.path, in this order:

  /usr/local/lib/python2.5/site-packages/bar
  /usr/local/lib/python2.5/site-packages/foo

Note that bletch is omitted because it doesn't exist; bar precedes foo
because bar.pth comes alphabetically before foo.pth; and spam is
omitted because it is not mentioned in either path configuration file.

After these path manipulations, an attempt is made to import a module
named sitecustomize, which can perform arbitrary additional
site-specific customizations.  If this import fails with an
ImportError exception, it is silently ignored.

"
"__file__" : "/usr/lib/python2.7/site.pyc"
"__name__" : "site"

Anchored allocation at 23b9330 of size 188
This allocation matches pattern PyDictKeysObject.
"__module__" : "site"
"__doc__" : "interactive prompt objects for printing the license text, a list of
    contributors and the copyright notice."

Anchored allocation at 23b9e30 of size 188
This allocation matches pattern PyDictKeysObject.
"purelib" : "{base}/lib/python"
"stdlib" : "{base}/lib/python"
"scripts" : "{base}/bin"
"platinclude" : "{base}/include/python"
"include" : "{base}/include/python"
"data" : "{base}"
"platstdlib" : "{base}/lib/python"
"platlib" : "{base}/lib/python"

Anchored allocation at 23ba480 of size 608
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"
"__doc__" : "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "

Anchored allocation at 23bae50 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"
"__doc__" : "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "

Anchored allocation at 23bb570 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"
"__doc__" : "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "

Anchored allocation at 23bc110 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 23bc420 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23bcaf0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 23bd4b0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23be480 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "abc"
"__doc__" : "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "

Anchored allocation at 23becd0 of size c08
This allocation matches pattern PyDictKeysObject.
"__module__" : "_weakrefset"

Anchored allocation at 23bf8e0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
"
"__file__" : "/usr/lib/python2.7/_abcoll.pyc"
"__name__" : "_abcoll"

Anchored allocation at 23c04f0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"

Anchored allocation at 23c0800 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "UserDict"

Anchored allocation at 23c0ed0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"
"__doc__" : "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "

Anchored allocation at 23c15a0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"
"__doc__" : "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "

Anchored allocation at 23c1c70 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "_abcoll"
"__doc__" : "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "

Anchored allocation at 23c1f80 of size c08
This allocation matches pattern PyDictKeysObject.
"__name__" : "_locale"
"__doc__" : "Support for POSIX locales."

Anchored allocation at 23c2b90 of size 1808
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Support for POSIX locales."
"__name__" : "_locale"

Anchored allocation at 23c43a0 of size c08
This allocation matches pattern PyDictKeysObject.
"__name__" : "re"
"__version__" : "2.2.1"
"__doc__" : "Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like "A", "a", or "0", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    "."      Matches any character except a newline.
    "^"      Matches the start of the string.
    "$"      Matches the end of the string or just before the newline at
             the end of the string.
    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A "^" as the first character indicates a complementing set.
    "|"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of "\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \number  Matches the contents of the group of the same number.
    \A       Matches only at the start of the string.
    \Z       Matches only at the end of the string.
    \b       Matches the empty string, but only at the start or end of a word.
    \B       Matches the empty string, but not at the start or end of a word.
    \d       Matches any decimal digit; equivalent to the set [0-9].
    \D       Matches any non-digit character; equivalent to the set [^0-9].
    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v].
    \S       Matches any non-whitespace character; equiv. to [^ \t\n\r\f\v].
    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \W       Matches the complement of \w.
    \\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
    M  MULTILINE   "^" matches the beginning of lines (after a newline)
                   as well as the string.
                   "$" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      "." matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \w, \W, \b, \B, dependent on the Unicode locale.

This module also defines an exception 'error'.

"
"__file__" : "/usr/lib/python2.7/re.pyc"

Anchored allocation at 23c6210 of size 188
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23c7ab0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "site"

Anchored allocation at 23c7ff0 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23c8700 of size 308
This allocation matches pattern PyDictKeysObject.
"copyright" : " SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB "
"__name__" : "_sre"

Anchored allocation at 23c8a10 of size 308
This allocation matches pattern PyDictKeysObject.
"copyright" : " SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB "
"__name__" : "_sre"

Anchored allocation at 23cbd70 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The result of re.match() and re.search().
Match objects always have a boolean value of True."

Anchored allocation at 23cc080 of size 198
This allocation matches pattern PyDictKeysObject.
"category_not_word" : "category_loc_not_word"
"category_word" : "category_loc_word"
"category_not_linebreak" : "category_not_linebreak"
"category_linebreak" : "category_linebreak"
"category_space" : "category_space"
"category_not_digit" : "category_not_digit"
"category_not_space" : "category_not_space"
"category_digit" : "category_digit"

Anchored allocation at 23cc6c0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23cd6d0 of size 3008
This allocation matches pattern PyDictKeysObject.
"REPEAT_ONE" : "repeat_one"
"CATEGORY_LOC_NOT_WORD" : "category_loc_not_word"
"MIN_UNTIL" : "min_until"
"MIN_REPEAT" : "min_repeat"
"__file__" : "/usr/lib/python2.7/sre_parse.pyc"
"CATEGORY_UNI_DIGIT" : "category_uni_digit"
"REPEAT_CHARS" : "*+?{"
"CATEGORY_UNI_SPACE" : "category_uni_space"
"CATEGORY_NOT_WORD" : "category_not_word"
"REPEAT" : "repeat"
"AT_NON_BOUNDARY" : "at_non_boundary"
"MIN_REPEAT_ONE" : "min_repeat_one"
"CATEGORY_UNI_NOT_DIGIT" : "category_uni_not_digit"
"LITERAL" : "literal"
"CATEGORY_UNI_WORD" : "category_uni_word"
"LITERAL_IGNORE" : "literal_ignore"
"ANY_ALL" : "any_all"
"NOT_LITERAL_IGNORE" : "not_literal_ignore"
"CATEGORY" : "category"
"AT_BEGINNING_STRING" : "at_beginning_string"
"GROUPREF_EXISTS" : "groupref_exists"
"NOT_LITERAL" : "not_literal"
"CATEGORY_LINEBREAK" : "category_linebreak"
"RANGE" : "range"
"AT_LOC_BOUNDARY" : "at_loc_boundary"
"ANY" : "any"
"AT" : "at"
"AT_END" : "at_end"
"CATEGORY_NOT_LINEBREAK" : "category_not_linebreak"
"__name__" : "sre_parse"
"NEGATE" : "negate"
"AT_END_STRING" : "at_end_string"
"BIGCHARSET" : "bigcharset"
"CATEGORY_WORD" : "category_word"
"CATEGORY_UNI_LINEBREAK" : "category_uni_linebreak"
"CATEGORY_UNI_NOT_SPACE" : "category_uni_not_space"
"AT_BOUNDARY" : "at_boundary"
"__doc__" : "Internal support module for sre"
"SUCCESS" : "success"
"JUMP" : "jump"
"MAX_REPEAT" : "max_repeat"
"CATEGORY_LOC_WORD" : "category_loc_word"
"INFO" : "info"
"SPECIAL_CHARS" : ".\[{()*+?^$|"
"AT_BEGINNING" : "at_beginning"
"AT_LOC_NON_BOUNDARY" : "at_loc_non_boundary"
"MAX_UNTIL" : "max_until"
"MARK" : "mark"
"FAILURE" : "failure"
"SUBPATTERN" : "subpattern"
"BRANCH" : "branch"
"CATEGORY_DIGIT" : "category_digit"
"CATEGORY_NOT_DIGIT" : "category_not_digit"
"CHARSET" : "charset"
"ASSERT" : "assert"
"CATEGORY_UNI_NOT_LINEBREAK" : "category_uni_not_linebreak"
"GROUPREF_IGNORE" : "groupref_ignore"
"CATEGORY_SPACE" : "category_space"
"AT_END_LINE" : "at_end_line"
"AT_UNI_NON_BOUNDARY" : "at_uni_non_boundary"
"CATEGORY_NOT_SPACE" : "category_not_space"
"ASSERT_NOT" : "assert_not"
"CATEGORY_UNI_NOT_WORD" : "category_uni_not_word"
"IN" : "in"
"AT_BEGINNING_LINE" : "at_beginning_line"
"IN_IGNORE" : "in_ignore"
"AT_UNI_BOUNDARY" : "at_uni_boundary"
"GROUPREF" : "groupref"
"CALL" : "call"

Anchored allocation at 23d0a10 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23d10e0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "sre_parse"

Anchored allocation at 23d1cf0 of size c08
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23d2900 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23d3630 of size 188
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23d37f0 of size 198
This allocation matches pattern PyDictKeysObject.
"category_not_word" : "category_uni_not_word"
"category_word" : "category_uni_word"
"category_not_linebreak" : "category_uni_not_linebreak"
"category_linebreak" : "category_uni_linebreak"
"category_space" : "category_uni_space"
"category_not_digit" : "category_uni_not_digit"
"category_not_space" : "category_uni_not_space"
"category_digit" : "category_uni_digit"

Anchored allocation at 23d4630 of size 308
This allocation matches pattern PyDictKeysObject.

Anchored allocation at 23d4940 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "sre_parse"

Anchored allocation at 23d4c50 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "sre_parse"

Anchored allocation at 23d5240 of size 3008
This allocation matches pattern PyDictKeysObject.
"REPEAT_ONE" : "repeat_one"
"CATEGORY_LOC_NOT_WORD" : "category_loc_not_word"
"MIN_UNTIL" : "min_until"
"MIN_REPEAT" : "min_repeat"
"__file__" : "/usr/lib/python2.7/sre_constants.pyc"
"CATEGORY_UNI_DIGIT" : "category_uni_digit"
"CATEGORY_UNI_SPACE" : "category_uni_space"
"CATEGORY_NOT_WORD" : "category_not_word"
"REPEAT" : "repeat"
"AT_NON_BOUNDARY" : "at_non_boundary"
"MIN_REPEAT_ONE" : "min_repeat_one"
"CATEGORY_UNI_NOT_DIGIT" : "category_uni_not_digit"
"LITERAL" : "literal"
"CATEGORY_UNI_WORD" : "category_uni_word"
"LITERAL_IGNORE" : "literal_ignore"
"ANY_ALL" : "any_all"
"NOT_LITERAL_IGNORE" : "not_literal_ignore"
"AT_BEGINNING_STRING" : "at_beginning_string"
"GROUPREF_EXISTS" : "groupref_exists"
"NOT_LITERAL" : "not_literal"
"CATEGORY_DIGIT" : "category_digit"
"RANGE" : "range"
"AT_LOC_BOUNDARY" : "at_loc_boundary"
"ANY" : "any"
"CATEGORY_UNI_NOT_WORD" : "category_uni_not_word"
"AT_END" : "at_end"
"CATEGORY_NOT_LINEBREAK" : "category_not_linebreak"
"__name__" : "sre_constants"
"NEGATE" : "negate"
"AT_END_STRING" : "at_end_string"
"BIGCHARSET" : "bigcharset"
"CATEGORY_WORD" : "category_word"
"CATEGORY_UNI_LINEBREAK" : "category_uni_linebreak"
"CATEGORY_UNI_NOT_SPACE" : "category_uni_not_space"
"AT_BOUNDARY" : "at_boundary"
"__doc__" : "Internal support module for sre"
"CATEGORY" : "category"
"SUCCESS" : "success"
"JUMP" : "jump"
"MAX_REPEAT" : "max_repeat"
"CATEGORY_LOC_WORD" : "category_loc_word"
"INFO" : "info"
"AT_BEGINNING" : "at_beginning"
"AT_LOC_NON_BOUNDARY" : "at_loc_non_boundary"
"MAX_UNTIL" : "max_until"
"MARK" : "mark"
"FAILURE" : "failure"
"SUBPATTERN" : "subpattern"
"BRANCH" : "branch"
"CATEGORY_LINEBREAK" : "category_linebreak"
"CATEGORY_NOT_DIGIT" : "category_not_digit"
"CHARSET" : "charset"
"ASSERT" : "assert"
"CATEGORY_UNI_NOT_LINEBREAK" : "category_uni_not_linebreak"
"GROUPREF_IGNORE" : "groupref_ignore"
"CATEGORY_SPACE" : "category_space"
"AT_END_LINE" : "at_end_line"
"AT_UNI_NON_BOUNDARY" : "at_uni_non_boundary"
"CATEGORY_NOT_SPACE" : "category_not_space"
"ASSERT_NOT" : "assert_not"
"AT" : "at"
"IN" : "in"
"AT_BEGINNING_LINE" : "at_beginning_line"
"IN_IGNORE" : "in_ignore"
"AT_UNI_BOUNDARY" : "at_uni_boundary"
"GROUPREF" : "groupref"
"CALL" : "call"

Anchored allocation at 23d8250 of size 3008
This allocation matches pattern PyDictKeysObject.
"CATEGORY_LOC_NOT_WORD" : "category_loc_not_word"
"MIN_UNTIL" : "min_until"
"MIN_REPEAT" : "min_repeat"
"__file__" : "/usr/lib/python2.7/sre_compile.pyc"
"CATEGORY_UNI_DIGIT" : "category_uni_digit"
"REPEAT_ONE" : "repeat_one"
"CATEGORY_UNI_SPACE" : "category_uni_space"
"_BITS_TRANS" : "0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
"CATEGORY_NOT_WORD" : "category_not_word"
"REPEAT" : "repeat"
"AT_NON_BOUNDARY" : "at_non_boundary"
"MIN_REPEAT_ONE" : "min_repeat_one"
"CATEGORY_UNI_NOT_DIGIT" : "category_uni_not_digit"
"LITERAL" : "literal"
"CATEGORY_UNI_WORD" : "category_uni_word"
"LITERAL_IGNORE" : "literal_ignore"
"ANY_ALL" : "any_all"
"NOT_LITERAL_IGNORE" : "not_literal_ignore"
"CATEGORY" : "category"
"AT_BEGINNING_STRING" : "at_beginning_string"
"GROUPREF_EXISTS" : "groupref_exists"
"NOT_LITERAL" : "not_literal"
"CATEGORY_LINEBREAK" : "category_linebreak"
"RANGE" : "range"
"AT_LOC_BOUNDARY" : "at_loc_boundary"
"ANY" : "any"
"AT" : "at"
"AT_END" : "at_end"
"CATEGORY_NOT_LINEBREAK" : "category_not_linebreak"
"__name__" : "sre_compile"
"NEGATE" : "negate"
"AT_END_STRING" : "at_end_string"
"BIGCHARSET" : "bigcharset"
"CATEGORY_WORD" : "category_word"
"CATEGORY_UNI_LINEBREAK" : "category_uni_linebreak"
"CATEGORY_UNI_NOT_SPACE" : "category_uni_not_space"
"AT_BOUNDARY" : "at_boundary"
"__doc__" : "Internal support module for sre"
"SUCCESS" : "success"
"JUMP" : "jump"
"MAX_REPEAT" : "max_repeat"
"CATEGORY_LOC_WORD" : "category_loc_word"
"INFO" : "info"
"AT_BEGINNING" : "at_beginning"
"AT_LOC_NON_BOUNDARY" : "at_loc_non_boundary"
"MAX_UNTIL" : "max_until"
"MARK" : "mark"
"FAILURE" : "failure"
"SUBPATTERN" : "subpattern"
"BRANCH" : "branch"
"CATEGORY_DIGIT" : "category_digit"
"CATEGORY_NOT_DIGIT" : "category_not_digit"
"CHARSET" : "charset"
"ASSERT" : "assert"
"CATEGORY_UNI_NOT_LINEBREAK" : "category_uni_not_linebreak"
"GROUPREF_IGNORE" : "groupref_ignore"
"CATEGORY_SPACE" : "category_space"
"AT_END_LINE" : "at_end_line"
"AT_UNI_NON_BOUNDARY" : "at_uni_non_boundary"
"CATEGORY_NOT_SPACE" : "category_not_space"
"ASSERT_NOT" : "assert_not"
"CATEGORY_UNI_NOT_WORD" : "category_uni_not_word"
"IN" : "in"
"AT_BEGINNING_LINE" : "at_beginning_line"
"IN_IGNORE" : "in_ignore"
"AT_UNI_BOUNDARY" : "at_uni_boundary"
"GROUPREF" : "groupref"
"CALL" : "call"

Anchored allocation at 23dc270 of size 6008
This allocation matches pattern PyDictKeysObject.
"AST_H_DIR" : "Include"
"PSRCS" : "\"
"EXE" : ""
"SUBDIRSTOO" : "Include Lib Misc Demo"
"MODLIBS" : "-L/usr/lib -lz"
"prefix" : "/usr"
"LIBRARY" : "libpython2.7.a"
"INCLUDEPY" : "/usr/include/python2.7"
"abs_srcdir" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared/.."
"ASDLGEN" : "../Parser/asdl_c.py"
"SRC_GDB_HOOKS" : "../Tools/gdb/libpython.py"
"PGSRCS" : "\"
"PYTHONFRAMEWORKDIR" : "no-framework"
"DEBUG_EXT" : ""
"GRAMMAR_H" : "Include/graminit.h"
"PYTHON_HEADERS" : "\"
"GRAMMAR_C" : "Python/graminit.c"
"HGTAG" : ""
"PYTHONFRAMEWORKINSTALLDIR" : ""
"CONFIGURE_LDFLAGS" : "-Wl,-Bsymbolic-functions -Wl,-z,relro"
"PY_CORE_CFLAGS" : "-fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security   -I. -IInclude -I../Include -fPIC -DPy_BUILD_CORE"
"VERSION" : "2.7"
"PY_FORMAT_SIZE_T" : ""z""
"DISTFILES" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"SRCDIRS" : "Parser Grammar Objects Python Modules Mac"
"LIBP" : "/usr/lib/python2.7"
"MACHDEP" : "linux2"
"AST_ASDL" : "../Parser/Python.asdl"
"LDSHARED" : "x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"DESTLIB" : "/usr/lib/python2.7"
"BUILDEXE" : ""
"MACHDEP_OBJS" : ""
"STRICT_SYSV_CURSES" : "/* Don't use ncurses extensions */"
"PGEN" : "Parser/pgen"
"LDCXXSHARED" : "c++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions"
"LIBDIR" : "/usr/lib"
"LIBDEST" : "/usr/lib/python2.7"
"THREADOBJ" : "Python/thread.o"
"COVERAGE_REPORT" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared/lcov-report"
"VPATH" : ".."
"LIBPC" : "/usr/lib/x86_64-linux-gnu/pkgconfig"
"INSTALL_PROGRAM" : "/usr/bin/install -c"
"LDLIBRARYDIR" : ""
"CONFIGFILES" : "configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"SHELL" : "/bin/sh"
"LIBFFI_INCLUDEDIR" : ""
"PGO_PROF_USE_FLAG" : ""
"OPT" : "-DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes"
"PLATMACDIRS" : "plat-mac plat-mac/Carbon plat-mac/lib-scriptpackages \"
"PYTHONFRAMEWORKPREFIX" : ""
"LLVM_PROF_ERR" : "no"
"PARSER_OBJS" : "\ Parser/myreadline.o Parser/tokenizer.o"
"GNULD" : "yes"
"BASECFLAGS" : "-fno-strict-aliasing"
"CONFINCLUDEPY" : "/usr/include/python2.7"
"RETSIGTYPE" : "void"
"OTHER_LIBTOOL_OPT" : ""
"SUBDIRS" : ""
"MODULE_OBJS" : "\"
"INCLDIRSTOMAKE" : "/usr/include /usr/include /usr/include/python2.7 /usr/include/python2.7"
"AST_H" : "Include/Python-ast.h"
"GLHACK" : "-Dclear=__GLclear"
"AST_C" : "Python/Python-ast.c"
"MODOBJS" : "Modules/threadmodule.o  Modules/signalmodule.o  Modules/arraymodule.o  Modules/cmathmodule.o  Modules/mathmodule.o Modules/_math.o  Modules/_struct.o  Modules/timemodule.o  Modules/operator.o  Modules/_randommodule.o  Modules/_collectionsmodule.o  Modules/_heapqmodule.o  Modules/itertoolsmodule.o  Modules/stropmodule.o  Modules/_functoolsmodule.o  Modules/datetimemodule.o  Modules/_bisectmodule.o  Modules/unicodedata.o  Modules/_localemodule.o  Modules/bufferedio.o Modules/bytesio.o Modules/fileio.o Modules/iobase.o Modules/_iomodule.o Modules/stringio.o Modules/textio.o  Modules/fcntlmodule.o  Modules/spwdmodule.o  Modules/grpmodule.o  Modules/selectmodule.o  Modules/socketmodule.o Modules/timemodule.o  Modules/md5module.o Modules/md5.o  Modules/shamodule.o  Modules/sha256module.o  Modules/sha512module.o  Modules/syslogmodule.o  Modules/binascii.o  Modules/cStringIO.o  Modules/cPickle.o  Modules/zlibmodule.o  Modules/posixmodule.o  Modules/errnomodule.o  Modules/pwdmodule.o  Modules/_sre.o  Modules/_codecsmodule.o  Modules/_weakref.o  Modules/zipimport.o  Modules/symtablemodule.o  Modules/xxsubtype.o"
"DLINCLDIR" : "."
"BINDIR" : "/usr/bin"
"LDLAST" : ""
"BLDSHARED" : "x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"PROFILE_TASK" : "-m test.regrtest --pgo -x test_asyncore test_gdb test_multiprocessing test_subprocess"
"TESTPROG" : "../Lib/test/regrtest.py"
"LIBPL" : "/usr/lib/python2.7/config-x86_64-linux-gnu"
"UNICODE_OBJS" : "Objects/unicodeobject.o Objects/unicodectype.o"
"srcdir" : ".."
"PGENOBJS" : "\ \"
"PGENSRCS" : "\ \"
"TKPATH" : ":lib-tk"
"datarootdir" : "/usr/share"
"PYTHONFRAMEWORK" : ""
"LIBOBJS" : ""
"SO" : ".so"
"PGOBJS" : "\"
"TESTOPTS" : "-l"
"LDLIBRARY" : "libpython2.7.so"
"RUNSHARED" : "LD_LIBRARY_PATH=/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared"
"INSTALL" : "/usr/bin/install -c"
"ARFLAGS" : "rc"
"SCRIPTDIR" : "/usr/lib"
"PLATDIR" : "plat-x86_64-linux-gnu"
"LN" : "ln"
"MACOSX_DEPLOYMENT_TARGET" : ""
"INCLUDEDIR" : "/usr/include"
"LDFLAGS" : "-Wl,-Bsymbolic-functions -Wl,-z,relro"
"PYTHONPATH" : ":plat-x86_64-linux-gnu:lib-tk:lib-old"
"PYTHON_OBJS" : "\"
"PLATMACPATH" : ":plat-mac:plat-mac/lib-scriptpackages"
"PY_FORMAT_LONG_LONG" : ""ll""
"LIBSUBDIRS" : "lib-tk lib-tk/test lib-tk/test/test_tkinter \"
"HOST_GNU_TYPE" : "x86_64-pc-linux-gnu"
"MAKESETUP" : "../Modules/makesetup"
"OLDPATH" : ":lib-old"
"XMLLIBSUBDIRS" : "xml xml/dom xml/etree xml/parsers xml/sax"
"HGBRANCH" : ""
"LLVM_PROF_MERGER" : "true"
"MACHDESTLIB" : "/usr/lib/python2.7"
"LOCALMODLIBS" : "-L/usr/lib -lz"
"LLVM_PROF_FILE" : ""
"BUILDPYTHON" : "python"
"SGI_ABI" : ""
"CPPFLAGS" : "-I. -IInclude -I../Include"
"DESTPATH" : ""
"EXTRAPLATDIR" : ""
"CONFIGURE_CPPFLAGS" : ""
"MULTIARCH" : "x86_64-linux-gnu"
"SHLIBS" : "-lpthread -ldl  -lutil"
"SIGNAL_OBJS" : ""
"PY_LDFLAGS" : "-Wl,-Bsymbolic-functions -Wl,-z,relro"
"CONFINCLUDEDIR" : "/usr/include"
"exec_prefix" : "/usr"
"LIBC" : ""
"POBJS" : "\"
"build" : "x86_64-pc-linux-gnu"
"RANLIB" : "x86_64-linux-gnu-gcc-ranlib"
"TESTPATH" : ""
"LINKCC" : "x86_64-linux-gnu-gcc -pthread"
"AST_C_DIR" : "Python"
"OPCODETARGETGEN_FILES" : "\"
"CXX" : "c++ -pthread"
"DYNLOADFILE" : "dynload_shlib.o"
"BINLIBDEST" : "/usr/lib/python2.7"
"MAINCC" : "x86_64-linux-gnu-gcc -pthread"
"LIBM" : "-lm"
"DESTSHARED" : "/usr/lib/python2.7/lib-dynload"
"ENSUREPIP" : "no"
"abs_builddir" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared"
"MEMTESTOPTS" : "-l -x test_subprocess test_io test_lib2to3 \ -x test_dl test___all__ test_fork1 \"
"DLLLIBRARY" : ""
"LIBS" : "-lpthread -ldl  -lutil"
"SITEPATH" : ""
"LINKFORSHARED" : "-Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions"
"DESTDIRS" : "/usr /usr/lib /usr/lib/python2.7 /usr/lib/python2.7/lib-dynload"
"STRINGLIB_HEADERS" : "\"
"LIBOBJDIR" : "Python/"
"host" : "x86_64-pc-linux-gnu"
"RESSRCDIR" : "Mac/Resources/framework"
"PYTHON" : "python"
"PYTHON_FOR_BUILD" : "./python -E"
"PURIFY" : ""
"ASDLGEN_FILES" : "../Parser/asdl.py ../Parser/asdl_c.py"
"COVERAGE_INFO" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared/coverage.info"
"MACHDEPPATH" : ":plat-x86_64-linux-gnu"
"TCLTK_INCLUDES" : ""
"cross_compiling" : "no"
"OBJECT_OBJS" : "\"
"TESTPYTHON" : "LD_LIBRARY_PATH=/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared ./python -Wd -3 -E -tt"
"GRAMMAR_INPUT" : "../Grammar/Grammar"
"MKDIR_P" : "/bin/mkdir -p"
"TESTPYTHONOPTS" : ""
"COVERAGE_REPORT_OPTIONS" : "--no-branch-coverage --title "CPython lcov report""
"CFLAGSFORSHARED" : "-fPIC"
"LIBRARY_OBJS" : "\"
"OPCODETARGETS_H" : "\"
"CONFIG_ARGS" : "'--enable-shared' '--prefix=/usr' '--enable-ipv6' '--enable-unicode=ucs4' '--with-dbmliborder=bdb:gdbm' '--with-system-expat' '--with-computed-gotos' '--with-system-ffi' '--with-fpectl' 'CC=x86_64-linux-gnu-gcc' 'CFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security ' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro'"
"TCLTK_LIBS" : ""
"INSTALL_SHARED" : "/usr/bin/install -c -m 555"
"INSTALL_SCRIPT" : "/usr/bin/install -c"
"SHLIB_EXT" : "".so""
"COREPYTHONPATH" : ":plat-x86_64-linux-gnu:lib-tk:lib-old"
"UNIVERSALSDK" : ""
"PGO_PROF_GEN_FLAG" : "-fprofile-generate"
"PARSER_HEADERS" : "\"
"BLDLIBRARY" : "-L. -lpython2.7"
"DIST" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in Include Lib Misc Demo Ext-dummy"
"PY_CFLAGS" : "-fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"HGVERSION" : ""
"CONFIGURE_CFLAGS" : "-Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security"
"CC" : "x86_64-linux-gnu-gcc -pthread"
"OPCODETARGETGEN" : "\"
"INSTSONAME" : "libpython2.7.so.1.0"
"MANDIR" : "/usr/share/man"
"MACHDEPS" : "plat-x86_64-linux-gnu"
"INSTALL_DATA" : "/usr/bin/install -c -m 644"
"EXTRATESTOPTS" : ""
"DISTDIRS" : "Include Lib Misc Demo Ext-dummy"
"PY_CPPFLAGS" : "-I. -IInclude -I../Include"
"BASEMODLIBS" : ""
"AR" : "x86_64-linux-gnu-gcc-ar"
"QUICKTESTOPTS" : "-l -x test_subprocess test_io test_lib2to3 \"
"SVNVERSION" : "echo Unversioned directory"
"EXTRAMACHDEPPATH" : ""
"SYSLIBS" : "-lm"
"CFLAGS" : "-fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"CCSHARED" : "-fPIC"

Anchored allocation at 23e5ba0 of size c008
This allocation matches pattern PyDictKeysObject.
"AST_H_DIR" : "Include"
"prefix" : "/usr"
"EXE" : ""
"SRC_GDB_HOOKS" : "../Tools/gdb/libpython.py"
"DEBUG_EXT" : ""
"PYTHONFRAMEWORKDIR" : "no-framework"
"GRAMMAR_H" : "Include/graminit.h"
"GRAMMAR_C" : "Python/graminit.c"
"HGTAG" : ""
"PYTHONFRAMEWORKINSTALLDIR" : ""
"PY_CORE_CFLAGS" : "-fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security   -I. -IInclude -I../Include -fPIC -DPy_BUILD_CORE"
"VERSION" : "2.7"
"AST_ASDL" : "../Parser/Python.asdl"
"DESTLIB" : "/usr/lib/python2.7"
"BUILDEXE" : ""
"py_version" : "2.7.12"
"SHLIB_EXT" : "".so""
"LDCXXSHARED" : "c++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions"
"LIBDEST" : "/usr/lib/python2.7"
"COVERAGE_REPORT" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared/lcov-report"
"VPATH" : ".."
"multiarchsubdir" : "/x86_64-linux-gnu"
"LDLIBRARYDIR" : ""
"CONFIGFILES" : "configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"LIBFFI_INCLUDEDIR" : ""
"PGO_PROF_USE_FLAG" : ""
"datarootdir" : "/usr/share"
"SCRIPTDIR" : "/usr/lib"
"LIBM" : "-lm"
"RETSIGTYPE" : "void"
"MODULE_OBJS" : "\"
"PGENSRCS" : "\ \"
"AST_H" : "Include/Python-ast.h"
"LIBP" : "/usr/lib/python2.7"
"GLHACK" : "-Dclear=__GLclear"
"AST_C" : "Python/Python-ast.c"
"DLINCLDIR" : "."
"BINDIR" : "/usr/bin"
"BLDSHARED" : "x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"PROFILE_TASK" : "-m test.regrtest --pgo -x test_asyncore test_gdb test_multiprocessing test_subprocess"
"TESTPROG" : "../Lib/test/regrtest.py"
"LIBPL" : "/usr/lib/python2.7/config-x86_64-linux-gnu"
"UNICODE_OBJS" : "Objects/unicodeobject.o Objects/unicodectype.o"
"LIBPC" : "/usr/lib/x86_64-linux-gnu/pkgconfig"
"PGENOBJS" : "\ \"
"TKPATH" : ":lib-tk"
"SO" : ".so"
"INCLDIRSTOMAKE" : "/usr/include /usr/include /usr/include/python2.7 /usr/include/python2.7"
"RUNSHARED" : "LD_LIBRARY_PATH=/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared"
"ARFLAGS" : "rc"
"PLATDIR" : "plat-x86_64-linux-gnu"
"LN" : "ln"
"MACOSX_DEPLOYMENT_TARGET" : ""
"SHLIBS" : "-lpthread -ldl  -lutil"
"LDFLAGS" : "-Wl,-Bsymbolic-functions -Wl,-z,relro"
"PYTHON_HEADERS" : "\"
"HOST_GNU_TYPE" : "x86_64-pc-linux-gnu"
"MACHDEPPATH" : ":plat-x86_64-linux-gnu"
"MAKESETUP" : "../Modules/makesetup"
"HGBRANCH" : ""
"LLVM_PROF_MERGER" : "true"
"LOCALMODLIBS" : "-L/usr/lib -lz"
"LLVM_PROF_FILE" : ""
"BUILDPYTHON" : "python"
"EXTRAPLATDIR" : ""
"MULTIARCH" : "x86_64-linux-gnu"
"STRICT_SYSV_CURSES" : "/* Don't use ncurses extensions */"
"SIGNAL_OBJS" : ""
"exec_prefix" : "/usr"
"PY_FORMAT_LONG_LONG" : ""ll""
"POBJS" : "\"
"srcdir" : ".."
"PYTHONFRAMEWORK" : ""
"PLATMACPATH" : ":plat-mac:plat-mac/lib-scriptpackages"
"platbase" : "/usr"
"LINKCC" : "x86_64-linux-gnu-gcc -pthread"
"DYNLOADFILE" : "dynload_shlib.o"
"DESTSHARED" : "/usr/lib/python2.7/lib-dynload"
"MEMTESTOPTS" : "-l -x test_subprocess test_io test_lib2to3 \ -x test_dl test___all__ test_fork1 \"
"projectbase" : "/usr/bin"
"SUBDIRS" : ""
"base" : "/usr"
"MACHDESTLIB" : "/usr/lib/python2.7"
"ASDLGEN_FILES" : "../Parser/asdl.py ../Parser/asdl_c.py"
"MODLIBS" : "-L/usr/lib -lz"
"SGI_ABI" : ""
"OBJECT_OBJS" : "\"
"TESTPYTHON" : "LD_LIBRARY_PATH=/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared ./python -Wd -3 -E -tt"
"LLVM_PROF_ERR" : "no"
"MKDIR_P" : "/bin/mkdir -p"
"COVERAGE_REPORT_OPTIONS" : "--no-branch-coverage --title "CPython lcov report""
"CFLAGSFORSHARED" : "-fPIC"
"HGVERSION" : ""
"CONFIG_ARGS" : "'--enable-shared' '--prefix=/usr' '--enable-ipv6' '--enable-unicode=ucs4' '--with-dbmliborder=bdb:gdbm' '--with-system-expat' '--with-computed-gotos' '--with-system-ffi' '--with-fpectl' 'CC=x86_64-linux-gnu-gcc' 'CFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security ' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro'"
"INSTALL_SCRIPT" : "/usr/bin/install -c"
"SRCDIRS" : "Parser Grammar Objects Python Modules Mac"
"PGO_PROF_GEN_FLAG" : "-fprofile-generate"
"CONFIGURE_CFLAGS" : "-Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security"
"build" : "x86_64-pc-linux-gnu"
"abs_builddir" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared"
"MACHDEPS" : "plat-x86_64-linux-gnu"
"INSTALL_DATA" : "/usr/bin/install -c -m 644"
"PY_CPPFLAGS" : "-I. -IInclude -I../Include"
"EXTRAMACHDEPPATH" : ""
"THREADOBJ" : "Python/thread.o"
"PSRCS" : "\"
"py_version_nodot" : "27"
"LDSHARED" : "x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"INCLUDEPY" : "/usr/include/python2.7"
"INSTALL_PROGRAM" : "/usr/bin/install -c"
"ASDLGEN" : "../Parser/asdl_c.py"
"PGSRCS" : "\"
"TESTPYTHONOPTS" : ""
"DESTPATH" : ""
"LIBSUBDIRS" : "lib-tk lib-tk/test lib-tk/test/test_tkinter \"
"CONFIGURE_LDFLAGS" : "-Wl,-Bsymbolic-functions -Wl,-z,relro"
"DISTFILES" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in"
"MACHDEP" : "linux2"
"MACHDEP_OBJS" : ""
"PGEN" : "Parser/pgen"
"LIBDIR" : "/usr/lib"
"LIBRARY" : "libpython2.7.a"
"PARSER_OBJS" : "\ Parser/myreadline.o Parser/tokenizer.o"
"cross_compiling" : "no"
"OPT" : "-DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes"
"PLATMACDIRS" : "plat-mac plat-mac/Carbon plat-mac/lib-scriptpackages \"
"GNULD" : "yes"
"BASECFLAGS" : "-fno-strict-aliasing"
"CONFINCLUDEPY" : "/usr/include/python2.7"
"py_version_short" : "2.7"
"LIBOBJDIR" : "Python/"
"MODOBJS" : "Modules/threadmodule.o  Modules/signalmodule.o  Modules/arraymodule.o  Modules/cmathmodule.o  Modules/mathmodule.o Modules/_math.o  Modules/_struct.o  Modules/timemodule.o  Modules/operator.o  Modules/_randommodule.o  Modules/_collectionsmodule.o  Modules/_heapqmodule.o  Modules/itertoolsmodule.o  Modules/stropmodule.o  Modules/_functoolsmodule.o  Modules/datetimemodule.o  Modules/_bisectmodule.o  Modules/unicodedata.o  Modules/_localemodule.o  Modules/bufferedio.o Modules/bytesio.o Modules/fileio.o Modules/iobase.o Modules/_iomodule.o Modules/stringio.o Modules/textio.o  Modules/fcntlmodule.o  Modules/spwdmodule.o  Modules/grpmodule.o  Modules/selectmodule.o  Modules/socketmodule.o Modules/timemodule.o  Modules/md5module.o Modules/md5.o  Modules/shamodule.o  Modules/sha256module.o  Modules/sha512module.o  Modules/syslogmodule.o  Modules/binascii.o  Modules/cStringIO.o  Modules/cPickle.o  Modules/zlibmodule.o  Modules/posixmodule.o  Modules/errnomodule.o  Modules/pwdmodule.o  Modules/_sre.o  Modules/_codecsmodule.o  Modules/_weakref.o  Modules/zipimport.o  Modules/symtablemodule.o  Modules/xxsubtype.o"
"OPCODETARGETGEN" : "\"
"LDLAST" : ""
"CC" : "x86_64-linux-gnu-gcc -pthread"
"INSTALL_SHARED" : "/usr/bin/install -c -m 555"
"abs_srcdir" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared/.."
"LIBOBJS" : ""
"SUBDIRSTOO" : "Include Lib Misc Demo"
"TESTOPTS" : "-l"
"LDLIBRARY" : "libpython2.7.so"
"PYTHON" : "python"
"INSTALL" : "/usr/bin/install -c"
"INCLUDEDIR" : "/usr/include"
"OLDPATH" : ":lib-old"
"SVNVERSION" : "echo Unversioned directory"
"CPPFLAGS" : "-I. -IInclude -I../Include"
"PY_FORMAT_SIZE_T" : ""z""
"CONFIGURE_CPPFLAGS" : ""
"PY_LDFLAGS" : "-Wl,-Bsymbolic-functions -Wl,-z,relro"
"CONFINCLUDEDIR" : "/usr/include"
"SHELL" : "/bin/sh"
"PGOBJS" : "\"
"RESSRCDIR" : "Mac/Resources/framework"
"LIBC" : ""
"SYSLIBS" : "-lm"
"AST_C_DIR" : "Python"
"PYTHONPATH" : ":plat-x86_64-linux-gnu:lib-tk:lib-old"
"RANLIB" : "x86_64-linux-gnu-gcc-ranlib"
"INSTSONAME" : "libpython2.7.so.1.0"
"OTHER_LIBTOOL_OPT" : ""
"GRAMMAR_INPUT" : "../Grammar/Grammar"
"OPCODETARGETGEN_FILES" : "\"
"CXX" : "c++ -pthread"
"ENSUREPIP" : "no"
"OPCODETARGETS_H" : "\"
"DLLLIBRARY" : ""
"LIBS" : "-lpthread -ldl  -lutil"
"SITEPATH" : ""
"LINKFORSHARED" : "-Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions"
"DESTDIRS" : "/usr /usr/lib /usr/lib/python2.7 /usr/lib/python2.7/lib-dynload"
"STRINGLIB_HEADERS" : "\"
"BINLIBDEST" : "/usr/lib/python2.7"
"host" : "x86_64-pc-linux-gnu"
"PYTHON_FOR_BUILD" : "./python -E"
"PURIFY" : ""
"COVERAGE_INFO" : "/build/python2.7-dPs3Rr/python2.7-2.7.12/build-shared/coverage.info"
"XMLLIBSUBDIRS" : "xml xml/dom xml/etree xml/parsers xml/sax"
"PY_CFLAGS" : "-fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"PYTHONFRAMEWORKPREFIX" : ""
"LIBRARY_OBJS" : "\"
"COREPYTHONPATH" : ":plat-x86_64-linux-gnu:lib-tk:lib-old"
"UNIVERSALSDK" : ""
"PARSER_HEADERS" : "\"
"BLDLIBRARY" : "-L. -lpython2.7"
"DIST" : "README ChangeLog configure configure.ac acconfig.h pyconfig.h.in Makefile.pre.in Include Lib Misc Demo Ext-dummy"
"EXTRATESTOPTS" : ""
"userbase" : "/root/.local"
"TCLTK_INCLUDES" : ""
"TESTPATH" : ""
"TCLTK_LIBS" : ""
"MAINCC" : "x86_64-linux-gnu-gcc -pthread"
"CFLAGS" : "-fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  "
"PYTHON_OBJS" : "\"
"DISTDIRS" : "Include Lib Misc Demo Ext-dummy"
"BASEMODLIBS" : ""
"AR" : "x86_64-linux-gnu-gcc-ar"
"QUICKTESTOPTS" : "-l -x test_subprocess test_io test_lib2to3 \"
"MANDIR" : "/usr/share/man"
"CCSHARED" : "-fPIC"

Anchored allocation at 23fe680 of size 308
This allocation matches pattern PyDictKeysObject.
"__name__" : "__main__"

Anchored allocation at 23febc0 of size 308
This allocation matches pattern PyDictKeysObject.
"name" : "utf-8"

Anchored allocation at 23ffed0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "threading"
"__doc__" : "Condition variables allow one or more threads to wait until they are
       notified by another thread.
    "

Anchored allocation at 24005d0 of size 188
This allocation matches pattern PyDictKeysObject.
"__module__" : "threading"
"__doc__" : "Semaphores manage a counter representing the number of release() calls
       minus the number of acquire() calls, plus an initial value. The acquire()
       method blocks if necessary until it can return without making the counter
       negative. If not given, value defaults to 1.

    "

Anchored allocation at 2402360 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/encodings/aliases.pyc"
"__name__" : "encodings.aliases"
"__doc__" : " Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.

"

Anchored allocation at 2402740 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"__doc__" : "Codec details when looking up the codec registry"

Anchored allocation at 2402a90 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"

Anchored allocation at 2403160 of size 188
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"__doc__" : "
    An IncrementalEncoder encodes an input in multiple steps. The input can be
    passed piece by piece to the encode() method. The IncrementalEncoder remembers
    the state of the Encoding process between calls to encode().
    "

Anchored allocation at 24036b0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"__doc__" : "
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    "

Anchored allocation at 24039c0 of size 188
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"__doc__" : "
    An IncrementalDecoder decodes an input in multiple steps. The input can be
    passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    "

Anchored allocation at 2403b50 of size c08
This allocation matches pattern PyDictKeysObject.
"__name__" : "_codecs"

Anchored allocation at 2404760 of size c08
This allocation matches pattern PyDictKeysObject.
"__name__" : "_codecs"

Anchored allocation at 2405af0 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"__doc__" : "
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete byte
    sequences.
    "

Anchored allocation at 2405e00 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"

Anchored allocation at 2406110 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"encoding" : "unknown"
"__doc__" : " StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    "

Anchored allocation at 2406420 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "codecs"
"data_encoding" : "unknown"
"file_encoding" : "unknown"
"__doc__" : " StreamRecoder instances provide a frontend - backend
        view of encoding data.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the stream is first decoded into an
        intermediate format (which is dependent on the given codec
        combination) and then written to the stream using an instance
        of the provided Writer class.

        In the other direction, data is read from the stream using a
        Reader instance and then return encoded data to the caller.

    "

Anchored allocation at 2406730 of size 3008
This allocation matches pattern PyDictKeysObject.
"BOM" : "\xff\xfe"
"BOM64_BE" : "\x00\x00\xfe\xff"
"__file__" : "/usr/lib/python2.7/codecs.pyc"
"BOM_UTF32" : "\xff\xfe\x00\x00"
"BOM_BE" : "\xfe\xff"
"BOM_UTF16_BE" : "\xfe\xff"
"__name__" : "codecs"
"BOM32_BE" : "\xfe\xff"
"BOM_UTF32_LE" : "\xff\xfe\x00\x00"
"BOM32_LE" : "\xff\xfe"
"__doc__" : " codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"
"BOM_UTF32_BE" : "\x00\x00\xfe\xff"
"BOM_UTF16_LE" : "\xff\xfe"
"BOM_LE" : "\xff\xfe"
"BOM_UTF16" : "\xff\xfe"
"BOM_UTF8" : "\xef\xbb\xbf"
"BOM64_LE" : "\xff\xfe\x00\x00"

Anchored allocation at 2409740 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/encodings/utf_8.pyc"
"__package__" : "encodings"
"__name__" : "encodings.utf_8"
"__doc__" : " Python 'utf-8' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"

Anchored allocation at 240a2c0 of size 308
This allocation matches pattern PyDictKeysObject.
"_Thread__name" : "Thread-2"

Anchored allocation at 240a6c0 of size 308
This allocation matches pattern PyDictKeysObject.
"_Thread__name" : "Thread-3"

Anchored allocation at 240ac30 of size 308
This allocation matches pattern PyDictKeysObject.
"_Thread__name" : "Thread-4"

Anchored allocation at 240e2a0 of size 3008
This allocation matches pattern PyDictKeysObject.
"iso_ir_6" : "ascii"
"1140" : "cp1140"
"tis620" : "tis_620"
"iso8859" : "latin_1"
"chinese" : "gb2312"
"mskanji" : "cp932"
"s_jis" : "shift_jis"
"iso_celtic" : "iso8859_14"
"utf32" : "utf_32"
"ebcdic_cp_wt" : "cp037"
"csibm863" : "cp863"
"ebcdic_cp_he" : "cp424"
"csHPRoman8" : "hp_roman8"
"cp936" : "gbk"
"thai" : "iso8859_11"
"maccyrillic" : "mac_cyrillic"
"csibm857" : "cp857"
"iso_8859_6_1987" : "iso8859_6"
"csibm855" : "cp855"
"ibm1140" : "cp1140"
"eucjis2004" : "euc_jis_2004"
"csibm1026" : "cp1026"
"ansi_x3_4_1968" : "ascii"
"dbcs" : "mbcs"
"rot13" : "rot_13"
"ibm367" : "ascii"
"csibm858" : "cp858"
"eucjp" : "euc_jp"
"latin10" : "iso8859_16"
"shiftjisx0213" : "shift_jisx0213"
"shiftjis2004" : "shift_jis_2004"
"932" : "cp932"
"ibm1026" : "cp1026"
"utf_16le" : "utf_16_le"
"csibm500" : "cp500"
"u32" : "utf_32"
"iso_ir_127" : "iso8859_6"
"uhc" : "cp949"
"iso_8859_11" : "iso8859_11"
"cspc862latinhebrew" : "cp862"
"tis_620_2529_0" : "tis_620"
"ksc5601" : "euc_kr"
"iso_8859_11_2001" : "iso8859_11"
"ibm424" : "cp424"
"csibm869" : "cp869"
"iso_ir_101" : "iso8859_2"
"l5" : "iso8859_9"
"ibm500" : "cp500"
"csibm860" : "cp860"
"csibm861" : "cp861"
"csibm866" : "cp866"
"korean" : "euc_kr"
"csibm864" : "cp864"
"csibm865" : "cp865"
"iso_2022_kr" : "iso2022_kr"
"maccentraleurope" : "mac_latin2"
"eucjisx0213" : "euc_jisx0213"
"iso_8859_16_2001" : "iso8859_16"
"iso646_us" : "ascii"
"iso_8859_3_1988" : "iso8859_3"
"iso_8859_8_1988" : "iso8859_8"
"ibm857" : "cp857"
"l7" : "iso8859_13"
"ibm855" : "cp855"
"euckr" : "euc_kr"
"l2" : "iso8859_2"
"ibm852" : "cp852"
"ibm850" : "cp850"
"quopri" : "quopri_codec"
"l8" : "iso8859_14"
"ibm858" : "cp858"
"utf_16be" : "utf_16_be"
"zlib" : "zlib_codec"
"sjis" : "shift_jis"
"latin" : "latin_1"
"gb18030_2000" : "gb18030"
"ebcdic_cp_us" : "cp037"
"tis_620_2529_1" : "tis_620"
"iso_2022_jp_2" : "iso2022_jp_2"
"ibm437" : "cp437"
"csbig5" : "big5"
"cp1361" : "johab"
"us" : "ascii"
"ebcdic_cp_nl" : "cp037"
"csisolatin1" : "latin_1"
"csisolatin2" : "iso8859_2"
"ksx1001" : "euc_kr"
"csisolatin4" : "iso8859_4"
"037" : "cp037"
"csisolatin6" : "iso8859_10"
"cyrillic_asian" : "ptcp154"
"l6" : "iso8859_10"
"iso_8859_10_1992" : "iso8859_10"
"iso2022jp" : "iso2022_jp"
"csisolatinarabic" : "iso8859_6"
"quoted_printable" : "quopri_codec"
"euc_cn" : "gb2312"
"l10" : "iso8859_16"
"l4" : "iso8859_4"
"iso_ir_110" : "iso8859_4"
"1256" : "cp1256"
"1257" : "cp1257"
"1254" : "cp1254"
"1255" : "cp1255"
"1252" : "cp1252"
"1253" : "cp1253"
"1250" : "cp1250"
"1251" : "cp1251"
"unicode_1_1_utf_7" : "utf_7"
"ms950" : "cp950"
"cskoi8r" : "koi8_r"
"424" : "cp424"
"1258" : "cp1258"
"l3" : "iso8859_3"
"iso_ir_199" : "iso8859_14"
"hzgb" : "hz"
"sjisx0213" : "shift_jisx0213"
"ms1361" : "johab"
"csiso58gb231280" : "gb2312"
"l1" : "latin_1"
"cspc850multilingual" : "cp850"
"857" : "cp857"
"s_jisx0213" : "shift_jisx0213"
"base_64" : "base64_codec"
"iso_8859_5_1988" : "iso8859_5"
"ks_c_5601" : "euc_kr"
"u8" : "utf_8"
"ibm039" : "cp037"
"iso_ir_58" : "gb2312"
"greek8" : "iso8859_7"
"iso_ir_109" : "iso8859_3"
"iso_2022_jp" : "iso2022_jp"
"iso2022kr" : "iso2022_kr"
"cp367" : "ascii"
"r8" : "hp_roman8"
"ms949" : "cp949"
"ibm037" : "cp037"
"ms_kanji" : "cp932"
"uu" : "uu_codec"
"iso_2022_jp_1" : "iso2022_jp_1"
"iso_2022_jp_3" : "iso2022_jp_3"
"646" : "ascii"
"437" : "cp437"
"iso2022jp_ext" : "iso2022_jp_ext"
"l9" : "iso8859_15"
"cspc8codepage437" : "cp437"
"iso_ir_226" : "iso8859_16"
"iso_ir_100" : "latin_1"
"jisx0213" : "euc_jis_2004"
"hkscs" : "big5hkscs"
"base64" : "base64_codec"
"us_ascii" : "ascii"
"iso_2022_jp_ext" : "iso2022_jp_ext"
"csascii" : "ascii"
"cp_is" : "cp861"
"tis260" : "tactis"
"iso2022jp_1" : "iso2022_jp_1"
"ecma_118" : "iso8859_7"
"iso2022jp_3" : "iso2022_jp_3"
"iso2022jp_2" : "iso2022_jp_2"
"s_jis_2004" : "shift_jis_2004"
"shiftjis" : "shift_jis"
"csisolatin3" : "iso8859_3"
"ujis" : "euc_jp"
"maclatin2" : "mac_latin2"
"csiso2022kr" : "iso2022_kr"
"855" : "cp855"
"asmo_708" : "iso8859_6"
"ibm775" : "cp775"
"850" : "cp850"
"ks_c_5601_1987" : "euc_kr"
"852" : "cp852"
"ms936" : "gbk"
"iso_ir_138" : "iso8859_8"
"u7" : "utf_7"
"iso_8859_8" : "iso8859_8"
"858" : "cp858"
"iso_8859_7" : "iso8859_7"
"windows_1258" : "cp1258"
"iso_8859_6" : "iso8859_6"
"windows_1254" : "cp1254"
"windows_1255" : "cp1255"
"big5_tw" : "big5"
"windows_1257" : "cp1257"
"windows_1250" : "cp1250"
"windows_1251" : "cp1251"
"windows_1252" : "cp1252"
"windows_1253" : "cp1253"
"zip" : "zlib_codec"
"csshiftjis" : "shift_jis"
"ibm869" : "cp869"
"ibm866" : "cp866"
"ibm864" : "cp864"
"ibm865" : "cp865"
"ibm862" : "cp862"
"ibm863" : "cp863"
"ibm860" : "cp860"
"ibm861" : "cp861"
"ks_x_1001" : "euc_kr"
"iso_2022_jp_2004" : "iso2022_jp_2004"
"iso_8859_9_1989" : "iso8859_9"
"windows_1256" : "cp1256"
"unicodelittleunmarked" : "utf_16_le"
"869" : "cp869"
"iso_ir_126" : "iso8859_7"
"1026" : "cp1026"
"utf" : "utf_8"
"cp_gr" : "cp869"
"hz_gb_2312" : "hz"
"861" : "cp861"
"860" : "cp860"
"863" : "cp863"
"862" : "cp862"
"865" : "cp865"
"864" : "cp864"
"ansi_x3.4_1986" : "ascii"
"866" : "cp866"
"utf8_ucs4" : "utf_8"
"sjis_2004" : "shift_jis_2004"
"ibm819" : "latin_1"
"u_jis" : "euc_jp"
"iso_646.irv_1991" : "ascii"
"csibm424" : "cp424"
"utf8_ucs2" : "utf_8"
"utf_32le" : "utf_32_le"
"u16" : "utf_16"
"iso8859_1" : "latin_1"
"936" : "gbk"
"csisolatinhebrew" : "iso8859_8"
"cp819" : "latin_1"
"ecma_114" : "iso8859_6"
"iso_8859_9" : "iso8859_9"
"euccn" : "gb2312"
"elot_928" : "iso8859_7"
"ms932" : "cp932"
"iso_8859_5" : "iso8859_5"
"iso_8859_4" : "iso8859_4"
"iso_8859_3" : "iso8859_3"
"iso_8859_2" : "iso8859_2"
"iso_8859_1" : "latin_1"
"iso_8859_7_1987" : "iso8859_7"
"iso_ir_166" : "tis_620"
"iso_8859_2_1987" : "iso8859_2"
"eucgb2312_cn" : "gb2312"
"hebrew" : "iso8859_8"
"arabic" : "iso8859_6"
"cp154" : "ptcp154"
"roman8" : "hp_roman8"
"bz2" : "bz2_codec"
"cspc775baltic" : "cp775"
"hex" : "hex_codec"
"iso_8859_14_1998" : "iso8859_14"
"950" : "cp950"
"euc_jis2004" : "euc_jis_2004"
"utf8" : "utf_8"
"csisolatin5" : "iso8859_9"
"cspcp852" : "cp852"
"iso_8859_16" : "iso8859_16"
"iso_8859_15" : "iso8859_15"
"iso_8859_14" : "iso8859_14"
"iso_8859_13" : "iso8859_13"
"iso_ir_157" : "iso8859_10"
"iso2022jp_2004" : "iso2022_jp_2004"
"iso_8859_10" : "iso8859_10"
"ebcdic_cp_ch" : "cp500"
"ebcdic_cp_be" : "cp500"
"macgreek" : "mac_greek"
"csibm037" : "cp037"
"775" : "cp775"
"ansi_x3.4_1968" : "ascii"
"iso_8859_4_1988" : "iso8859_4"
"maciceland" : "mac_iceland"
"utf7" : "utf_7"
"csisolatingreek" : "iso8859_7"
"gb2312_1980" : "gb2312"
"csisolatincyrillic" : "iso8859_5"
"quotedprintable" : "quopri_codec"
"csptcp154" : "ptcp154"
"hz_gb" : "hz"
"pt154" : "ptcp154"
"macturkish" : "mac_turkish"
"500" : "cp500"
"csiso2022jp" : "iso2022_jp"
"gb2312_80" : "gb2312"
"latin4" : "iso8859_4"
"latin5" : "iso8859_9"
"latin6" : "iso8859_10"
"latin7" : "iso8859_13"
"latin1" : "latin_1"
"latin2" : "iso8859_2"
"949" : "cp949"
"macroman" : "mac_roman"
"iso_8859_1_1987" : "latin_1"
"cyrillic" : "iso8859_5"
"latin8" : "iso8859_14"
"latin9" : "iso8859_15"
"greek" : "iso8859_7"
"8859" : "latin_1"
"big5_hkscs" : "big5hkscs"
"iso_ir_144" : "iso8859_5"
"unicodebigunmarked" : "utf_16_be"
"latin3" : "iso8859_3"
"iso_ir_148" : "iso8859_9"
"utf_32be" : "utf_32_be"
"utf16" : "utf_16"
"ebcdic_cp_ca" : "cp037"
"tis_620_0" : "tis_620"

Anchored allocation at 24112b0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Thread module emulating a subset of Java's threading model."
"__file__" : "/usr/lib/python2.7/threading.pyc"
"__name__" : "threading"

Anchored allocation at 2412700 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "A lock object is a synchronization primitive.  To create a lock,
call the PyThread_allocate_lock() function.  Methods are:

acquire() -- lock the lock, possibly blocking until it can be obtained
release() -- unlock of the lock
locked() -- test whether the lock is currently locked

A lock is not owned by the thread that locked it; another thread may
unlock it.  A thread attempting to lock a lock that it has already locked
will block until another thread unlocks it.  Deadlocks may ensue."

Anchored allocation at 2412c60 of size 608
This allocation matches pattern PyDictKeysObject.
"__name__" : "thread"
"__doc__" : "This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface."

Anchored allocation at 2413270 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "The time value as returned by gmtime(), localtime(), and strptime(), and
 accepted by asctime(), mktime() and strftime().  May be considered as a
 sequence of 9 integers.

 Note that several fields' values are not the same as those defined by
 the C language standard for struct tm.  For example, the value of the
 field tm_year is the actual year, not year - 1900.  See individual
 fields' descriptions for details."

Anchored allocation at 2414280 of size c08
This allocation matches pattern PyDictKeysObject.
"_repr_template" : "{name}=%r"
"_field_template" : "    {name} = _property(_itemgetter({index:d}), doc='Alias for field number {index:d}')
"
"__doc__" : "This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values

"
"__file__" : "/usr/lib/python2.7/collections.pyc"
"__name__" : "collections"
"_class_template" : "class {typename}(tuple):
    '{typename}({arg_list})'

    __slots__ = ()

    _fields = {field_names!r}

    def __new__(_cls, {arg_list}):
        'Create new instance of {typename}({arg_list})'
        return _tuple.__new__(_cls, ({arg_list}))

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new {typename} object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != {num_fields:d}:
            raise TypeError('Expected {num_fields:d} arguments, got %d' % len(result))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        return '{typename}({repr_fmt})' % self

    def _asdict(self):
        'Return a new OrderedDict which maps field names to their values'
        return OrderedDict(zip(self._fields, self))

    def _replace(_self, **kwds):
        'Return a new {typename} object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, {field_names!r}, _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % kwds.keys())
        return result

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self)

    __dict__ = _property(_asdict)

    def __getstate__(self):
        'Exclude the OrderedDict from pickling'
        pass

{field_defs}
"

Anchored allocation at 2415130 of size 308
This allocation matches pattern PyDictKeysObject.
"__file__" : "/usr/lib/python2.7/keyword.pyc"
"__name__" : "keyword"
"__doc__" : "Keywords (from "graminit.c")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
"

Anchored allocation at 2415440 of size 308
This allocation matches pattern PyDictKeysObject.
"__name__" : "time"
"__doc__" : "This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.

Variables:

timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)

Functions:

time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone"

Anchored allocation at 2417540 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "defaultdict(default_factory[, ...]) --> dict with default factory

The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
All remaining arguments are treated the same as if they were
passed to the dict constructor, including keyword arguments.
"

Anchored allocation at 2418880 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "threading"
"__doc__" : "A factory function that returns a new event object. An event manages a
       flag that can be set to true with the set() method and reset to false
       with the clear() method. The wait() method blocks until the flag is true.

    "

Anchored allocation at 2419730 of size 308
This allocation matches pattern PyDictKeysObject.
"_Thread__name" : "MainThread"

Anchored allocation at 2419a40 of size 308
This allocation matches pattern PyDictKeysObject.
"_Thread__name" : "Thread-1"

Anchored allocation at 2419dc0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "deque([iterable[, maxlen]]) --> deque object

Build an ordered collection with optimized access from its endpoints."

Anchored allocation at 241b3f0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
"
"__about__" : "Heap queues

[explanation by Fran\xe7ois Pinard]

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30


In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
a usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.

A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
"
"__name__" : "_heapq"

Anchored allocation at 241bbf0 of size 308
This allocation matches pattern PyDictKeysObject.
"__name__" : "thread"
"__doc__" : "This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface."

Anchored allocation at 241bf00 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "threading"

Anchored allocation at 241c680 of size 3008
This allocation matches pattern PyDictKeysObject.
"__name__" : "operator"
"__doc__" : "Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience."

Anchored allocation at 241f690 of size 1808
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience."
"__name__" : "operator"

Anchored allocation at 2421260 of size 608
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"
"__doc__" : "Dictionary that remembers insertion order"

Anchored allocation at 2421870 of size 608
This allocation matches pattern PyDictKeysObject.
"__name__" : "time"
"__doc__" : "This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.

Variables:

timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)

Functions:

time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone"

Anchored allocation at 2421eb0 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
"
"__file__" : "/usr/lib/python2.7/heapq.pyc"
"__name__" : "heapq"
"__about__" : "Heap queues

[explanation by Fran\xe7ois Pinard]

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30


In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
a usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.

A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
"

Anchored allocation at 2422e80 of size 608
This allocation matches pattern PyDictKeysObject.
"__module__" : "collections"
"__doc__" : "Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    "

Anchored allocation at 2423490 of size 308
This allocation matches pattern PyDictKeysObject.
"__module__" : "threading"
"__doc__" : "A reentrant lock must be released by the thread that acquired it. Once a
       thread has acquired a reentrant lock, the same thread may acquire it
       again without blocking; the thread must release it once for each time it
       has acquired it.
    "

Anchored allocation at 2423ad0 of size 308
This allocation matches pattern PyDictKeysObject.
"__about__" : "Heap queues

[explanation by Fran\xe7ois Pinard]

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30


In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
a usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.

A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
"
"__name__" : "_heapq"
"__doc__" : "Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
"

Anchored allocation at 2424ac0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "chain(*iterables) --> chain object

Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted."

Anchored allocation at 2424dd0 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "count(start=0, step=1) --> count object

Return a count object whose .next() method returns consecutive values.
Equivalent to:

    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step
"

Anchored allocation at 2425600 of size 308
This allocation matches pattern PyDictKeysObject.
"__doc__" : "repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly."

Anchored allocation at 2425910 of size c08
This allocation matches pattern PyDictKeysObject.
"__doc__" : "Functional tools for creating and using iterators.

Infinite iterators:
count([n]) --> n, n+1, n+2, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times

Iterators terminating on the shortest input sequence:
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
ifilter(pred, seq) --> elements of seq where pred(elem) is True
ifilterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
imap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
izip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
izip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 

Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
"
"__name__" : "itertools"

Anchored allocation at 2427f50 of size 608
This allocation matches pattern PyDictKeysObject.
"__name__" : "itertools"
"__doc__" : "Functional tools for creating and using iterators.

Infinite iterators:
count([n]) --> n, n+1, n+2, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times

Iterators terminating on the shortest input sequence:
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
ifilter(pred, seq) --> elements of seq where pred(elem) is True
ifilterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
imap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
izip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
izip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 

Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
"

Anchored allocation at 242ad30 of size 608
This allocation matches pattern PyDictKeysObject.
"__module__" : "threading"
"__doc__" : "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion.

    "

Anchored allocation at 7f51edb7b010 of size 30ff0
This allocation matches pattern PyDictKeysObject.
"" : ""
"\x00" : "\x00"
"__lshift__" : "__lshift__"
"n_sequence_fields" : "n_sequence_fields"
"zipimporter" : "zipimporter"
"ctime" : "ctime"
"prefix" : "prefix"
"sleep" : "sleep"
"HAVE_BROKEN_PIPE_BUF" : "HAVE_BROKEN_PIPE_BUF"
"types" : "types"
"csisolatin5" : "csisolatin5"
"findall" : "findall"
"_from_iterable" : "_from_iterable"
"aliases" : "aliases"
"ibm1140" : "ibm1140"
"_filters" : "_filters"
"chinese" : "chinese"
"macgreek" : "macgreek"
"pprint" : "pprint"
"umask" : "umask"
"file_info" : "file_info"
"TypeType" : "TypeType"
"makechar" : "makechar"
"is_set" : "is_set"
"EX_NOINPUT" : "EX_NOINPUT"
"PYTHONFRAMEWORKDIR" : "PYTHONFRAMEWORKDIR"
"_limbo" : "_limbo"
"started" : "started"
"_DummyThread" : "_DummyThread"
"PC_PRIO_IO" : "PC_PRIO_IO"
"__instancecheck__" : "__instancecheck__"
"_EXEC_PREFIX" : "_EXEC_PREFIX"
"_Printer__name" : "_Printer__name"
"PYTHONFRAMEWORKINSTALLDIR" : "PYTHONFRAMEWORKINSTALLDIR"
"iso_ir_199" : "iso_ir_199"
"getloadavg" : "getloadavg"
"euc_jis_2004" : "euc_jis_2004"
"__oct__" : "__oct__"
"HAVE_PTHREAD_INIT" : "HAVE_PTHREAD_INIT"
"h_append" : "h_append"
"HAVE_STRUCT_STAT_ST_BIRTHTIME" : "HAVE_STRUCT_STAT_ST_BIRTHTIME"
"isdir" : "isdir"
"ABDAY_6" : "ABDAY_6"
"ABDAY_5" : "ABDAY_5"
"ABDAY_4" : "ABDAY_4"
"__nonzero__" : "__nonzero__"
"ABDAY_2" : "ABDAY_2"
"RuntimeWarning" : "RuntimeWarning"
"decodedbytes" : "decodedbytes"
"MAX" : "MAX"
"cmd" : "cmd"
"_expand_vars" : "_expand_vars"
"HAVE_RAND_EGD" : "HAVE_RAND_EGD"
"indices" : "indices"
"AST_ASDL" : "AST_ASDL"
"countOf" : "countOf"
"cmp" : "cmp"
"get_config_var" : "get_config_var"
"sizehint" : "sizehint"
"selfref" : "selfref"
"AT_LOCALE" : "AT_LOCALE"
"category_not_digit" : "category_not_digit"
"Makefile" : "Makefile"
"aliased_encoding" : "aliased_encoding"
"ibm437" : "ibm437"
"MACHDESTLIB" : "MACHDESTLIB"
"issubclass" : "issubclass"
"maciceland" : "maciceland"
"py_version" : "py_version"
"isMappingType" : "isMappingType"
"HAVE_BROKEN_UNSETENV" : "HAVE_BROKEN_UNSETENV"
"errors" : "errors"
"PC_SYNC_IO" : "PC_SYNC_IO"
"ST_NLINK" : "ST_NLINK"
"neg" : "neg"
"+" : "+"
"parentpos" : "parentpos"
"pickle_function" : "pickle_function"
"_Thread__initialized" : "_Thread__initialized"
"load_module" : "load_module"
"SC_SAVED_IDS" : "SC_SAVED_IDS"
"division_new" : "division_new"
"SC_XOPEN_SHM" : "SC_XOPEN_SHM"
"rel_re" : "rel_re"
"iterables" : "iterables"
"new" : "new"
"WeakSet" : "WeakSet"
"iso_8859_8_1988" : "iso_8859_8_1988"
"BEOS_THREADS" : "BEOS_THREADS"
"hzgb" : "hzgb"
"at_uni_boundary" : "at_uni_boundary"
"SC_THREAD_DESTRUCTOR_ITERATIONS" : "SC_THREAD_DESTRUCTOR_ITERATIONS"
"ERA" : "ERA"
"join" : "join"
"category_digit" : "category_digit"
"here" : "here"
"cspc850multilingual" : "cspc850multilingual"
"LITERAL" : "LITERAL"
"LIBFFI_INCLUDEDIR" : "LIBFFI_INCLUDEDIR"
"codecs" : "codecs"
"S_ISDIR" : "S_ISDIR"
"path" : "path"
"euc_kr" : "euc_kr"
"getsid" : "getsid"
"SC_XOPEN_UNIX" : "SC_XOPEN_UNIX"
"S_IRWXG" : "S_IRWXG"
"items" : "items"
"k" : "k"
"RADIXCHAR" : "RADIXCHAR"
"S_IRWXO" : "S_IRWXO"
"SubPattern" : "SubPattern"
"S_IRWXU" : "S_IRWXU"
"csshiftjis" : "csshiftjis"
"iso_ir_226" : "iso_ir_226"
"search_function" : "search_function"
"EX_OSFILE" : "EX_OSFILE"
"AM_STR" : "AM_STR"
"ABMON_5" : "ABMON_5"
"_Thread__stop" : "_Thread__stop"
"_abc_negative_cache" : "_abc_negative_cache"
"_test" : "_test"
"dont_write_bytecode" : "dont_write_bytecode"
"setDaemon" : "setDaemon"
"replace" : "replace"
"tp" : "tp"
"Ellipsis" : "Ellipsis"
"iso8859_16" : "iso8859_16"
"PACKAGE_STRING" : "PACKAGE_STRING"
"CATEGORIES" : "CATEGORIES"
"_heapq" : "_heapq"
"SC_SHARED_MEMORY_OBJECTS" : "SC_SHARED_MEMORY_OBJECTS"
"HAVE_HYPOT" : "HAVE_HYPOT"
"HAVE_GETGROUPS" : "HAVE_GETGROUPS"
"n_unnamed_fields" : "n_unnamed_fields"
"PM_STR" : "PM_STR"
"SC_SHRT_MIN" : "SC_SHRT_MIN"
"HAVE_UINT32_T" : "HAVE_UINT32_T"
"CATEGORY_WORD" : "CATEGORY_WORD"
"call" : "call"
"O_WRONLY" : "O_WRONLY"
"altzone" : "altzone"
"newchars" : "newchars"
"iso_8859_16_2001" : "iso_8859_16_2001"
"_repr_running" : "_repr_running"
"type" : "type"
"tell" : "tell"
"PYTHONUSERBASE" : "PYTHONUSERBASE"
"heappop" : "heappop"
"GetSetDescriptorType" : "GetSetDescriptorType"
"isatty" : "isatty"
"st_nlink" : "st_nlink"
"iso2022jp_2004" : "iso2022jp_2004"
"TANH_PRESERVES_ZERO_SIGN" : "TANH_PRESERVES_ZERO_SIGN"
"closerange" : "closerange"
"STRING_TYPES" : "STRING_TYPES"
"warn" : "warn"
"__iter__" : "__iter__"
"_Tokenizer__next" : "_Tokenizer__next"
"LIBPL" : "LIBPL"
"get_platform" : "get_platform"
"V" : "V"
"pybuilddir" : "pybuilddir"
"LIBPC" : "LIBPC"
"HAVE_GETSPENT" : "HAVE_GETSPENT"
"blocking" : "blocking"
"me" : "me"
"fromkeys" : "fromkeys"
"constructor_ob" : "constructor_ob"
"err" : "err"
"YESEXPR" : "YESEXPR"
"makedev" : "makedev"
"strerror" : "strerror"
"STDC_HEADERS" : "STDC_HEADERS"
"SC_XBS5_LPBIG_OFFBIG" : "SC_XBS5_LPBIG_OFFBIG"
"CATEGORY_LINEBREAK" : "CATEGORY_LINEBREAK"
"category_word" : "category_word"
"tabcheck" : "tabcheck"
"_showwarning" : "_showwarning"
"HAVE_LSTAT" : "HAVE_LSTAT"
"exceptions" : "exceptions"
"localtime" : "localtime"
"backslashreplace" : "backslashreplace"
"co_names" : "co_names"
"gb18030" : "gb18030"
"INCLDIRSTOMAKE" : "INCLDIRSTOMAKE"
"RUNSHARED" : "RUNSHARED"
"Lib" : "Lib"
"HAVE_GETITIMER" : "HAVE_GETITIMER"
"CHARSET" : "CHARSET"
"endswith" : "endswith"
"gb2312" : "gb2312"
"CS_XBS5_ILP32_OFF32_LIBS" : "CS_XBS5_ILP32_OFF32_LIBS"
"_init_non_posix" : "_init_non_posix"
"SIGCLD" : "SIGCLD"
"unichr" : "unichr"
"supports_unicode_filenames" : "supports_unicode_filenames"
"ANY_ALL" : "ANY_ALL"
"enc" : "enc"
"end" : "end"
"getgroups" : "getgroups"
"_heappushpop_max" : "_heappushpop_max"
"LN" : "LN"
"_Timer" : "_Timer"
"SC_2_C_DEV" : "SC_2_C_DEV"
"SHLIBS" : "SHLIBS"
"_current_frames" : "_current_frames"
"HAVE_TERM_H" : "HAVE_TERM_H"
"MVWDELCH_IS_EXPRESSION" : "MVWDELCH_IS_EXPRESSION"
"env" : "env"
"tailappend" : "tailappend"
"void" : "void"
"ConsumerThread" : "ConsumerThread"
"_generate_posix_vars" : "_generate_posix_vars"
"A" : "A"
"new_active" : "new_active"
"MAXCODE" : "MAXCODE"
"getppid" : "getppid"
"spawnle" : "spawnle"
"S_IFSOCK" : "S_IFSOCK"
"tm_year" : "tm_year"
"register_error" : "register_error"
"MAKESETUP" : "MAKESETUP"
"setgroups" : "setgroups"
"spawnlp" : "spawnlp"
"LOCALMODLIBS" : "LOCALMODLIBS"
"SYS_SELECT_WITH_SYS_TIME" : "SYS_SELECT_WITH_SYS_TIME"
"isdisjoint" : "isdisjoint"
"BufferType" : "BufferType"
"execusercustomize" : "execusercustomize"
"_make_statvfs_result" : "_make_statvfs_result"
"classmethod" : "classmethod"
"_Thread__block" : "_Thread__block"
"alias" : "alias"
"environ" : "environ"
"BUILDPYTHON" : "BUILDPYTHON"
"NotImplementedError" : "NotImplementedError"
"_starmap" : "_starmap"
"itemgetter" : "itemgetter"
"__" : "__"
"vars" : "vars"
"WarningMessage" : "WarningMessage"
"DESTPATH" : "DESTPATH"
"mskanji" : "mskanji"
"imul" : "imul"
"ibm500" : "ibm500"
"MULTIARCH" : "MULTIARCH"
"_C" : "_C"
"S_IMODE" : "S_IMODE"
"SIGPOLL" : "SIGPOLL"
"f_restricted" : "f_restricted"
"CATEGORY_LOC_NOT_WORD" : "CATEGORY_LOC_NOT_WORD"
"del" : "del"
"__class__" : "__class__"
"HAVE_SETRESGID" : "HAVE_SETRESGID"
"NameError" : "NameError"
"imp" : "imp"
"INCLUDEDIR" : "INCLUDEDIR"
"SRE_INFO_PREFIX" : "SRE_INFO_PREFIX"
"setgid" : "setgid"
"kwargs" : "kwargs"
"_d" : "_d"
"pass" : "pass"
"ms_kanji" : "ms_kanji"
"cls" : "cls"
"ABDAY_7" : "ABDAY_7"
"utf_32_le" : "utf_32_le"
"__setstate__" : "__setstate__"
"SC_RTSIG_MAX" : "SC_RTSIG_MAX"
"iso_8859_10" : "iso_8859_10"
"cspc862latinhebrew" : "cspc862latinhebrew"
"__subclasscheck__" : "__subclasscheck__"
"parse_template" : "parse_template"
"HAVE_MEMORY_H" : "HAVE_MEMORY_H"
"ABDAY_3" : "ABDAY_3"
"itanium" : "itanium"
"AT_END" : "AT_END"
"AST_C_DIR" : "AST_C_DIR"
"ABDAY_1" : "ABDAY_1"
"iso646_us" : "iso646_us"
"makepath" : "makepath"
"l" : "l"
"starmap" : "starmap"
"timeout" : "timeout"
"debug" : "debug"
"gi_code" : "gi_code"
"rU" : "rU"
"charmap_build" : "charmap_build"
"schemes" : "schemes"
"ino1" : "ino1"
"ino2" : "ino2"
"HAVE_NCURSES_H" : "HAVE_NCURSES_H"
"WITH_DYLD" : "WITH_DYLD"
"UnicodeTranslateError" : "UnicodeTranslateError"
"st_atime" : "st_atime"
"_zip_directory_cache" : "_zip_directory_cache"
"_INSTALL_SCHEMES" : "_INSTALL_SCHEMES"
"isoctal" : "isoctal"
"SC_2_UPE" : "SC_2_UPE"
"ebcdic_cp_nl" : "ebcdic_cp_nl"
"HAVE_COPYSIGN" : "HAVE_COPYSIGN"
"array" : "array"
"WIFSIGNALED" : "WIFSIGNALED"
"EX_CONFIG" : "EX_CONFIG"
"MKDIR_P" : "MKDIR_P"
"_SUCCESS_CODES" : "_SUCCESS_CODES"
"abstractmethod" : "abstractmethod"
"truth" : "truth"
"re" : "re"
"rb" : "rb"
"rc" : "rc"
"unicode_1_1_utf_7" : "unicode_1_1_utf_7"
"SRE_FLAG_VERBOSE" : "SRE_FLAG_VERBOSE"
"FileType" : "FileType"
"HAVE_PTH" : "HAVE_PTH"
"gotit" : "gotit"
"irepeat" : "irepeat"
"is_" : "is_"
"EX_NOUSER" : "EX_NOUSER"
"f_lasti" : "f_lasti"
"category_not_space" : "category_not_space"
"MIN_REPEAT_ONE" : "MIN_REPEAT_ONE"
"EX_SOFTWARE" : "EX_SOFTWARE"
"iso_ir_58" : "iso_ir_58"
"literal_ignore" : "literal_ignore"
"__setitem__" : "__setitem__"
"quotedprintable" : "quotedprintable"
"W" : "W"
"tobytes" : "tobytes"
"PACKAGE_URL" : "PACKAGE_URL"
"filenames" : "filenames"
"latin_1_decode" : "latin_1_decode"
"ST_CTIME" : "ST_CTIME"
"CallableProxyType" : "CallableProxyType"
"_locale" : "_locale"
"Tokenizer" : "Tokenizer"
"HAVE_BROKEN_SEM_GETVALUE" : "HAVE_BROKEN_SEM_GETVALUE"
"traceback" : "traceback"
"r8" : "r8"
"ASDLGEN_FILES" : "ASDLGEN_FILES"
"ismount" : "ismount"
"cp1256" : "cp1256"
"ST_SIZE" : "ST_SIZE"
"MODLIBS" : "MODLIBS"
"make_identity_dict" : "make_identity_dict"
"cp1251" : "cp1251"
"SC_CHAR_MIN" : "SC_CHAR_MIN"
"CATEGORY_UNI_NOT_WORD" : "CATEGORY_UNI_NOT_WORD"
"_field_template" : "_field_template"
"cp1253" : "cp1253"
"HAVE_LONG_DOUBLE" : "HAVE_LONG_DOUBLE"
"MASK" : "MASK"
"RuntimeError" : "RuntimeError"
"min_repeat_one" : "min_repeat_one"
"GETPGRP_HAVE_ARG" : "GETPGRP_HAVE_ARG"
"get_config_vars" : "get_config_vars"
"utf_32" : "utf_32"
"enumerate" : "enumerate"
"TESTPYTHON" : "TESTPYTHON"
"ERA_T_FMT" : "ERA_T_FMT"
"iskeyword" : "iskeyword"
"basestring" : "basestring"
"isalnum" : "isalnum"
"top" : "top"
"CS_LFS_LDFLAGS" : "CS_LFS_LDFLAGS"
"isalpha" : "isalpha"
"HAVE_OSX105_SDK" : "HAVE_OSX105_SDK"
"shift_jis" : "shift_jis"
"setcheckinterval" : "setcheckinterval"
"SC_PHYS_PAGES" : "SC_PHYS_PAGES"
"B" : "B"
"isAlive" : "isAlive"
"_Thread__started" : "_Thread__started"
"HGVERSION" : "HGVERSION"
"tee" : "tee"
"_ignorecase_fixes" : "_ignorecase_fixes"
"item_yes" : "item_yes"
"ASSERT" : "ASSERT"
"SIZEOF_SIZE_T" : "SIZEOF_SIZE_T"
"SC_CHAR_BIT" : "SC_CHAR_BIT"
"big5_tw" : "big5_tw"
"HAVE_SYS_UTSNAME_H" : "HAVE_SYS_UTSNAME_H"
"LongType" : "LongType"
"Set" : "Set"
"target" : "target"
"format_exception" : "format_exception"
"UF_HIDDEN" : "UF_HIDDEN"
"LC_COLLATE" : "LC_COLLATE"
"UnboundMethodType" : "UnboundMethodType"
"mknod" : "mknod"
"final" : "final"
"SC_PII_SOCKET" : "SC_PII_SOCKET"
"tzname" : "tzname"
"SC_MAPPED_FILES" : "SC_MAPPED_FILES"
"utf_32_be_encode" : "utf_32_be_encode"
"HAVE_CLOCK" : "HAVE_CLOCK"
"PGO_PROF_GEN_FLAG" : "PGO_PROF_GEN_FLAG"
"windows_1254" : "windows_1254"
"pw_dir" : "pw_dir"
"HAVE_PAUSE" : "HAVE_PAUSE"
"__radd__" : "__radd__"
"altsepIndex" : "altsepIndex"
"_print" : "_print"
"pt154" : "pt154"
"seen" : "seen"
"seek" : "seek"
"__new__" : "__new__"
"SC_LINE_MAX" : "SC_LINE_MAX"
"utf_16_le_encode" : "utf_16_le_encode"
"-" : "-"
"purelib" : "purelib"
"ENABLE_IPV6" : "ENABLE_IPV6"
"Library" : "Library"
"decoding_map" : "decoding_map"
"_formatter_parser" : "_formatter_parser"
"__getstate__" : "__getstate__"
"getuserbase" : "getuserbase"
"stacklevel" : "stacklevel"
"HAVE__GETPTY" : "HAVE__GETPTY"
"HAVE_GETLOADAVG" : "HAVE_GETLOADAVG"
"st_blocks" : "st_blocks"
"MACHDEPS" : "MACHDEPS"
"childpos" : "childpos"
"DictMixin" : "DictMixin"
"denominator" : "denominator"
"normcase" : "normcase"
"PY_CPPFLAGS" : "PY_CPPFLAGS"
"waiter" : "waiter"
"__rlshift__" : "__rlshift__"
"scripts" : "scripts"
"DAY_2" : "DAY_2"
"any_all" : "any_all"
"ReferenceType" : "ReferenceType"
"DAY_1" : "DAY_1"
"DAY_6" : "DAY_6"
"IndentationError" : "IndentationError"
"DAY_4" : "DAY_4"
"DAY_5" : "DAY_5"
"HAVE_LGAMMA" : "HAVE_LGAMMA"
"saved_exc" : "saved_exc"
"tracebacklimit" : "tracebacklimit"
"alarm" : "alarm"
"partition" : "partition"
"m" : "m"
"PYLONG_BITS_IN_DIGIT" : "PYLONG_BITS_IN_DIGIT"
"HAVE_FCHDIR" : "HAVE_FCHDIR"
"floordiv" : "floordiv"
"utf_16_be_encode" : "utf_16_be_encode"
"AttributeError" : "AttributeError"
"onceregistry" : "onceregistry"
"dot" : "dot"
"HAVE_SETREUID" : "HAVE_SETREUID"
"1140" : "1140"
"EX_IOERR" : "EX_IOERR"
"_expand" : "_expand"
"difference_update" : "difference_update"
"known_paths" : "known_paths"
"__str__" : "__str__"
"random" : "random"
"HAVE_ERRNO_H" : "HAVE_ERRNO_H"
"CS_XBS5_ILP32_OFFBIG_LINTFLAGS" : "CS_XBS5_ILP32_OFFBIG_LINTFLAGS"
"has_key" : "has_key"
"once_registry" : "once_registry"
"long_info" : "long_info"
"S_ISSOCK" : "S_ISSOCK"
"HAVE_UTIME_H" : "HAVE_UTIME_H"
"thai" : "thai"
"_CONFIG_VARS" : "_CONFIG_VARS"
"StreamWriter" : "StreamWriter"
"eucjis2004" : "eucjis2004"
"ASDLGEN" : "ASDLGEN"
"__enter__" : "__enter__"
"PGSRCS" : "PGSRCS"
"SIGILL" : "SIGILL"
"ST_NODIRATIME" : "ST_NODIRATIME"
"version" : "version"
"HAVE_DEV_PTC" : "HAVE_DEV_PTC"
"__call__" : "__call__"
"macturkish" : "macturkish"
"IncrementalDecoder" : "IncrementalDecoder"
"oct" : "oct"
"cmp_lt" : "cmp_lt"
"SystemExit" : "SystemExit"
"getcodesize" : "getcodesize"
"HAVE_DECL_ISINF" : "HAVE_DECL_ISINF"
"dup2" : "dup2"
"func_name" : "func_name"
"setdefaultencoding" : "setdefaultencoding"
"stop" : "stop"
"_block" : "_block"
"CONFIGURE_LDFLAGS" : "CONFIGURE_LDFLAGS"
"SC_PII_OSI_CLTS" : "SC_PII_OSI_CLTS"
"UF_NODUMP" : "UF_NODUMP"
"popitem" : "popitem"
"X" : "X"
"runs" : "runs"
"_Thread__args" : "_Thread__args"
"HAVE_FCNTL_H" : "HAVE_FCNTL_H"
"get_ident" : "get_ident"
"HAVE_STRUCT_STAT_ST_GEN" : "HAVE_STRUCT_STAT_ST_GEN"
"opengroup" : "opengroup"
"reload" : "reload"
"HAVE_GRP_H" : "HAVE_GRP_H"
"st_uid" : "st_uid"
"HAVE_SOCKADDR_STORAGE" : "HAVE_SOCKADDR_STORAGE"
"TIME_WITH_SYS_TIME" : "TIME_WITH_SYS_TIME"
"SC_TIMER_MAX" : "SC_TIMER_MAX"
"pardir" : "pardir"
"UNITCODES" : "UNITCODES"
"_deque" : "_deque"
"__dict__" : "__dict__"
"DAY_3" : "DAY_3"
"result" : "result"
"linebuffer" : "linebuffer"
"HAVE_TEMPNAM" : "HAVE_TEMPNAM"
"delitem" : "delitem"
"USER_SITE" : "USER_SITE"
"max_repeat" : "max_repeat"
"__rand__" : "__rand__"
"Include" : "Include"
"new_path" : "new_path"
"quopri_codec" : "quopri_codec"
"ValuesView" : "ValuesView"
"HAVE_SYS_UN_H" : "HAVE_SYS_UN_H"
"filename" : "filename"
"HAVE_THREAD_H" : "HAVE_THREAD_H"
"HAVE_SYS_EPOLL_H" : "HAVE_SYS_EPOLL_H"
"mul" : "mul"
"PY_LDFLAGS" : "PY_LDFLAGS"
"C" : "C"
"wc" : "wc"
"wb" : "wb"
"extend" : "extend"
"HAVE_SETEGID" : "HAVE_SETEGID"
"USE_COMPUTED_GOTOS" : "USE_COMPUTED_GOTOS"
"Counter" : "Counter"
"WANT_WCTYPE_FUNCTIONS" : "WANT_WCTYPE_FUNCTIONS"
"defaultaction" : "defaultaction"
"wr" : "wr"
"stat_float_times" : "stat_float_times"
"_REPEATING_CODES" : "_REPEATING_CODES"
"warn_explicit" : "warn_explicit"
"__unicode__" : "__unicode__"
"ST_NOEXEC" : "ST_NOEXEC"
"HAVE_MEMMOVE" : "HAVE_MEMMOVE"
"CATEGORY_DIGIT" : "CATEGORY_DIGIT"
"SC_AIO_PRIO_DELTA_MAX" : "SC_AIO_PRIO_DELTA_MAX"
"_getframe" : "_getframe"
"exec" : "exec"
"LC_TIME" : "LC_TIME"
"maxlen" : "maxlen"
"_PYTHON_BUILD" : "_PYTHON_BUILD"
"GNULD" : "GNULD"
"HAVE_GETRESGID" : "HAVE_GETRESGID"
"iso_2022_jp_ext" : "iso_2022_jp_ext"
"EX_DATAERR" : "EX_DATAERR"
"tis260" : "tis260"
"readsize" : "readsize"
"loader" : "loader"
"ascii_decode" : "ascii_decode"
"_ASSERTCHARS" : "_ASSERTCHARS"
"_LITERAL_CODES" : "_LITERAL_CODES"
"iterable" : "iterable"
"union" : "union"
"_reconstructor" : "_reconstructor"
"NotImplementedType" : "NotImplementedType"
"SIGINT" : "SIGINT"
"MODOBJS" : "MODOBJS"
"active_count" : "active_count"
"_execvpe" : "_execvpe"
"SC_COLL_WEIGHTS_MAX" : "SC_COLL_WEIGHTS_MAX"
"maxsize" : "maxsize"
"CATEGORY_UNI_LINEBREAK" : "CATEGORY_UNI_LINEBREAK"
"itervalues" : "itervalues"
"dropwhile" : "dropwhile"
"_Thread__bootstrap_inner" : "_Thread__bootstrap_inner"
"__doc__" : "__doc__"
"__len__" : "__len__"
"SC_FSYNC" : "SC_FSYNC"
"ATCODES" : "ATCODES"
"_get_makefile_filename" : "_get_makefile_filename"
"ob_type" : "ob_type"
"get_source" : "get_source"
"euc_jis2004" : "euc_jis2004"
"CC" : "CC"
"WNOHANG" : "WNOHANG"
"UnicodeEncodeError" : "UnicodeEncodeError"
"iso_8859_7_1987" : "iso_8859_7_1987"
"f_exc_value" : "f_exc_value"
"SC_PRIORITY_SCHEDULING" : "SC_PRIORITY_SCHEDULING"
"ident" : "ident"
"aix" : "aix"
"PC_NAME_MAX" : "PC_NAME_MAX"
"_equivalences" : "_equivalences"
"zlib" : "zlib"
"HAVE_FPATHCONF" : "HAVE_FPATHCONF"
"SC_MQ_PRIO_MAX" : "SC_MQ_PRIO_MAX"
"n" : "n"
"typename" : "typename"
"HAVE_BROKEN_POLL" : "HAVE_BROKEN_POLL"
"SUBDIRSTOO" : "SUBDIRSTOO"
"f_bfree" : "f_bfree"
"CS_XBS5_LP64_OFF64_LDFLAGS" : "CS_XBS5_LP64_OFF64_LDFLAGS"
"property" : "property"
"FunctionType" : "FunctionType"
"CH_UNICODE" : "CH_UNICODE"
"__ge__" : "__ge__"
"hexversion" : "hexversion"
"LDLIBRARY" : "LDLIBRARY"
"DictType" : "DictType"
"MemoryError" : "MemoryError"
"_repr_template" : "_repr_template"
"HAVE_USABLE_WCHAR_T" : "HAVE_USABLE_WCHAR_T"
"is" : "is"
"S_IXOTH" : "S_IXOTH"
"it" : "it"
"CATEGORY_UNI_NOT_LINEBREAK" : "CATEGORY_UNI_NOT_LINEBREAK"
"HAVE_STRINGS_H" : "HAVE_STRINGS_H"
"INSTALL" : "INSTALL"
"in" : "in"
"id" : "id"
"if" : "if"
"Python" : "Python"
"UnicodeWarning" : "UnicodeWarning"
"HAVE_ALARM" : "HAVE_ALARM"
"__mro__" : "__mro__"
"os2emx" : "os2emx"
"iso_8859_16" : "iso_8859_16"
"iso_8859_15" : "iso_8859_15"
"complex" : "complex"
"iso_8859_13" : "iso_8859_13"
"split" : "split"
"iso_8859_11" : "iso_8859_11"
"xmlcharrefreplace" : "xmlcharrefreplace"
"HAVE_SYS_AUDIOIO_H" : "HAVE_SYS_AUDIOIO_H"
"HAVE_GETPGID" : "HAVE_GETPGID"
"waitpid" : "waitpid"
"getencoder" : "getencoder"
"pydebug" : "pydebug"
"__idiv__" : "__idiv__"
"S_IREAD" : "S_IREAD"
"SC_PII" : "SC_PII"
"OLDPATH" : "OLDPATH"
"confstr_names" : "confstr_names"
"Y" : "Y"
"nl_langinfo" : "nl_langinfo"
"heapify" : "heapify"
"_CODEBITS" : "_CODEBITS"
"IN_IGNORE" : "IN_IGNORE"
"HAVE_DECL_ISNAN" : "HAVE_DECL_ISNAN"
"cp1255" : "cp1255"
"HAVE_SETITIMER" : "HAVE_SETITIMER"
"PACKAGE_NAME" : "PACKAGE_NAME"
"at_non_boundary" : "at_non_boundary"
"_weakref" : "_weakref"
"imod" : "imod"
"HAVE_FCHOWN" : "HAVE_FCHOWN"
"S_IWGRP" : "S_IWGRP"
"8859" : "8859"
"_dump_registry" : "_dump_registry"
"ebcdic_cp_ch" : "ebcdic_cp_ch"
"iso2022_jp_ext" : "iso2022_jp_ext"
"OverflowError" : "OverflowError"
"CPPFLAGS" : "CPPFLAGS"
"__ror__" : "__ror__"
"EX_NOHOST" : "EX_NOHOST"
"O_RDONLY" : "O_RDONLY"
"iso_celtic" : "iso_celtic"
"encodings.codecs" : "encodings.codecs"
"BufferedIncrementalDecoder" : "BufferedIncrementalDecoder"
"SF_SNAPSHOT" : "SF_SNAPSHOT"
"memoryview" : "memoryview"
"yes" : "yes"
"HAVE_GETPID" : "HAVE_GETPID"
"CS_LFS64_LIBS" : "CS_LFS64_LIBS"
"__slotnames__" : "__slotnames__"
"makedict" : "makedict"
"instance" : "instance"
"cp500" : "cp500"
"HAVE_FSEEKO" : "HAVE_FSEEKO"
"RESSRCDIR" : "RESSRCDIR"
"SC_NL_NMAX" : "SC_NL_NMAX"
"tmpnam" : "tmpnam"
"heappush" : "heappush"
"CS_XBS5_ILP32_OFFBIG_LIBS" : "CS_XBS5_ILP32_OFFBIG_LIBS"
"itemref" : "itemref"
"D" : "D"
"format_tb" : "format_tb"
"rng" : "rng"
"textwrap" : "textwrap"
"st_mode" : "st_mode"
"HAVE_SYS_MKDEV_H" : "HAVE_SYS_MKDEV_H"
"updatecache" : "updatecache"
"_MutableMapping__marker" : "_MutableMapping__marker"
"OPCODETARGETGEN_FILES" : "OPCODETARGETGEN_FILES"
"SC_2_CHAR_TERM" : "SC_2_CHAR_TERM"
"korean" : "korean"
"Scanner" : "Scanner"
"SC_SIGQUEUE_MAX" : "SC_SIGQUEUE_MAX"
"daemon" : "daemon"
"tis_620_2529_0" : "tis_620_2529_0"
"HAVE_SETEUID" : "HAVE_SETEUID"
"renames" : "renames"
"CXX" : "CXX"
"HAVE_LANGINFO_H" : "HAVE_LANGINFO_H"
"getsizeof" : "getsizeof"
"_extension_registry" : "_extension_registry"
"HAVE_DEV_PTMX" : "HAVE_DEV_PTMX"
"SC_XOPEN_LEGACY" : "SC_XOPEN_LEGACY"
"HAVE_TCGETPGRP" : "HAVE_TCGETPGRP"
"__long__" : "__long__"
"_Printer__lines" : "_Printer__lines"
"aliasmbcs" : "aliasmbcs"
"old" : "old"
"D_FMT" : "D_FMT"
"concat" : "concat"
"isname" : "isname"
"exc_clear" : "exc_clear"
"intern" : "intern"
"escape" : "escape"
"getgid" : "getgid"
"ctermid" : "ctermid"
"LINKFORSHARED" : "LINKFORSHARED"
"setegid" : "setegid"
"float_info" : "float_info"
"__iand__" : "__iand__"
"for" : "for"
"FloatType" : "FloatType"
"sequenceIncludes" : "sequenceIncludes"
"getcwdu" : "getcwdu"
"/" : "/"
"INSTALL_DATA" : "INSTALL_DATA"
"continue" : "continue"
"USE_TOOLBOX_OBJECT_GLUE" : "USE_TOOLBOX_OBJECT_GLUE"
"allocate" : "allocate"
"last_traceback" : "last_traceback"
"SC_2_FORT_RUN" : "SC_2_FORT_RUN"
"StringTypes" : "StringTypes"
"new_comps" : "new_comps"
"HAVE_GETRESUID" : "HAVE_GETRESUID"
"PTHREAD_SYSTEM_SCHED_SUPPORTED" : "PTHREAD_SYSTEM_SCHED_SUPPORTED"
"ImportWarning" : "ImportWarning"
"__ne__" : "__ne__"
"REPEAT" : "REPEAT"
"HAVE_GETSPNAM" : "HAVE_GETSPNAM"
"gmtime" : "gmtime"
"groupdict" : "groupdict"
"st_dev" : "st_dev"
"_buffer_decode" : "_buffer_decode"
"pickle_complex" : "pickle_complex"
"s_jis_2004" : "s_jis_2004"
"super" : "super"
"deleter" : "deleter"
"rightpos" : "rightpos"
"obj" : "obj"
"WHITESPACE" : "WHITESPACE"
"PYTHON_FOR_BUILD" : "PYTHON_FOR_BUILD"
"NOT_LITERAL" : "NOT_LITERAL"
"__length_hint__" : "__length_hint__"
"numerator" : "numerator"
"ST_INO" : "ST_INO"
"OCTDIGITS" : "OCTDIGITS"
"SC_NL_LANGMAX" : "SC_NL_LANGMAX"
"HAVE_SETRESUID" : "HAVE_SETRESUID"
"at_beginning_line" : "at_beginning_line"
"HAVE_UINTPTR_T" : "HAVE_UINTPTR_T"
"O_DSYNC" : "O_DSYNC"
"contains" : "contains"
"tempnam" : "tempnam"
"_set_ident" : "_set_ident"
"getrecursionlimit" : "getrecursionlimit"
"float" : "float"
"HAVE_FINITE" : "HAVE_FINITE"
"splitlines" : "splitlines"
"koi8_r" : "koi8_r"
"__and__" : "__and__"
"SC_NZERO" : "SC_NZERO"
"rounds" : "rounds"
"indexgroup" : "indexgroup"
"__rpow__" : "__rpow__"
"PY_CFLAGS" : "PY_CFLAGS"
"ptcp154" : "ptcp154"
"format_stack" : "format_stack"
"SC_INT_MIN" : "SC_INT_MIN"
"BIGCHARSET" : "BIGCHARSET"
"f_frsize" : "f_frsize"
"class" : "class"
"PIPE" : "PIPE"
"width" : "width"
"gid" : "gid"
"_Printer__data" : "_Printer__data"
"default_action" : "default_action"
"INSTALL_SCRIPT" : "INSTALL_SCRIPT"
"fork" : "fork"
"__isub__" : "__isub__"
"head" : "head"
"utf_8" : "utf_8"
"co_code" : "co_code"
"epsilon" : "epsilon"
"cp852" : "cp852"
"_mapping" : "_mapping"
"utf_7" : "utf_7"
"fstat" : "fstat"
"_Thread__stderr" : "_Thread__stderr"
"encoder" : "encoder"
"isunicode" : "isunicode"
"failure" : "failure"
"heap" : "heap"
"decoder" : "decoder"
"HAVE_GETPRIORITY" : "HAVE_GETPRIORITY"
"SIGTERM" : "SIGTERM"
"Z" : "Z"
"true" : "true"
"is_alive" : "is_alive"
"_init_posix" : "_init_posix"
"wait4" : "wait4"
"attr" : "attr"
"wait3" : "wait3"
"latin3" : "latin3"
"_release_save" : "_release_save"
"saved_tb" : "saved_tb"
"BINDIR" : "BINDIR"
"CS_XBS5_LPBIG_OFFBIG_CFLAGS" : "CS_XBS5_LPBIG_OFFBIG_CFLAGS"
"local_values" : "local_values"
"HAVE_STRUCT_STAT_ST_BLKSIZE" : "HAVE_STRUCT_STAT_ST_BLKSIZE"
"emit" : "emit"
"no_site" : "no_site"
"SC_XOPEN_XCU_VERSION" : "SC_XOPEN_XCU_VERSION"
"_inverted_registry" : "_inverted_registry"
"daemonic" : "daemonic"
"dist_libdir" : "dist_libdir"
"filterwarnings" : "filterwarnings"
"SIGUSR2" : "SIGUSR2"
"SIGUSR1" : "SIGUSR1"
"_iterating" : "_iterating"
"SIZEOF_TIME_T" : "SIZEOF_TIME_T"
"HAVE_SNPRINTF" : "HAVE_SNPRINTF"
"_ClassType" : "_ClassType"
"SIGIOT" : "SIGIOT"
"EnvironmentError" : "EnvironmentError"
"co_cellvars" : "co_cellvars"
"timezone" : "timezone"
"SC_PASS_MAX" : "SC_PASS_MAX"
"SC_PII_INTERNET" : "SC_PII_INTERNET"
"archive" : "archive"
"WEXITSTATUS" : "WEXITSTATUS"
"osx_framework_user" : "osx_framework_user"
"__reduce_ex__" : "__reduce_ex__"
"nl" : "nl"
"no" : "no"
"not" : "not"
"_OrderedDict__map" : "_OrderedDict__map"
"__slots__" : "__slots__"
"HAVE_PLOCK" : "HAVE_PLOCK"
"HAVE_UNAME" : "HAVE_UNAME"
"readonly" : "readonly"
"HAVE_TM_ZONE" : "HAVE_TM_ZONE"
"TESTPATH" : "TESTPATH"
"ebcdic_cp_be" : "ebcdic_cp_be"
"MANDIR" : "MANDIR"
"nt" : "nt"
"genericpath" : "genericpath"
"HAVE_UINT64_T" : "HAVE_UINT64_T"
"E" : "E"
"CFLAGS" : "CFLAGS"
"truncate" : "truncate"
"SC_2_LOCALEDEF" : "SC_2_LOCALEDEF"
"CATEGORY_NOT_SPACE" : "CATEGORY_NOT_SPACE"
"DISTDIRS" : "DISTDIRS"
"update" : "update"
"StreamRecoder" : "StreamRecoder"
"CodecInfo" : "CodecInfo"
"getegid" : "getegid"
"iso_ir_148" : "iso_ir_148"
"HAVE_READLINK" : "HAVE_READLINK"
"gb2312_80" : "gb2312_80"
"Timer" : "Timer"
"JUMP" : "JUMP"
"1251" : "1251"
"HAVE_SPAWN_H" : "HAVE_SPAWN_H"
"max_exp" : "max_exp"
"interval" : "interval"
"getctime" : "getctime"
"ignore_environment" : "ignore_environment"
"__globals__" : "__globals__"
"__ipow__" : "__ipow__"
"WITH_VALGRIND" : "WITH_VALGRIND"
"big5_hkscs" : "big5_hkscs"
"ABMON_12" : "ABMON_12"
"ABMON_11" : "ABMON_11"
"prefix_skip" : "prefix_skip"
"condgroup" : "condgroup"
"CCSHARED" : "CCSHARED"
"setrecursionlimit" : "setrecursionlimit"
"S_IWRITE" : "S_IWRITE"
"_Event" : "_Event"
"RLock" : "RLock"
"chain" : "chain"
"symmetric_difference" : "symmetric_difference"
"global" : "global"
"_PATTERNENDERS" : "_PATTERNENDERS"
"SC_T_IOV_MAX" : "SC_T_IOV_MAX"
"EXE" : "EXE"
"subclass" : "subclass"
"get_filename" : "get_filename"
"remove_extension" : "remove_extension"
"cp424" : "cp424"
"izip_longest" : "izip_longest"
"HAVE_SETPGRP" : "HAVE_SETPGRP"
"HAVE_STDINT_H" : "HAVE_STDINT_H"
"__rshift__" : "__rshift__"
"SC_THREAD_KEYS_MAX" : "SC_THREAD_KEYS_MAX"
"SC_XOPEN_XPG4" : "SC_XOPEN_XPG4"
"caretspace" : "caretspace"
"co_firstlineno" : "co_firstlineno"
"SC_XOPEN_XPG3" : "SC_XOPEN_XPG3"
"_siftdown_max" : "_siftdown_max"
"link_next" : "link_next"
"S_IFDIR" : "S_IFDIR"
"dbcs" : "dbcs"
"format_exception_only" : "format_exception_only"
"HAVE_MKFIFO" : "HAVE_MKFIFO"
"0" : "0"
"finally" : "finally"
"1255" : "1255"
"euccn" : "euccn"
"SC_2_C_VERSION" : "SC_2_C_VERSION"
"HAVE_UCS4_TCL" : "HAVE_UCS4_TCL"
"isspace" : "isspace"
"ObjectType" : "ObjectType"
"rel_list" : "rel_list"
"__exit__" : "__exit__"
"string" : "string"
"delattr" : "delattr"
"os2" : "os2"
"_alphanum" : "_alphanum"
"VERSION" : "VERSION"
"HAVE_LOG1P" : "HAVE_LOG1P"
"iso_ir_101" : "iso_ir_101"
"seteuid" : "seteuid"
"isub" : "isub"
"writelines" : "writelines"
"isCallable" : "isCallable"
"_subst_vars" : "_subst_vars"
"_compile" : "_compile"
"_Printer__files" : "_Printer__files"
"SC_LONG_BIT" : "SC_LONG_BIT"
"IndexError" : "IndexError"
"SC_BC_BASE_MAX" : "SC_BC_BASE_MAX"
"level" : "level"
"SC_SELECT" : "SC_SELECT"
"dig" : "dig"
"iter" : "iter"
"424" : "424"
"item" : "item"
"setitem" : "setitem"
"1258" : "1258"
"resetwarnings" : "resetwarnings"
"LambdaType" : "LambdaType"
"round" : "round"
"dir" : "dir"
"upper" : "upper"
"HAVE_BROKEN_NICE" : "HAVE_BROKEN_NICE"
"finditer" : "finditer"
"at_uni_non_boundary" : "at_uni_non_boundary"
"lstrip" : "lstrip"
"Semaphore" : "Semaphore"
"deb_system" : "deb_system"
"HAVE_SYSCONF" : "HAVE_SYSCONF"
"sget" : "sget"
"DESTLIB" : "DESTLIB"
"permutations" : "permutations"
"in_ignore" : "in_ignore"
"unicode_escape_encode" : "unicode_escape_encode"
"iso_8859_10_1992" : "iso_8859_10_1992"
"HAVE_STATVFS" : "HAVE_STATVFS"
"64bit" : "64bit"
"LDCXXSHARED" : "LDCXXSHARED"
"_Event__flag" : "_Event__flag"
"abstractproperty" : "abstractproperty"
"lt" : "lt"
"u32" : "u32"
"template" : "template"
"Quitter" : "Quitter"
"SC_NL_ARGMAX" : "SC_NL_ARGMAX"
"HEXDIGITS" : "HEXDIGITS"
"INSTALL_PROGRAM" : "INSTALL_PROGRAM"
"True" : "True"
"istitle" : "istitle"
"MappingView" : "MappingView"
"REPEATING_CODES" : "REPEATING_CODES"
"MainThread" : "MainThread"
"unicode_internal_decode" : "unicode_internal_decode"
"CONFIGFILES" : "CONFIGFILES"
"__main__" : "__main__"
"setregid" : "setregid"
"groups" : "groups"
"extsep" : "extsep"
"__hex__" : "__hex__"
"[" : "["
"wait" : "wait"
"O_DIRECTORY" : "O_DIRECTORY"
"VERBOSE" : "VERBOSE"
"datarootdir" : "datarootdir"
"_bytes_to_codes" : "_bytes_to_codes"
"KeyboardInterrupt" : "KeyboardInterrupt"
"S_IFMT" : "S_IFMT"
"current" : "current"
"HAVE_MMAP" : "HAVE_MMAP"
"SCRIPTDIR" : "SCRIPTDIR"
"queue" : "queue"
"_MAXCACHE" : "_MAXCACHE"
"__repr__" : "__repr__"
"HAVE_CURSES_RESIZETERM" : "HAVE_CURSES_RESIZETERM"
"437" : "437"
"LockType" : "LockType"
"BaseException" : "BaseException"
"iand" : "iand"
"O_RSYNC" : "O_RSYNC"
"__getslice__" : "__getslice__"
"LIBC" : "LIBC"
"platstdlib" : "platstdlib"
"destfile" : "destfile"
"MODULE_OBJS" : "MODULE_OBJS"
"SIGXCPU" : "SIGXCPU"
"LIBS" : "LIBS"
"LIBP" : "LIBP"
"iterencode" : "iterencode"
"HAVE_SYS_EVENT_H" : "HAVE_SYS_EVENT_H"
"st_mtime" : "st_mtime"
"HAVE_PROCESS_H" : "HAVE_PROCESS_H"
"rindex" : "rindex"
"POBJS" : "POBJS"
"bool" : "bool"
"_siftup_max" : "_siftup_max"
"curdir" : "curdir"
"encode" : "encode"
"__rfloordiv__" : "__rfloordiv__"
"sizeof_digit" : "sizeof_digit"
"st_rdev" : "st_rdev"
"F" : "F"
"f_favail" : "f_favail"
"pathconf" : "pathconf"
"ATHEOS_THREADS" : "ATHEOS_THREADS"
"subpatternappend" : "subpatternappend"
"iso_8859_5_1988" : "iso_8859_5_1988"
"islice" : "islice"
"utf32" : "utf32"
"latin6" : "latin6"
"__defaults__" : "__defaults__"
"__self__" : "__self__"
"_PREFIX" : "_PREFIX"
"cat" : "cat"
"purge" : "purge"
"values" : "values"
"setresuid" : "setresuid"
"cp775" : "cp775"
"pickle" : "pickle"
"fget" : "fget"
"ABMON_3" : "ABMON_3"
"ABMON_2" : "ABMON_2"
"GeneratorExit" : "GeneratorExit"
"ABMON_7" : "ABMON_7"
"ABMON_6" : "ABMON_6"
"sysconf" : "sysconf"
"startswith" : "startswith"
"HAVE_LIBREADLINE" : "HAVE_LIBREADLINE"
"ms932" : "ms932"
"ENOTDIR" : "ENOTDIR"
"ABMON_8" : "ABMON_8"
"iso_8859_3" : "iso_8859_3"
"dotpth" : "dotpth"
"iso_8859_1" : "iso_8859_1"
"expandvars" : "expandvars"
"BOM_LE" : "BOM_LE"
"abort" : "abort"
"o" : "o"
"phrase" : "phrase"
"ARFLAGS" : "ARFLAGS"
"__sizeof__" : "__sizeof__"
"BOM32_BE" : "BOM32_BE"
"BLDLIBRARY" : "BLDLIBRARY"
"cp857" : "cp857"
"chroot" : "chroot"
"PLATDIR" : "PLATDIR"
"s2" : "s2"
"s1" : "s1"
"charset" : "charset"
"idiv" : "idiv"
"undef_rx" : "undef_rx"
"write" : "write"
"dev2" : "dev2"
"dev1" : "dev1"
"Py_UNICODE_SIZE" : "Py_UNICODE_SIZE"
"iso_ir_157" : "iso_ir_157"
"incrementaldecoder" : "incrementaldecoder"
"forkpty" : "forkpty"
"NotImplemented" : "NotImplemented"
"tolist" : "tolist"
"product" : "product"
"LIBSUBDIRS" : "LIBSUBDIRS"
"unsetenv" : "unsetenv"
"max" : "max"
"HAVE_CHOWN" : "HAVE_CHOWN"
"__bootstrap" : "__bootstrap"
"SIZEOF_PTHREAD_T" : "SIZEOF_PTHREAD_T"
"csptcp154" : "csptcp154"
"__delslice__" : "__delslice__"
"LC_ALL" : "LC_ALL"
"im_class" : "im_class"
"SIGVTALRM" : "SIGVTALRM"
"ITIMER_PROF" : "ITIMER_PROF"
"repeat" : "repeat"
"cspc775baltic" : "cspc775baltic"
"not_literal" : "not_literal"
"sr" : "sr"
"stdin" : "stdin"
"GROUPREF" : "GROUPREF"
"UnboundLocalError" : "UnboundLocalError"
"q" : "q"
"_Thread__target" : "_Thread__target"
"setpgrp" : "setpgrp"
"utf_8_encode" : "utf_8_encode"
"fp1" : "fp1"
"fp2" : "fp2"
"FLAGS" : "FLAGS"
"formatwarning" : "formatwarning"
"last_value" : "last_value"
"tis_620_0" : "tis_620_0"
"_Thread__ident" : "_Thread__ident"
"nondirs" : "nondirs"
"sethelper" : "sethelper"
"at_end_string" : "at_end_string"
"_note" : "_note"
"failobj" : "failobj"
"_sleep" : "_sleep"
"__rdiv__" : "__rdiv__"
"SC_AIO_MAX" : "SC_AIO_MAX"
"tb_lasti" : "tb_lasti"
"machine" : "machine"
"optfile" : "optfile"
"group" : "group"
"line0withoutend" : "line0withoutend"
"ST_ATIME" : "ST_ATIME"
"simplefilter" : "simplefilter"
"platform" : "platform"
"SC_AVPHYS_PAGES" : "SC_AVPHYS_PAGES"
"splitext" : "splitext"
"932" : "932"
"main" : "main"
"C_THREADS" : "C_THREADS"
"PYTHONFRAMEWORK" : "PYTHONFRAMEWORK"
"osname" : "osname"
"_compare_digest" : "_compare_digest"
"break" : "break"
"expanduser" : "expanduser"
"3" : "3"
"HAVE_LIBINTL_H" : "HAVE_LIBINTL_H"
"PLATMACPATH" : "PLATMACPATH"
"platbase" : "platbase"
"SC_EQUIV_CLASS_MAX" : "SC_EQUIV_CLASS_MAX"
"hex_codec" : "hex_codec"
"HAVE_STDARG_PROTOTYPES" : "HAVE_STDARG_PROTOTYPES"
"sorted" : "sorted"
"HAVE_GETHOSTBYNAME_R_5_ARG" : "HAVE_GETHOSTBYNAME_R_5_ARG"
"HAVE_SYS_RESOURCE_H" : "HAVE_SYS_RESOURCE_H"
"HAVE_DLOPEN" : "HAVE_DLOPEN"
"SIZEOF_SHORT" : "SIZEOF_SHORT"
"iso2022_jp_3" : "iso2022_jp_3"
"iso2022_jp_2" : "iso2022_jp_2"
"iso2022_jp_1" : "iso2022_jp_1"
"iso_2022_kr" : "iso_2022_kr"
"name" : "name"
"eucjisx0213" : "eucjisx0213"
"no_user_site" : "no_user_site"
"statvfs" : "statvfs"
"setreuid" : "setreuid"
"data_info" : "data_info"
"win32" : "win32"
"NOEXPR" : "NOEXPR"
"getpgid" : "getpgid"
"getitem" : "getitem"
"followlinks" : "followlinks"
"Event" : "Event"
"last" : "last"
"LC_NUMERIC" : "LC_NUMERIC"
"HAVE_SIGINTERRUPT" : "HAVE_SIGINTERRUPT"
"HAVE_SEM_GETVALUE" : "HAVE_SEM_GETVALUE"
"scheme" : "scheme"
"O_NOFOLLOW" : "O_NOFOLLOW"
"HAVE_TIMES" : "HAVE_TIMES"
"MEMTESTOPTS" : "MEMTESTOPTS"
"subn" : "subn"
"HAVE_GCC_ASM_FOR_X87" : "HAVE_GCC_ASM_FOR_X87"
"HAVE_GETENTROPY" : "HAVE_GETENTROPY"
"dirname" : "dirname"
"eq" : "eq"
"_norm_encoding_map" : "_norm_encoding_map"
"MON_7" : "MON_7"
"ST_RDONLY" : "ST_RDONLY"
"threading" : "threading"
"latin9" : "latin9"
"_PY_VERSION_SHORT_NO_DOT" : "_PY_VERSION_SHORT_NO_DOT"
"BytesWarning" : "BytesWarning"
"HAVE_STDLIB_H" : "HAVE_STDLIB_H"
"HAVE_TCSETPGRP" : "HAVE_TCSETPGRP"
"SIGALRM" : "SIGALRM"
"SC_XOPEN_VERSION" : "SC_XOPEN_VERSION"
"arg_list" : "arg_list"
"after" : "after"
"G" : "G"
"other_count" : "other_count"
"__builtins__" : "__builtins__"
"args" : "args"
"getcwd" : "getcwd"
"warnoptions" : "warnoptions"
"argv" : "argv"
"CATEGORY_UNI_NOT_DIGIT" : "CATEGORY_UNI_NOT_DIGIT"
"py3k_warning" : "py3k_warning"
"ord" : "ord"
"tmpv" : "tmpv"
"NOT_LITERAL_IGNORE" : "NOT_LITERAL_IGNORE"
"u8" : "u8"
"or_" : "or_"
"greek8" : "greek8"
"l10" : "l10"
"setdefault" : "setdefault"
"iso2022kr" : "iso2022kr"
"cp367" : "cp367"
"BOM_BE" : "BOM_BE"
"WUNTRACED" : "WUNTRACED"
"ms949" : "ms949"
"XRangeType" : "XRangeType"
"class_definition" : "class_definition"
"_parse_makefile" : "_parse_makefile"
"SIZEOF_VOID_P" : "SIZEOF_VOID_P"
"islower" : "islower"
"isupper" : "isupper"
"__not__" : "__not__"
"u7" : "u7"
"SGI_ABI" : "SGI_ABI"
"info" : "info"
"initial" : "initial"
"issubset" : "issubset"
"csascii" : "csascii"
"variables" : "variables"
"WITH_DOC_STRINGS" : "WITH_DOC_STRINGS"
"mac_latin2" : "mac_latin2"
"nested" : "nested"
"print_last" : "print_last"
"_mercurial" : "_mercurial"
"BooleanType" : "BooleanType"
"message" : "message"
"open" : "open"
"size" : "size"
"HAVE_STROPTS_H" : "HAVE_STROPTS_H"
"__subclasses__" : "__subclasses__"
"HAVE_WAITPID" : "HAVE_WAITPID"
"_Thread__name" : "_Thread__name"
"inv" : "inv"
"__loader__" : "__loader__"
"dcgettext" : "dcgettext"
"2" : "2"
"_optimize_charset" : "_optimize_charset"
"__irepeat__" : "__irepeat__"
"bits" : "bits"
"HAVE_SYS_PARAM_H" : "HAVE_SYS_PARAM_H"
"confstr" : "confstr"
"_RLock__block" : "_RLock__block"
"ibm869" : "ibm869"
"ibm866" : "ibm866"
"_codecs" : "_codecs"
"ibm864" : "ibm864"
"ibm865" : "ibm865"
"ibm862" : "ibm862"
"ibm863" : "ibm863"
"ibm860" : "ibm860"
"ibm861" : "ibm861"
"_osx_support" : "_osx_support"
"getlines" : "getlines"
"cp949" : "cp949"
"copy" : "copy"
"__next" : "__next"
"HAVE_GETSID" : "HAVE_GETSID"
"X87_DOUBLE_ROUNDING" : "X87_DOUBLE_ROUNDING"
"INFO" : "INFO"
"wpid" : "wpid"
"translate" : "translate"
"HAVE_ALTZONE" : "HAVE_ALTZONE"
"BOM32_LE" : "BOM32_LE"
"setattr" : "setattr"
"SRCDIRS" : "SRCDIRS"
"DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754" : "DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754"
"get_scheme_names" : "get_scheme_names"
"LOOKBEHINDASSERTCHARS" : "LOOKBEHINDASSERTCHARS"
"macroman" : "macroman"
"r" : "r"
"posix" : "posix"
"BRANCH" : "BRANCH"
"HAVE_INT64_T" : "HAVE_INT64_T"
"fullname" : "fullname"
"_active" : "_active"
"and" : "and"
"PC_MAX_INPUT" : "PC_MAX_INPUT"
"Container" : "Container"
"_local" : "_local"
"other_dict" : "other_dict"
"not_" : "not_"
"__getattribute__" : "__getattribute__"
"reader" : "reader"
"_pending_removals" : "_pending_removals"
"min_exp" : "min_exp"
"norm_encoding" : "norm_encoding"
"combinations_with_replacement" : "combinations_with_replacement"
"any" : "any"
"HAVE_SYS_STAT_H" : "HAVE_SYS_STAT_H"
"greek" : "greek"
"csisolatin4" : "csisolatin4"
"SC_XOPEN_REALTIME_THREADS" : "SC_XOPEN_REALTIME_THREADS"
"PC_CHOWN_RESTRICTED" : "PC_CHOWN_RESTRICTED"
"Mapping" : "Mapping"
"HAVE_FORKPTY" : "HAVE_FORKPTY"
"libpath" : "libpath"
"charsetappend" : "charsetappend"
"PC_ASYNC_IO" : "PC_ASYNC_IO"
"ERA_D_T_FMT" : "ERA_D_T_FMT"
"CALL" : "CALL"
"multiarch" : "multiarch"
"getlower" : "getlower"
"ksc5601" : "ksc5601"
"realpath" : "realpath"
"getlogin" : "getlogin"
"_pickle_stat_result" : "_pickle_stat_result"
"_false" : "_false"
"opposite" : "opposite"
"buffer" : "buffer"
"compress" : "compress"
"normalize_encoding" : "normalize_encoding"
"CS_LFS64_LINTFLAGS" : "CS_LFS64_LINTFLAGS"
"WITH_LIBINTL" : "WITH_LIBINTL"
"]" : "]"
"AssertionError" : "AssertionError"
"SIZEOF_WCHAR_T" : "SIZEOF_WCHAR_T"
"expand_template" : "expand_template"
"AT_UNI_BOUNDARY" : "AT_UNI_BOUNDARY"
"f_trace" : "f_trace"
"bigcharset" : "bigcharset"
"SC_THREAD_SAFE_FUNCTIONS" : "SC_THREAD_SAFE_FUNCTIONS"
"last_type" : "last_type"
"linecache" : "linecache"
"mro" : "mro"
"iso_ir_144" : "iso_ir_144"
"_formatter_field_name_split" : "_formatter_field_name_split"
"ASSERT_CODES" : "ASSERT_CODES"
"isident" : "isident"
"WTERMSIG" : "WTERMSIG"
"getregentry" : "getregentry"
"py_version_nodot" : "py_version_nodot"
"iso_8859_9" : "iso_8859_9"
"SIGTSTP" : "SIGTSTP"
"cp1140" : "cp1140"
"_Environ" : "_Environ"
"subprocess" : "subprocess"
"maxint" : "maxint"
"__irshift__" : "__irshift__"
"LIBRARY" : "LIBRARY"
"bytebuffer" : "bytebuffer"
"HAVE_TERMIOS_H" : "HAVE_TERMIOS_H"
"notdone" : "notdone"
"data" : "data"
"showwarning" : "showwarning"
"cp861" : "cp861"
"iso_2022_jp" : "iso_2022_jp"
"title" : "title"
"tm_wday" : "tm_wday"
"OSError" : "OSError"
"new_module" : "new_module"
"unicodetype" : "unicodetype"
"dict" : "dict"
"_heapify_max" : "_heapify_max"
"CS_LFS_LIBS" : "CS_LFS_LIBS"
"iso8859" : "iso8859"
"reset" : "reset"
"HAVE_SYS_WAIT_H" : "HAVE_SYS_WAIT_H"
"get" : "get"
"H" : "H"
"_init_pathinfo" : "_init_pathinfo"
"repr" : "repr"
"\x0c" : "\x0c"
"repl" : "repl"
"iso_8859_6" : "iso_8859_6"
"fileno" : "fileno"
"HAVE_GETNAMEINFO" : "HAVE_GETNAMEINFO"
"at_end_line" : "at_end_line"
"S_ISBLK" : "S_ISBLK"
"_category_name" : "_category_name"
"yield" : "yield"
"pydoc" : "pydoc"
"subtype" : "subtype"
"item_no" : "item_no"
"bind_textdomain_codeset" : "bind_textdomain_codeset"
"PACKAGE_TARNAME" : "PACKAGE_TARNAME"
"iso_8859_5" : "iso_8859_5"
"__module__" : "__module__"
"softspace" : "softspace"
"iso2022_jp_2004" : "iso2022_jp_2004"
"SIGQUIT" : "SIGQUIT"
"_compile_info" : "_compile_info"
"_trace_hook" : "_trace_hook"
"HAVE_KILL" : "HAVE_KILL"
"cp1361" : "cp1361"
"exc_value" : "exc_value"
"__repeat__" : "__repeat__"
"excepthook" : "excepthook"
"start_list" : "start_list"
"co_varnames" : "co_varnames"
"iterdecode" : "iterdecode"
"StringType" : "StringType"
"bypass_cache" : "bypass_cache"
"parent" : "parent"
"__all__" : "__all__"
"quoted_printable" : "quoted_printable"
"valuestr" : "valuestr"
"makedirs" : "makedirs"
"seqtypes" : "seqtypes"
"SC_SEMAPHORES" : "SC_SEMAPHORES"
"errorcode" : "errorcode"
"Py_USING_UNICODE" : "Py_USING_UNICODE"
"getattr" : "getattr"
"import" : "import"
"ModuleType" : "ModuleType"
"define_rx" : "define_rx"
"_reset_internal_locks" : "_reset_internal_locks"
"isSet" : "isSet"
"stat_result" : "stat_result"
"stack_size" : "stack_size"
"getdefaultencoding" : "getdefaultencoding"
"AT_NON_BOUNDARY" : "AT_NON_BOUNDARY"
"tup" : "tup"
"comp" : "comp"
"FILEMODE" : "FILEMODE"
"co_lnotab" : "co_lnotab"
"PARSER_OBJS" : "PARSER_OBJS"
"iso_8859_2" : "iso_8859_2"
"AT_BEGINNING_LINE" : "AT_BEGINNING_LINE"
"bytes_warning" : "bytes_warning"
"FrameType" : "FrameType"
"AT_BEGINNING_STRING" : "AT_BEGINNING_STRING"
"filenameIndex" : "filenameIndex"
"HAVE_SEM_TIMEDWAIT" : "HAVE_SEM_TIMEDWAIT"
"_extension_cache" : "_extension_cache"
"UserWarning" : "UserWarning"
"data_encoding" : "data_encoding"
"itruediv" : "itruediv"
"s" : "s"
"ST_DEV" : "ST_DEV"
"_pickle" : "_pickle"
"HAVE_HSTRERROR" : "HAVE_HSTRERROR"
"HAVE_SYS_DIR_H" : "HAVE_SYS_DIR_H"
"HAVE_RL_PRE_INPUT_HOOK" : "HAVE_RL_PRE_INPUT_HOOK"
"groupby" : "groupby"
"jisx0213" : "jisx0213"
"6" : "6"
"tzset" : "tzset"
"StreamReaderWriter" : "StreamReaderWriter"
"_is_text_encoding" : "_is_text_encoding"
"root" : "root"
"lastgroup" : "lastgroup"
"pow" : "pow"
"topdown" : "topdown"
"SUCCESS_CODES" : "SUCCESS_CODES"
"SRE_FLAG_UNICODE" : "SRE_FLAG_UNICODE"
"pop" : "pop"
"py_version_short" : "py_version_short"
"StopIteration" : "StopIteration"
"utf_32be" : "utf_32be"
"SC_UIO_MAXIOV" : "SC_UIO_MAXIOV"
"extendleft" : "extendleft"
"cancel" : "cancel"
"DIST" : "DIST"
"user_site" : "user_site"
"HAVE_BROKEN_PTHREAD_SIGMASK" : "HAVE_BROKEN_PTHREAD_SIGMASK"
"HAVE_EXPM1" : "HAVE_EXPM1"
"AT_MULTILINE" : "AT_MULTILINE"
"SIGKILL" : "SIGKILL"
"S_IWOTH" : "S_IWOTH"
"S_IWUSR" : "S_IWUSR"
"invert" : "invert"
"utf_16_le_decode" : "utf_16_le_decode"
"path_hooks" : "path_hooks"
"sre_constants" : "sre_constants"
"LOCALE" : "LOCALE"
"unicode_internal_encode" : "unicode_internal_encode"
"HAVE_GETHOSTBYNAME_R_3_ARG" : "HAVE_GETHOSTBYNAME_R_3_ARG"
"500" : "500"
"u16" : "u16"
"isstring" : "isstring"
"OPT" : "OPT"
"execvpe" : "execvpe"
"readlines" : "readlines"
"HAVE_SYS_LOADAVG_H" : "HAVE_SYS_LOADAVG_H"
"HAVE_STRFTIME" : "HAVE_STRFTIME"
"iso_ir_166" : "iso_ir_166"
"HAVE_FTRUNCATE" : "HAVE_FTRUNCATE"
"S_ISVTX" : "S_ISVTX"
"extracted_list" : "extracted_list"
"CATEGORY_LOC_WORD" : "CATEGORY_LOC_WORD"
"HAVE_CURSES_H" : "HAVE_CURSES_H"
"SC_MQ_OPEN_MAX" : "SC_MQ_OPEN_MAX"
"__eq__" : "__eq__"
"hasattr" : "hasattr"
"^" : "^"
"__mod__" : "__mod__"
"HAVE_PTHREAD_SIGMASK" : "HAVE_PTHREAD_SIGMASK"
"SRE_FLAG_MULTILINE" : "SRE_FLAG_MULTILINE"
"posix_prefix" : "posix_prefix"
"_fixup_range" : "_fixup_range"
"SHLIB_EXT" : "SHLIB_EXT"
"compile" : "compile"
"category_loc_not_word" : "category_loc_not_word"
"__rrshift__" : "__rrshift__"
"TESTOPTS" : "TESTOPTS"
"setuid" : "setuid"
"charmap" : "charmap"
"IntType" : "IntType"
"stdout" : "stdout"
"	" : "	"
"_exitfunc" : "_exitfunc"
"execsitecustomize" : "execsitecustomize"
"KeysView" : "KeysView"
"EX_OK" : "EX_OK"
"meta_path" : "meta_path"
"f_builtins" : "f_builtins"
"parse" : "parse"
"SIGCONT" : "SIGCONT"
"SyntaxWarning" : "SyntaxWarning"
"isDaemon" : "isDaemon"
"__getformat__" : "__getformat__"
"get_path_names" : "get_path_names"
"n_fields" : "n_fields"
"ascii" : "ascii"
"fdel" : "fdel"
"__init__" : "__init__"
"uhc" : "uhc"
"HAVE_DYNAMIC_LOADING" : "HAVE_DYNAMIC_LOADING"
"UF_COMPRESSED" : "UF_COMPRESSED"
"__ior__" : "__ior__"
"getdlopenflags" : "getdlopenflags"
"cp_is" : "cp_is"
"HAVE_KILLPG" : "HAVE_KILLPG"
"S_ISUID" : "S_ISUID"
"DISTFILES" : "DISTFILES"
"isnumeric" : "isnumeric"
"SC_BC_STRING_MAX" : "SC_BC_STRING_MAX"
"_Helper" : "_Helper"
"SC_ATEXIT_MAX" : "SC_ATEXIT_MAX"
"utf7" : "utf7"
"line0withend" : "line0withend"
"I" : "I"
"utf8" : "utf8"
"itemsappend" : "itemsappend"
"Modules" : "Modules"
"ABMON_10" : "ABMON_10"
"mac_cyrillic" : "mac_cyrillic"
"SC_POLL" : "SC_POLL"
"CS_XBS5_LPBIG_OFFBIG_LDFLAGS" : "CS_XBS5_LPBIG_OFFBIG_LDFLAGS"
"endpos" : "endpos"
"IN" : "IN"
"fchown" : "fchown"
"SC_NPROCESSORS_CONF" : "SC_NPROCESSORS_CONF"
"env_base" : "env_base"
"SIGRTMAX" : "SIGRTMAX"
"_property" : "_property"
"INSTALL_SHARED" : "INSTALL_SHARED"
"displayhook" : "displayhook"
"__flags__" : "__flags__"
"SIGNED_RIGHT_SHIFT_ZERO_FILLS" : "SIGNED_RIGHT_SHIFT_ZERO_FILLS"
"_Thread__exc_info" : "_Thread__exc_info"
"category_uni_word" : "category_uni_word"
"O_NDELAY" : "O_NDELAY"
"SVNVERSION" : "SVNVERSION"
"HAVE_RL_COMPLETION_APPEND_CHARACTER" : "HAVE_RL_COMPLETION_APPEND_CHARACTER"
"__int__" : "__int__"
"_Event__cond" : "_Event__cond"
"OrderedDict" : "OrderedDict"
"_BoundedSemaphore" : "_BoundedSemaphore"
"HAVE_SYS_TERMIO_H" : "HAVE_SYS_TERMIO_H"
"PC_MAX_CANON" : "PC_MAX_CANON"
"HAVE_STAT_TV_NSEC2" : "HAVE_STAT_TV_NSEC2"
"rest" : "rest"
"HAVE_SETGROUPS" : "HAVE_SETGROUPS"
"addpackage" : "addpackage"
"kill" : "kill"
"BOM" : "BOM"
"unicode" : "unicode"
"HAVE_SEM_OPEN" : "HAVE_SEM_OPEN"
"CONFIGURE_CPPFLAGS" : "CONFIGURE_CPPFLAGS"
"<module>" : "<module>"
"euc_jisx0213" : "euc_jisx0213"
"SC_USHRT_MAX" : "SC_USHRT_MAX"
"default_int_handler" : "default_int_handler"
"TCLTK_INCLUDES" : "TCLTK_INCLUDES"
"setBEGINLIBPATH" : "setBEGINLIBPATH"
"SIGURG" : "SIGURG"
"BOM64_BE" : "BOM64_BE"
"strcoll" : "strcoll"
"locked_lock" : "locked_lock"
"except" : "except"
"subversion" : "subversion"
"f_blocks" : "f_blocks"
"4" : "4"
"SC_PII_INTERNET_STREAM" : "SC_PII_INTERNET_STREAM"
"FLOCK_NEEDS_LIBBSD" : "FLOCK_NEEDS_LIBBSD"
"SIZEOF_FLOAT" : "SIZEOF_FLOAT"
"SC_EXPR_NEST_MAX" : "SC_EXPR_NEST_MAX"
"SIG_IGN" : "SIG_IGN"
"real" : "real"
"strxfrm" : "strxfrm"
"_itemgetter" : "_itemgetter"
"SC_2_SW_DEV" : "SC_2_SW_DEV"
"SC_SSIZE_MAX" : "SC_SSIZE_MAX"
"PYTHONPATH" : "PYTHONPATH"
"print_file_and_line" : "print_file_and_line"
"modname" : "modname"
"pos" : "pos"
"BOM_UTF32" : "BOM_UTF32"
"mon" : "mon"
"ListType" : "ListType"
"tis620" : "tis620"
"OTHER_LIBTOOL_OPT" : "OTHER_LIBTOOL_OPT"
"CS_XBS5_ILP32_OFF32_LDFLAGS" : "CS_XBS5_ILP32_OFF32_LDFLAGS"
"mod" : "mod"
"HAVE_ALLOCA_H" : "HAVE_ALLOCA_H"
"Producer" : "Producer"
"default_factory" : "default_factory"
"HAVE_TMPFILE" : "HAVE_TMPFILE"
"t" : "t"
"_RLock__count" : "_RLock__count"
"output" : "output"
"HAVE_CHFLAGS" : "HAVE_CHFLAGS"
"_VERBOSE" : "_VERBOSE"
"function" : "function"
"cp437" : "cp437"
"lshift" : "lshift"
"PC_SOCK_MAXBUF" : "PC_SOCK_MAXBUF"
"HAVE_BLUETOOTH_BLUETOOTH_H" : "HAVE_BLUETOOTH_BLUETOOTH_H"
"cp1250" : "cp1250"
"ebcdic_cp_us" : "ebcdic_cp_us"
"getresuid" : "getresuid"
"SC_SCHAR_MAX" : "SC_SCHAR_MAX"
"funcobj" : "funcobj"
"table" : "table"
"notify_all" : "notify_all"
"tm_sec" : "tm_sec"
"HAVE_ASM_TYPES_H" : "HAVE_ASM_TYPES_H"
"DESTDIRS" : "DESTDIRS"
"POSIX_SEMAPHORES_NOT_ENABLED" : "POSIX_SEMAPHORES_NOT_ENABLED"
"slice" : "slice"
"SC_TZNAME_MAX" : "SC_TZNAME_MAX"
"CS_XBS5_ILP32_OFF32_CFLAGS" : "CS_XBS5_ILP32_OFF32_CFLAGS"
"_repeat" : "_repeat"
"SC_LOGIN_NAME_MAX" : "SC_LOGIN_NAME_MAX"
"iso_8859_6_1987" : "iso_8859_6_1987"
"charbuffer" : "charbuffer"
"exit" : "exit"
"sitedir" : "sitedir"
"HAVE_TIMEGM" : "HAVE_TIMEGM"
"GeneratorType" : "GeneratorType"
"islink" : "islink"
"ibm852" : "ibm852"
"LIBOBJDIR" : "LIBOBJDIR"
"iso2022_jp" : "iso2022_jp"
"getitimer" : "getitimer"
"quit" : "quit"
"symmetric_difference_update" : "symmetric_difference_update"
"__reduce__" : "__reduce__"
"inspect" : "inspect"
"SC_PAGE_SIZE" : "SC_PAGE_SIZE"
"SC_ULONG_MAX" : "SC_ULONG_MAX"
"badline" : "badline"
"HAVE_POLL_H" : "HAVE_POLL_H"
"__name__" : "__name__"
"throw" : "throw"
"_" : "_"
"EncodedFile" : "EncodedFile"
"_counter" : "_counter"
"ok" : "ok"
"APPDATA" : "APPDATA"
"__setslice__" : "__setslice__"
"ms936" : "ms936"
"HAVE_RL_COMPLETION_MATCHES" : "HAVE_RL_COMPLETION_MATCHES"
"format_list" : "format_list"
"whence" : "whence"
"COVERAGE_INFO" : "COVERAGE_INFO"
"srw" : "srw"
"release_lock" : "release_lock"
"co_stacksize" : "co_stacksize"
"SC_THREAD_STACK_MIN" : "SC_THREAD_STACK_MIN"
"utf16" : "utf16"
"os" : "os"
"or" : "or"
"op" : "op"
"us_ascii" : "us_ascii"
"HAVE_SETGID" : "HAVE_SETGID"
"setlocale" : "setlocale"
"SC_NL_TEXTMAX" : "SC_NL_TEXTMAX"
"
" : "
"
"O_LARGEFILE" : "O_LARGEFILE"
"ENABLE_USER_SITE" : "ENABLE_USER_SITE"
"strip" : "strip"
"NEGATE" : "NEGATE"
"_cache" : "_cache"
"mark" : "mark"
"__debug__" : "__debug__"
"is_integer" : "is_integer"
"loc" : "loc"
"AT_END_STRING" : "AT_END_STRING"
"log" : "log"
"putenv" : "putenv"
"find_module" : "find_module"
"fdopen" : "fdopen"
"_pickle_statvfs_result" : "_pickle_statvfs_result"
"utf_32_le_decode" : "utf_32_le_decode"
"hex" : "hex"
"<uninitialized file>" : "<uninitialized file>"
"max_until" : "max_until"
"decode" : "decode"
"start" : "start"
"irshift" : "irshift"
"rmdir" : "rmdir"
"NP" : "NP"
"abs__file__" : "abs__file__"
"_get_default_scheme" : "_get_default_scheme"
"_active_limbo_lock" : "_active_limbo_lock"
"lambda" : "lambda"
"_RLock__owner" : "_RLock__owner"
"_InstanceType" : "_InstanceType"
"__invert__" : "__invert__"
"J" : "J"
"_count" : "_count"
"X_OK" : "X_OK"
"cycle" : "cycle"
"Error" : "Error"
"with" : "with"
"," : ","
"__get__" : "__get__"
"1026" : "1026"
"PSRCS" : "PSRCS"
"default" : "default"
"windows_1250" : "windows_1250"
"SIGPWR" : "SIGPWR"
"HAVE_LCHMOD" : "HAVE_LCHMOD"
"__le__" : "__le__"
"windows_1252" : "windows_1252"
"isNumberType" : "isNumberType"
"UNIVERSALSDK" : "UNIVERSALSDK"
"windows_1253" : "windows_1253"
"936" : "936"
"nlargest" : "nlargest"
"ifloordiv" : "ifloordiv"
"SIGHUP" : "SIGHUP"
"Paths" : "Paths"
"cp819" : "cp819"
"scanner" : "scanner"
"inc_dir" : "inc_dir"
"onerror" : "onerror"
"modules" : "modules"
"SC_TTY_NAME_MAX" : "SC_TTY_NAME_MAX"
"at_beginning_string" : "at_beginning_string"
"BufferedIncrementalEncoder" : "BufferedIncrementalEncoder"
"activeCount" : "activeCount"
"as" : "as"
"at" : "at"
"file" : "file"
"av" : "av"
"_Thread__delete" : "_Thread__delete"
"print_list" : "print_list"
"HAVE_DIRENT_H" : "HAVE_DIRENT_H"
"getaliases" : "getaliases"
"HAVE_STAT_TV_NSEC" : "HAVE_STAT_TV_NSEC"
"iso_ir_138" : "iso_ir_138"
"HAVE_PATHCONF" : "HAVE_PATHCONF"
"takewhile" : "takewhile"
"check_enableusersite" : "check_enableusersite"
"get_data" : "get_data"
"execfile" : "execfile"
"gettext" : "gettext"
"_code" : "_code"
"_abcoll" : "_abcoll"
"5" : "5"
"utf-8" : "utf-8"
"_Printer__dirs" : "_Printer__dirs"
"iso2022_kr" : "iso2022_kr"
"commonprefix" : "commonprefix"
"_allocate_lock" : "_allocate_lock"
"HAVE_MAKEDEV" : "HAVE_MAKEDEV"
"usercustomize" : "usercustomize"
"swapcase" : "swapcase"
"latin_1" : "latin_1"
"_uvarprog" : "_uvarprog"
"QUICKTESTOPTS" : "QUICKTESTOPTS"
"HAVE_FSEEK64" : "HAVE_FSEEK64"
"_after_fork" : "_after_fork"
"CS_LFS_CFLAGS" : "CS_LFS_CFLAGS"
"HAVE_SYS_TIMES_H" : "HAVE_SYS_TIMES_H"
"BOM_UTF8" : "BOM_UTF8"
"assert" : "assert"
"getuid" : "getuid"
"S_IFBLK" : "S_IFBLK"
"mask" : "mask"
"intersection_update" : "intersection_update"
"SC_MEMLOCK_RANGE" : "SC_MEMLOCK_RANGE"
"chown" : "chown"
"u" : "u"
"unicodebigunmarked" : "unicodebigunmarked"
"iso_8859_1_1987" : "iso_8859_1_1987"
"bytearray" : "bytearray"
"all" : "all"
"SC_REALTIME_SIGNALS" : "SC_REALTIME_SIGNALS"
"maccyrillic" : "maccyrillic"
"HAVE_GETPEERNAME" : "HAVE_GETPEERNAME"
"pth" : "pth"
"HAVE_GETC_UNLOCKED" : "HAVE_GETC_UNLOCKED"
"HAVE_BROKEN_POSIX_SEMAPHORES" : "HAVE_BROKEN_POSIX_SEMAPHORES"
"_Verbose__verbose" : "_Verbose__verbose"
"SC_THREADS" : "SC_THREADS"
"gt" : "gt"
"deadline" : "deadline"
"iso_ir_110" : "iso_ir_110"
"prefixappend" : "prefixappend"
"ItimerError" : "ItimerError"
"__rmod__" : "__rmod__"
" " : " "
"HAVE_LIBIEEE" : "HAVE_LIBIEEE"
"HAVE_ACOSH" : "HAVE_ACOSH"
"iterator" : "iterator"
"getresgid" : "getresgid"
"current_thread" : "current_thread"
"pwent" : "pwent"
"strptime" : "strptime"
"linesep" : "linesep"
"rcls" : "rcls"
"__cmp__" : "__cmp__"
"DEBUG_EXT" : "DEBUG_EXT"
"getsignal" : "getsignal"
"tail" : "tail"
"_heapreplace" : "_heapreplace"
"DictProxyType" : "DictProxyType"
"rstrip" : "rstrip"
"skip" : "skip"
"ibm1026" : "ibm1026"
"tb" : "tb"
"MIN_UNTIL" : "MIN_UNTIL"
"os2_home" : "os2_home"
"GRAMMAR_H" : "GRAMMAR_H"
"O_CREAT" : "O_CREAT"
"GRAMMAR_C" : "GRAMMAR_C"
"HAVE_ATTRIBUTE_FORMAT_PARSETUPLE" : "HAVE_ATTRIBUTE_FORMAT_PARSETUPLE"
"HAVE_LIBRESOLV" : "HAVE_LIBRESOLV"
"mbcs" : "mbcs"
"iconcat" : "iconcat"
"CS_LFS64_LDFLAGS" : "CS_LFS64_LDFLAGS"
"difference" : "difference"
"utime" : "utime"
"newpath" : "newpath"
"min_repeat" : "min_repeat"
"tcsetpgrp" : "tcsetpgrp"
"list" : "list"
"isabs" : "isabs"
"P_NOWAITO" : "P_NOWAITO"
"euckr" : "euckr"
"_abc_negative_cache_version" : "_abc_negative_cache_version"
"stderr" : "stderr"
"SC_SYNCHRONIZED_IO" : "SC_SYNCHRONIZED_IO"
"__missing__" : "__missing__"
"dummy_threading" : "dummy_threading"
"min_until" : "min_until"
"HAVE_UTIL_H" : "HAVE_UTIL_H"
"getprofile" : "getprofile"
"\x0b" : "\x0b"
"print_exception" : "print_exception"
"OPCODES" : "OPCODES"
"EX_CANTCREAT" : "EX_CANTCREAT"
"__truediv__" : "__truediv__"
"__iadd__" : "__iadd__"
"__weakrefoffset__" : "__weakrefoffset__"
"groupindex" : "groupindex"
"ksx1001" : "ksx1001"
"dispatch_table" : "dispatch_table"
"LIBOBJS" : "LIBOBJS"
"xor" : "xor"
"sub" : "sub"
"clock" : "clock"
"sum" : "sum"
"assert_not" : "assert_not"
"LIBDEST" : "LIBDEST"
"MAXLINES" : "MAXLINES"
"abs" : "abs"
"HAVE_SETUID" : "HAVE_SETUID"
"suboffsets" : "suboffsets"
"HAVE_GETADDRINFO" : "HAVE_GETADDRINFO"
"s_jis" : "s_jis"
"SIZEOF_FPOS_T" : "SIZEOF_FPOS_T"
"hash" : "hash"
"utf8_ucs2" : "utf8_ucs2"
"setpgid" : "setpgid"
"_Condition" : "_Condition"
"TKPATH" : "TKPATH"
"K" : "K"
"l1" : "l1"
"removeduppaths" : "removeduppaths"
"ranges" : "ranges"
"fchdir" : "fchdir"
"iso8859_4" : "iso8859_4"
"vals" : "vals"
"SC_XOPEN_XPG2" : "SC_XOPEN_XPG2"
"ebcdic_cp_ca" : "ebcdic_cp_ca"
"PGO_PROF_USE_FLAG" : "PGO_PROF_USE_FLAG"
"not_literal_ignore" : "not_literal_ignore"
"sepIndex" : "sepIndex"
"search" : "search"
"iso8859_6" : "iso8859_6"
"getincrementalencoder" : "getincrementalencoder"
"CS_XBS5_LP64_OFF64_LIBS" : "CS_XBS5_LP64_OFF64_LIBS"
"popen" : "popen"
"HAVE_GETPAGESIZE" : "HAVE_GETPAGESIZE"
"__xor__" : "__xor__"
"elot_928" : "elot_928"
"SC_CHAR_MAX" : "SC_CHAR_MAX"
"f_back" : "f_back"
"category_loc_word" : "category_loc_word"
"action" : "action"
"PC_PATH_MAX" : "PC_PATH_MAX"
"exc_tb" : "exc_tb"
"verbose" : "verbose"
"HAVE_GETWD" : "HAVE_GETWD"
"appendleft" : "appendleft"
"releaselevel" : "releaselevel"
"shiftjis" : "shiftjis"
"SC_STREAM_MAX" : "SC_STREAM_MAX"
"__setformat__" : "__setformat__"
"getmtime" : "getmtime"
"Reader" : "Reader"
"SF_ARCHIVED" : "SF_ARCHIVED"
"GLHACK" : "GLHACK"
"files" : "files"
"855" : "855"
"executable" : "executable"
"_Printer__linecnt" : "_Printer__linecnt"
"850" : "850"
"852" : "852"
"LC_MONETARY" : "LC_MONETARY"
"_nsmallest" : "_nsmallest"
"ThreadError" : "ThreadError"
"858" : "858"
"charmap_encode" : "charmap_encode"
"CATEGORY_UNI_NOT_SPACE" : "CATEGORY_UNI_NOT_SPACE"
"__import__" : "__import__"
"HAVE_SYS_SOCKET_H" : "HAVE_SYS_SOCKET_H"
"fdatasync" : "fdatasync"
"DLINCLDIR" : "DLINCLDIR"
"StreamReader" : "StreamReader"
"minor" : "minor"
"FAILURE" : "FAILURE"
"deque" : "deque"
"clearcache" : "clearcache"
"setName" : "setName"
"WINDOW_HAS_FLAGS" : "WINDOW_HAS_FLAGS"
"__coerce__" : "__coerce__"
"abspath" : "abspath"
"__isabstractmethod__" : "__isabstractmethod__"
"HAVE_UTIMES" : "HAVE_UTIMES"
"UNICODE_OBJS" : "UNICODE_OBJS"
"bits_per_digit" : "bits_per_digit"
"sourcematch" : "sourcematch"
"_format_final_exc_line" : "_format_final_exc_line"
"RANLIB" : "RANLIB"
"HAVE_REALPATH" : "HAVE_REALPATH"
"S_ISCHR" : "S_ISCHR"
"O_SYNC" : "O_SYNC"
"zlib_codec" : "zlib_codec"
"thread" : "thread"
"ESCAPES" : "ESCAPES"
"AT_LOC_NON_BOUNDARY" : "AT_LOC_NON_BOUNDARY"
"tb_next" : "tb_next"
"MAX_UNTIL" : "MAX_UNTIL"
"SIGXFSZ" : "SIGXFSZ"
"u_jis" : "u_jis"
"SO" : "SO"
"v" : "v"
"ftruncate" : "ftruncate"
"ilshift" : "ilshift"
"def" : "def"
"statvfs_result" : "statvfs_result"
"csisolatinhebrew" : "csisolatinhebrew"
"f1" : "f1"
"f2" : "f2"
"staticmethod" : "staticmethod"
"prompt" : "prompt"
"num_fields" : "num_fields"
"scan" : "scan"
"CATEGORY_NOT_DIGIT" : "CATEGORY_NOT_DIGIT"
"lastindex" : "lastindex"
"HAVE_RL_COMPLETION_SUPPRESS_APPEND" : "HAVE_RL_COMPLETION_SUPPRESS_APPEND"
"coerce" : "coerce"
"Codec" : "Codec"
"strprog" : "strprog"
"MutableSet" : "MutableSet"
"_compile_repl" : "_compile_repl"
"_subx" : "_subx"
"filter" : "filter"
"tis_620" : "tis_620"
"category_uni_space" : "category_uni_space"
"CHAR_MAX" : "CHAR_MAX"
"CATEGORY_SPACE" : "CATEGORY_SPACE"
"solaris" : "solaris"
"saved_state" : "saved_state"
"LDFLAGS" : "LDFLAGS"
"PYTHON_HEADERS" : "PYTHON_HEADERS"
"ValueError" : "ValueError"
"csibm037" : "csibm037"
"SliceType" : "SliceType"
"fp" : "fp"
"MON_3" : "MON_3"
"MON_1" : "MON_1"
"MON_6" : "MON_6"
"_hash" : "_hash"
"MON_4" : "MON_4"
"MON_5" : "MON_5"
"MON_8" : "MON_8"
"MON_9" : "MON_9"
"mapping" : "mapping"
"backslashreplace_errors" : "backslashreplace_errors"
"HGBRANCH" : "HGBRANCH"
"unlink" : "unlink"
"capitalize" : "capitalize"
"tcgetpgrp" : "tcgetpgrp"
"fn" : "fn"
"a" : "a"
"_REPEATCODES" : "_REPEATCODES"
"utf_32_le_encode" : "utf_32_le_encode"
"_findvar1_rx" : "_findvar1_rx"
"spawnlpe" : "spawnlpe"
"ascii_encode" : "ascii_encode"
"Variables" : "Variables"
"register" : "register"
"co_filename" : "co_filename"
"cspc8codepage437" : "cspc8codepage437"
"checkgroup" : "checkgroup"
"utf_16_be" : "utf_16_be"
"HAVE_PUTENV" : "HAVE_PUTENV"
"_OrderedDict__update" : "_OrderedDict__update"
"path_list" : "path_list"
"HAVE_SETSID" : "HAVE_SETSID"
"HAVE_LIBUTIL_H" : "HAVE_LIBUTIL_H"
"help" : "help"
"co_freevars" : "co_freevars"
"SC_PII_OSI_COTS" : "SC_PII_OSI_COTS"
"basename" : "basename"
"LC_CTYPE" : "LC_CTYPE"
"uname" : "uname"
"filters" : "filters"
"_clear_type_cache" : "_clear_type_cache"
"cp932" : "cp932"
"SIGPROF" : "SIGPROF"
"__weakref__" : "__weakref__"
"hebrew" : "hebrew"
"csibm857" : "csibm857"
"streamwriter" : "streamwriter"
"csibm855" : "csibm855"
"_set_daemon" : "_set_daemon"
"PY_FORMAT_LONG_LONG" : "PY_FORMAT_LONG_LONG"
"csibm858" : "csibm858"
"getpid" : "getpid"
"F_OK" : "F_OK"
"SC_PAGESIZE" : "SC_PAGESIZE"
"devnull" : "devnull"
"f_namemax" : "f_namemax"
"rwa" : "rwa"
"return" : "return"
"strict_errors" : "strict_errors"
"StandardError" : "StandardError"
"__deepcopy__" : "__deepcopy__"
"PACKAGE_VERSION" : "PACKAGE_VERSION"
"L" : "L"
"print_tb" : "print_tb"
"framework" : "framework"
"PC_FILESIZEBITS" : "PC_FILESIZEBITS"
"False" : "False"
"buffering" : "buffering"
"rsplit" : "rsplit"
"latin10" : "latin10"
"func_globals" : "func_globals"
"execl" : "execl"
"gi_running" : "gi_running"
"HAVE_PROTOTYPES" : "HAVE_PROTOTYPES"
"PY_" : "PY_"
"always" : "always"
"_findvar2_rx" : "_findvar2_rx"
"HAVE_TGAMMA" : "HAVE_TGAMMA"
"ibm857" : "ibm857"
"micro" : "micro"
"ibm855" : "ibm855"
"stopped" : "stopped"
"SC_XOPEN_ENH_I18N" : "SC_XOPEN_ENH_I18N"
"ibm850" : "ibm850"
"found" : "found"
"execv" : "execv"
"dgettext" : "dgettext"
"HAVE_MKNOD" : "HAVE_MKNOD"
"ibm858" : "ibm858"
"status" : "status"
"stdlib" : "stdlib"
"p" : "p"
"gb18030_2000" : "gb18030_2000"
"THOUSEP" : "THOUSEP"
"reduce" : "reduce"
"O_APPEND" : "O_APPEND"
"utf_32le" : "utf_32le"
"namedtuple" : "namedtuple"
"_Thread__exc_clear" : "_Thread__exc_clear"
"SRE_FLAG_TEMPLATE" : "SRE_FLAG_TEMPLATE"
"isfile" : "isfile"
"HAVE_RL_RESIZE_TERMINAL" : "HAVE_RL_RESIZE_TERMINAL"
"try" : "try"
"projectbase" : "projectbase"
"BEGINLIBPATH" : "BEGINLIBPATH"
"BOM64_LE" : "BOM64_LE"
"csisolatinarabic" : "csisolatinarabic"
"euc_cn" : "euc_cn"
"__abstractmethods__" : "__abstractmethods__"
"unknown" : "unknown"
"ebcdic_cp_wt" : "ebcdic_cp_wt"
"setsid" : "setsid"
"lineno" : "lineno"
"7" : "7"
"at_boundary" : "at_boundary"
"print" : "print"
"SRE_FLAG_DOTALL" : "SRE_FLAG_DOTALL"
"dirs" : "dirs"
"None" : "None"
"LIBM" : "LIBM"
"category_linebreak" : "category_linebreak"
"dict_delitem" : "dict_delitem"
"co_flags" : "co_flags"
"base" : "base"
"proxy" : "proxy"
"HAVE_SYS_MODEM_H" : "HAVE_SYS_MODEM_H"
"put" : "put"
"clear_extension_cache" : "clear_extension_cache"
"div" : "div"
"HAVE_DECL_ISFINITE" : "HAVE_DECL_ISFINITE"
"ibm039" : "ibm039"
"MON_10" : "MON_10"
"MON_11" : "MON_11"
"MON_12" : "MON_12"
"set_wakeup_fd" : "set_wakeup_fd"
"getincrementaldecoder" : "getincrementaldecoder"
"HAVE_DIRECT_H" : "HAVE_DIRECT_H"
"CS_LFS64_CFLAGS" : "CS_LFS64_CFLAGS"
"success" : "success"
"ibm037" : "ibm037"
"EX_OSERR" : "EX_OSERR"
"iso_2022_jp_1" : "iso_2022_jp_1"
"w" : "w"
"getwidth" : "getwidth"
"_class_escape" : "_class_escape"
"HAVE_IO_H" : "HAVE_IO_H"
"major" : "major"
"utf_8_decode" : "utf_8_decode"
"_collections" : "_collections"
"encoding" : "encoding"
"cp1026" : "cp1026"
"spawnve" : "spawnve"
"done" : "done"
"ujis" : "ujis"
"path_importer_cache" : "path_importer_cache"
"ljust" : "ljust"
"spawnvp" : "spawnvp"
"__alloc__" : "__alloc__"
"__float__" : "__float__"
"ABCMeta" : "ABCMeta"
"IncrementalEncoder" : "IncrementalEncoder"
"iso_8859_8" : "iso_8859_8"
"SRE_FLAG_IGNORECASE" : "SRE_FLAG_IGNORECASE"
"builtin_module_names" : "builtin_module_names"
"skipno" : "skipno"
"bitness" : "bitness"
"expand" : "expand"
"EXEMODE" : "EXEMODE"
"SC_THREAD_ATTR_STACKSIZE" : "SC_THREAD_ATTR_STACKSIZE"
"__ixor__" : "__ixor__"
"InstanceType" : "InstanceType"
"category_uni_not_digit" : "category_uni_not_digit"
"__rdivmod__" : "__rdivmod__"
"SC_CHARCLASS_NAME_MAX" : "SC_CHARCLASS_NAME_MAX"
"SUCCESS" : "SUCCESS"
"__thisclass__" : "__thisclass__"
"EX_NOPERM" : "EX_NOPERM"
"SC_BC_DIM_MAX" : "SC_BC_DIM_MAX"
"settrace" : "settrace"
"_get_ident" : "_get_ident"
"setprofile" : "setprofile"
"st_gid" : "st_gid"
"mac_turkish" : "mac_turkish"
"getter" : "getter"
"start_new_thread" : "start_new_thread"
"MAX_REPEAT" : "MAX_REPEAT"
"_Semaphore" : "_Semaphore"
"iso8859_2" : "iso8859_2"
"869" : "869"
"_LOOKBEHINDASSERTCHARS" : "_LOOKBEHINDASSERTCHARS"
"b" : "b"
"861" : "861"
"860" : "860"
"863" : "863"
"862" : "862"
"865" : "865"
"SC_UCHAR_MAX" : "SC_UCHAR_MAX"
"866" : "866"
"cappend" : "cappend"
"str" : "str"
"sts" : "sts"
"exit_thread" : "exit_thread"
"UF_APPEND" : "UF_APPEND"
"interactive" : "interactive"
"st_ctime" : "st_ctime"
"WANT_SIGFPE_HANDLER" : "WANT_SIGFPE_HANDLER"
"HAVE_LIBDL" : "HAVE_LIBDL"
"sre_compile" : "sre_compile"
"AST_H_DIR" : "AST_H_DIR"
"SIGFPE" : "SIGFPE"
"" : ""
"HAVE_LINUX_NETLINK_H" : "HAVE_LINUX_NETLINK_H"
"MAJOR_IN_SYSMACROS" : "MAJOR_IN_SYSMACROS"
"conjugate" : "conjugate"
"O_NONBLOCK" : "O_NONBLOCK"
"EX_UNAVAILABLE" : "EX_UNAVAILABLE"
"paths" : "paths"
"HAVE_SYS_STATVFS_H" : "HAVE_SYS_STATVFS_H"
"DeprecationWarning" : "DeprecationWarning"
"bz2" : "bz2"
"lib" : "lib"
"utf_16" : "utf_16"
"argrest" : "argrest"
"geteuid" : "geteuid"
"_entered" : "_entered"
"__div__" : "__div__"
"HAVE_SETPGID" : "HAVE_SETPGID"
"get_paths" : "get_paths"
"category_uni_linebreak" : "category_uni_linebreak"
"build" : "build"
"MethodType" : "MethodType"
"cp950" : "cp950"
"SC_THREAD_PRIO_PROTECT" : "SC_THREAD_PRIO_PROTECT"
"iso_8859_7" : "iso_8859_7"
"HAVE_WORKING_TZSET" : "HAVE_WORKING_TZSET"
"775" : "775"
"shift_jisx0213" : "shift_jisx0213"
"warnings" : "warnings"
"csisolatingreek" : "csisolatingreek"
"chars" : "chars"
"literal" : "literal"
"M" : "M"
"quota" : "quota"
"popleft" : "popleft"
"comps" : "comps"
"ZeroDivisionError" : "ZeroDivisionError"
"cp936" : "cp936"
"pathconf_names" : "pathconf_names"
"cygwin" : "cygwin"
"IterableUserDict" : "IterableUserDict"
"groupref_exists" : "groupref_exists"
"exc" : "exc"
"clear" : "clear"
"self_get" : "self_get"
"_parse_sub_cond" : "_parse_sub_cond"
"THREADOBJ" : "THREADOBJ"
"HAVE_CURSES_IS_TERM_RESIZED" : "HAVE_CURSES_IS_TERM_RESIZED"
"DOUBLE_IS_LITTLE_ENDIAN_IEEE754" : "DOUBLE_IS_LITTLE_ENDIAN_IEEE754"
"SC_CLK_TCK" : "SC_CLK_TCK"
"iso_ir_6" : "iso_ir_6"
"HAVE_SYS_LOCK_H" : "HAVE_SYS_LOCK_H"
"SyntaxError" : "SyntaxError"
"_nlargest" : "_nlargest"
"_siftup" : "_siftup"
"fstatvfs" : "fstatvfs"
"cp154" : "cp154"
"encodings.encodings" : "encodings.encodings"
"ST_RELATIME" : "ST_RELATIME"
"T_FMT" : "T_FMT"
"find" : "find"
"bz2_codec" : "bz2_codec"
"S_ISFIFO" : "S_ISFIFO"
"SIZEOF_UINTPTR_T" : "SIZEOF_UINTPTR_T"
"copyright" : "copyright"
"writer" : "writer"
"SC_SEM_NSEMS_MAX" : "SC_SEM_NSEMS_MAX"
"tis_620_2529_1" : "tis_620_2529_1"
"kwlist" : "kwlist"
"fchmod" : "fchmod"
"8" : "8"
"darwin" : "darwin"
"UNICODE" : "UNICODE"
"HAVE_FDATASYNC" : "HAVE_FDATASYNC"
"target_dict" : "target_dict"
"__file__" : "__file__"
"iso_8859_11_2001" : "iso_8859_11_2001"
"_Semaphore__value" : "_Semaphore__value"
"_variable_rx" : "_variable_rx"
"csibm869" : "csibm869"
"st_ino" : "st_ino"
"joinuser" : "joinuser"
"combinations" : "combinations"
"csibm863" : "csibm863"
"csibm860" : "csibm860"
"csibm861" : "csibm861"
"csibm866" : "csibm866"
"csibm864" : "csibm864"
"csibm865" : "csibm865"
"division_warning" : "division_warning"
"ST_SYNCHRONOUS" : "ST_SYNCHRONOUS"
"ms950" : "ms950"
"cskoi8r" : "cskoi8r"
"CATEGORY_UNI_DIGIT" : "CATEGORY_UNI_DIGIT"
"bytes" : "bytes"
"remove" : "remove"
"pappend" : "pappend"
"x" : "x"
"HAVE_GETHOSTBYNAME_R" : "HAVE_GETHOSTBYNAME_R"
"execlpe" : "execlpe"
"AT_END_LINE" : "AT_END_LINE"
"set" : "set"
"CODESET" : "CODESET"
"dump" : "dump"
"sep" : "sep"
"locale" : "locale"
"print_stack" : "print_stack"
"add_extension" : "add_extension"
"864" : "864"
"_PY_VERSION" : "_PY_VERSION"
"csbig5" : "csbig5"
"interrupt_main" : "interrupt_main"
"arg" : "arg"
"SC_2_VERSION" : "SC_2_VERSION"
"__imod__" : "__imod__"
"isdecimal" : "isdecimal"
"accept2dyear" : "accept2dyear"
"locals" : "locals"
"viewitems" : "viewitems"
"#" : "#"
"SC_BC_SCALE_MAX" : "SC_BC_SCALE_MAX"
"FloatingPointError" : "FloatingPointError"
"utf_16_decode" : "utf_16_decode"
"getName" : "getName"
"co_name" : "co_name"
"LIBDIR" : "LIBDIR"
"user_base" : "user_base"
"as_integer_ratio" : "as_integer_ratio"
"__inv__" : "__inv__"
"WIFCONTINUED" : "WIFCONTINUED"
"FutureWarning" : "FutureWarning"
"latin" : "latin"
"lstat" : "lstat"
"mac_iceland" : "mac_iceland"
"setresgid" : "setresgid"
"SIZEOF_LONG_DOUBLE" : "SIZEOF_LONG_DOUBLE"
"SC_ASYNCHRONOUS_IO" : "SC_ASYNCHRONOUS_IO"
"category_not_word" : "category_not_word"
"SF_IMMUTABLE" : "SF_IMMUTABLE"
"hp_roman8" : "hp_roman8"
"__divmod__" : "__divmod__"
"frozenset" : "frozenset"
"cross_compiling" : "cross_compiling"
"remaining" : "remaining"
"c" : "c"
"TypeError" : "TypeError"
"SC_XOPEN_REALTIME" : "SC_XOPEN_REALTIME"
"reverse" : "reverse"
"license" : "license"
"__trunc__" : "__trunc__"
"utf_32_be" : "utf_32_be"
"setdlopenflags" : "setdlopenflags"
"initgroups" : "initgroups"
"iso_ir_100" : "iso_ir_100"
"eucgb2312_cn" : "eucgb2312_cn"
"HAVE_NDIR_H" : "HAVE_NDIR_H"
"scls" : "scls"
"iso2022jp_ext" : "iso2022jp_ext"
"_getaction" : "_getaction"
"setencoding" : "setencoding"
"HAVE_GETCWD" : "HAVE_GETCWD"
"CONFINCLUDEPY" : "CONFINCLUDEPY"
"EX_TEMPFAIL" : "EX_TEMPFAIL"
"_USER_BASE" : "_USER_BASE"
"WCOREDUMP" : "WCOREDUMP"
"rpartition" : "rpartition"
"DEBUG" : "DEBUG"
"PC_NO_TRUNC" : "PC_NO_TRUNC"
"__rsub__" : "__rsub__"
"linux" : "linux"
"slots" : "slots"
"HAVE_FSTATVFS" : "HAVE_FSTATVFS"
"asmo_708" : "asmo_708"
"java" : "java"
"NSIG" : "NSIG"
"riscos" : "riscos"
"_reduce_ex" : "_reduce_ex"
"__abs__" : "__abs__"
"iso_2022_jp_3" : "iso_2022_jp_3"
"dup" : "dup"
"S_IROTH" : "S_IROTH"
"SC_JOB_CONTROL" : "SC_JOB_CONTROL"
"samefile" : "samefile"
"HAVE_CTERMID" : "HAVE_CTERMID"
"LDLAST" : "LDLAST"
"HAVE_GETHOSTBYNAME" : "HAVE_GETHOSTBYNAME"
"imag" : "imag"
"execvp" : "execvp"
"ST_MODE" : "ST_MODE"
"N" : "N"
"charbuffer_encode" : "charbuffer_encode"
"zfill" : "zfill"
"SC_UINT_MAX" : "SC_UINT_MAX"
"func" : "func"
"getatime" : "getatime"
"getweakrefcount" : "getweakrefcount"
"HAVE_CONIO_H" : "HAVE_CONIO_H"
"execve" : "execve"
"CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" : "CS_XBS5_LPBIG_OFFBIG_LINTFLAGS"
"look" : "look"
"maccentraleurope" : "maccentraleurope"
"_profile_hook" : "_profile_hook"
"ClassType" : "ClassType"
"sjis_2004" : "sjis_2004"
"while" : "while"
"HAVE_PTHREAD_ATFORK" : "HAVE_PTHREAD_ATFORK"
"error" : "error"
"__hash__" : "__hash__"
"struct_time" : "struct_time"
"field_defs" : "field_defs"
"Hashable" : "Hashable"
"copy_reg" : "copy_reg"
"base_64" : "base_64"
"skipyes" : "skipyes"
"ST_NOATIME" : "ST_NOATIME"
"HAVE_SIGRELSE" : "HAVE_SIGRELSE"
"gettotalrefcount" : "gettotalrefcount"
"R_OK" : "R_OK"
"terminator" : "terminator"
"_import_tail" : "_import_tail"
"xreadlines" : "xreadlines"
"rshift" : "rshift"
"mac_roman" : "mac_roman"
"ne" : "ne"
"elements" : "elements"
"SIGCHLD" : "SIGCHLD"
"_abc_cache" : "_abc_cache"
"HAVE_RL_CALLBACK" : "HAVE_RL_CALLBACK"
"HAVE_SEM_UNLINK" : "HAVE_SEM_UNLINK"
"ogid" : "ogid"
"DOUBLE_IS_BIG_ENDIAN_IEEE754" : "DOUBLE_IS_BIG_ENDIAN_IEEE754"
"SC_XBS5_ILP32_OFF32" : "SC_XBS5_ILP32_OFF32"
"read" : "read"
"SIZEOF_OFF_T" : "SIZEOF_OFF_T"
"9" : "9"
"_OrderedDict__root" : "_OrderedDict__root"
"envpath" : "envpath"
"HAVE_STRUCT_TM_TM_ZONE" : "HAVE_STRUCT_TM_TM_ZONE"
"_extend_dict" : "_extend_dict"
"SYSLIBS" : "SYSLIBS"
"keys" : "keys"
"SEEK_SET" : "SEEK_SET"
"checkcache" : "checkcache"
"ASSERTCHARS" : "ASSERTCHARS"
"sys" : "sys"
"cp1254" : "cp1254"
"cp1257" : "cp1257"
"utf_32_encode" : "utf_32_encode"
"_hasattr" : "_hasattr"
"__or__" : "__or__"
"__add__" : "__add__"
"cp1252" : "cp1252"
"SIZEOF_PID_T" : "SIZEOF_PID_T"
"cp1258" : "cp1258"
"lower" : "lower"
"S_IXGRP" : "S_IXGRP"
"setitimer" : "setitimer"
"O_EXCL" : "O_EXCL"
"cyrillic" : "cyrillic"
"elem" : "elem"
"heapreplace" : "heapreplace"
"textdomain" : "textdomain"
"flags" : "flags"
"__neg__" : "__neg__"
"johab" : "johab"
"y" : "y"
"EX_PROTOCOL" : "EX_PROTOCOL"
"self" : "self"
"WITH_NEXT_FRAMEWORK" : "WITH_NEXT_FRAMEWORK"
"ST_MTIME" : "ST_MTIME"
"utf_32_ex_decode" : "utf_32_ex_decode"
"sunos" : "sunos"
"_DATE_FMT" : "_DATE_FMT"
"mant_dig" : "mant_dig"
"izip" : "izip"
"HAVE_STRDUP" : "HAVE_STRDUP"
"__path__" : "__path__"
"shape" : "shape"
"getrefcount" : "getrefcount"
"SIGBUS" : "SIGBUS"
"CodeType" : "CodeType"
"__code__" : "__code__"
"hz_gb" : "hz_gb"
"newlines" : "newlines"
"SC_SEM_VALUE_MAX" : "SC_SEM_VALUE_MAX"
"$" : "$"
"CS_XBS5_ILP32_OFFBIG_CFLAGS" : "CS_XBS5_ILP32_OFFBIG_CFLAGS"
"maclatin2" : "maclatin2"
"HAVE_FORK" : "HAVE_FORK"
"f_files" : "f_files"
"_files" : "_files"
"source" : "source"
"lchown" : "lchown"
"HAVE_SIGNAL_H" : "HAVE_SIGNAL_H"
"shiftjis2004" : "shiftjis2004"
"input" : "input"
"__iconcat__" : "__iconcat__"
"GRAMMAR_INPUT" : "GRAMMAR_INPUT"
"csibm500" : "csibm500"
"bin" : "bin"
"HAVE_GETPGRP" : "HAVE_GETPGRP"
"zipimport" : "zipimport"
"big5hkscs" : "big5hkscs"
"format" : "format"
"weakcontainer" : "weakcontainer"
"__reversed__" : "__reversed__"
"tm_isdst" : "tm_isdst"
"_siftdown" : "_siftdown"
"O_NOATIME" : "O_NOATIME"
"__gt__" : "__gt__"
"replace_errors" : "replace_errors"
"SC_THREAD_PROCESS_SHARED" : "SC_THREAD_PROCESS_SHARED"
"rotate" : "rotate"
"__basicsize__" : "__basicsize__"
"d" : "d"
"signal" : "signal"
"and_" : "and_"
"_simple" : "_simple"
"ignore" : "ignore"
"32bit" : "32bit"
"config_h" : "config_h"
"alphanum" : "alphanum"
"addusersitepackages" : "addusersitepackages"
"quopri" : "quopri"
"spawnvpe" : "spawnvpe"
"names" : "names"
"func_dict" : "func_dict"
"tmpfile" : "tmpfile"
"Py_ENABLE_SHARED" : "Py_ENABLE_SHARED"
"tb_frame" : "tb_frame"
"CATEGORY_NOT_LINEBREAK" : "CATEGORY_NOT_LINEBREAK"
"ENSUREPIP" : "ENSUREPIP"
"Pattern" : "Pattern"
"CS_XBS5_LPBIG_OFFBIG_LIBS" : "CS_XBS5_LPBIG_OFFBIG_LIBS"
"OPCODETARGETS_H" : "OPCODETARGETS_H"
"escape_encode" : "escape_encode"
"altsep" : "altsep"
"REPEAT_CHARS" : "REPEAT_CHARS"
"_sys" : "_sys"
"HOME" : "HOME"
"SITEPATH" : "SITEPATH"
"TCLTK_LIBS" : "TCLTK_LIBS"
"cyrillic_asian" : "cyrillic_asian"
"HAVE_SOCKETPAIR" : "HAVE_SOCKETPAIR"
"TM_IN_SYS_TIME" : "TM_IN_SYS_TIME"
"ST_APPEND" : "ST_APPEND"
"HAVE_WAIT3" : "HAVE_WAIT3"
"pathsep" : "pathsep"
"SIZEOF__BOOL" : "SIZEOF__BOOL"
"1256" : "1256"
"1257" : "1257"
"1254" : "1254"
"Warning" : "Warning"
"1252" : "1252"
"1253" : "1253"
"slash" : "slash"
"PY_UNICODE_TYPE" : "PY_UNICODE_TYPE"
"__stop" : "__stop"
"newdata" : "newdata"
"P_WAIT" : "P_WAIT"
"SC_IOV_MAX" : "SC_IOV_MAX"
"object" : "object"
"run" : "run"
"UserDict" : "UserDict"
"O" : "O"
"step" : "step"
"dircase" : "dircase"
"LITERAL_IGNORE" : "LITERAL_IGNORE"
"from" : "from"
"HAVE_SYMLINK" : "HAVE_SYMLINK"
"endtime" : "endtime"
"subtract" : "subtract"
"optimize" : "optimize"
"ks_c_5601" : "ks_c_5601"
"_Thread__daemonic" : "_Thread__daemonic"
"_HEAPTYPE" : "_HEAPTYPE"
"SC_SHRT_MAX" : "SC_SHRT_MAX"
"UF_NOUNLINK" : "UF_NOUNLINK"
"st_blksize" : "st_blksize"
"dict_setitem" : "dict_setitem"
"range" : "range"
"HAVE_SYS_TIME_H" : "HAVE_SYS_TIME_H"
"MACHDEPPATH" : "MACHDEPPATH"
"exc_info" : "exc_info"
"_format_exc" : "_format_exc"
"block" : "block"
"HAVE_SYSEXITS_H" : "HAVE_SYSEXITS_H"
"_initial_value" : "_initial_value"
"min_10_exp" : "min_10_exp"
"proto" : "proto"
"makefile" : "makefile"
"iso2022jp_1" : "iso2022jp_1"
"iso2022jp_3" : "iso2022jp_3"
"SEEK_CUR" : "SEEK_CUR"
"S_IFLNK" : "S_IFLNK"
"HAVE_LCHFLAGS" : "HAVE_LCHFLAGS"
"SC_AIO_LISTIO_MAX" : "SC_AIO_LISTIO_MAX"
"__func__" : "__func__"
"PACKAGE_BUGREPORT" : "PACKAGE_BUGREPORT"
"ProxyType" : "ProxyType"
"HAVE_TMPNAM_R" : "HAVE_TMPNAM_R"
"BoundedSemaphore" : "BoundedSemaphore"
"span" : "span"
"UnicodeError" : "UnicodeError"
"co_consts" : "co_consts"
"errno" : "errno"
"DictionaryType" : "DictionaryType"
"_chain" : "_chain"
"long" : "long"
"DAY_7" : "DAY_7"
"HAVE_ROUND" : "HAVE_ROUND"
".0" : ".0"
":" : ":"
"ifilterfalse" : "ifilterfalse"
"encodings.__builtin__" : "encodings.__builtin__"
"utf_16_ex_decode" : "utf_16_ex_decode"
"mac_greek" : "mac_greek"
"AT_BOUNDARY" : "AT_BOUNDARY"
"BoundedQueue" : "BoundedQueue"
"msg" : "msg"
"pwd" : "pwd"
"link" : "link"
"line" : "line"
"iso_8859_9_1989" : "iso_8859_9_1989"
"_sysconfigdata" : "_sysconfigdata"
"_module" : "_module"
"utf" : "utf"
"entry" : "entry"
"hz_gb_2312" : "hz_gb_2312"
"uu" : "uu"
"MON_2" : "MON_2"
"float_repr_style" : "float_repr_style"
"us" : "us"
"HAVE_SIGACTION" : "HAVE_SIGACTION"
"O_NOCTTY" : "O_NOCTTY"
"dotIndex" : "dotIndex"
"z" : "z"
"consumed" : "consumed"
"stype" : "stype"
"857" : "857"
"curr" : "curr"
"f_bsize" : "f_bsize"
"csibm424" : "csibm424"
"PC_PIPE_BUF" : "PC_PIPE_BUF"
"ITIMER_REAL" : "ITIMER_REAL"
"char" : "char"
"SC_WORD_BIT" : "SC_WORD_BIT"
"HAVE_CHROOT" : "HAVE_CHROOT"
"isdigit" : "isdigit"
"HAVE_FCHMOD" : "HAVE_FCHMOD"
"_buffer_encode" : "_buffer_encode"
"MutableMapping" : "MutableMapping"
"fixup" : "fixup"
"GROUPREF_IGNORE" : "GROUPREF_IGNORE"
"_imap" : "_imap"
"950" : "950"
"__format__" : "__format__"
"_is_owned" : "_is_owned"
"__objclass__" : "__objclass__"
"SIGIO" : "SIGIO"
"target_keys" : "target_keys"
"attrgetter" : "attrgetter"
"samestat" : "samestat"
"nice" : "nice"
"SC_XBS5_ILP32_OFFBIG" : "SC_XBS5_ILP32_OFFBIG"
"HAVE_DUP2" : "HAVE_DUP2"
"_abc_invalidation_counter" : "_abc_invalidation_counter"
"escape_decode" : "escape_decode"
"_len" : "_len"
"PYTHON_OBJS" : "PYTHON_OBJS"
"S_ISREG" : "S_ISREG"
"_PROJECT_BASE" : "_PROJECT_BASE"
"getsitepackages" : "getsitepackages"
"SC_2_FORT_DEV" : "SC_2_FORT_DEV"
"AR" : "AR"
"MACHDEP_OBJS" : "MACHDEP_OBJS"
"AT" : "AT"
"eval" : "eval"
"literals" : "literals"
"CodecRegistryError" : "CodecRegistryError"
"csiso2022jp" : "csiso2022jp"
"iso2022jp" : "iso2022jp"
"code1" : "code1"
"code2" : "code2"
"sitecustomize" : "sitecustomize"
"e" : "e"
"D_T_FMT" : "D_T_FMT"
"Sequence" : "Sequence"
"format_exc" : "format_exc"
"HAVE_FLOCK" : "HAVE_FLOCK"
"sjis" : "sjis"
"iso_8859_3_1988" : "iso_8859_3_1988"
"normpath" : "normpath"
"NoneType" : "NoneType"
"multiarchsubdir" : "multiarchsubdir"
"SIGTTOU" : "SIGTTOU"
"once" : "once"
"func_closure" : "func_closure"
"CS_XBS5_LP64_OFF64_CFLAGS" : "CS_XBS5_LP64_OFF64_CFLAGS"
"code" : "code"
"SC_PII_OSI" : "SC_PII_OSI"
"ge" : "ge"
"radix" : "radix"
"notify" : "notify"
"REPEAT_ONE" : "REPEAT_ONE"
"urandom" : "urandom"
"VPATH" : "VPATH"
"func_code" : "func_code"
"DOTALL" : "DOTALL"
"LDLIBRARYDIR" : "LDLIBRARYDIR"
"addsitepackages" : "addsitepackages"
"SRC_GDB_HOOKS" : "SRC_GDB_HOOKS"
"base64" : "base64"
"_aliases" : "_aliases"
"send" : "send"
"_escape" : "_escape"
"_unknown" : "_unknown"
"ks_x_1001" : "ks_x_1001"
"include" : "include"
"HAVE_CONFSTR" : "HAVE_CONFSTR"
"getline" : "getline"
"waiters" : "waiters"
"HAVE_C99_BOOL" : "HAVE_C99_BOOL"
"PC_VDISABLE" : "PC_VDISABLE"
"maxunicode" : "maxunicode"
"asctime" : "asctime"
"IGNORECASE" : "IGNORECASE"
"P" : "P"
"PY_CORE_CFLAGS" : "PY_CORE_CFLAGS"
"merge" : "merge"
"ignore_errors" : "ignore_errors"
"csibm1026" : "csibm1026"
"getusersitepackages" : "getusersitepackages"
"getstate" : "getstate"
"f_code" : "f_code"
"CS_XBS5_LP64_OFF64_LINTFLAGS" : "CS_XBS5_LP64_OFF64_LINTFLAGS"
"SIZEOF_LONG_LONG" : "SIZEOF_LONG_LONG"
"SIGSTOP" : "SIGSTOP"
"getdefaultlocale" : "getdefaultlocale"
"build_time_vars" : "build_time_vars"
"HAVE_LONG_LONG" : "HAVE_LONG_LONG"
"AT_UNICODE" : "AT_UNICODE"
"__copy__" : "__copy__"
"SIZEOF_INT" : "SIZEOF_INT"
"_Printer__setup" : "_Printer__setup"
"ttyname" : "ttyname"
"getfilesystemencoding" : "getfilesystemencoding"
"__metaclass__" : "__metaclass__"
"_main" : "_main"
"SIGWINCH" : "SIGWINCH"
"iso_2022_jp_2" : "iso_2022_jp_2"
"jump" : "jump"
"ST_GID" : "ST_GID"
"__stdin__" : "__stdin__"
"BUILDEXE" : "BUILDEXE"
"MARK" : "MARK"
"S_ISLNK" : "S_ISLNK"
"append" : "append"
"index" : "index"
"incrementalencoder" : "incrementalencoder"
"roman8" : "roman8"
"defaultdict" : "defaultdict"
"exc_type" : "exc_type"
"access" : "access"
"SIGTRAP" : "SIGTRAP"
"subpattern" : "subpattern"
"COVERAGE_REPORT" : "COVERAGE_REPORT"
"NGROUPS_MAX" : "NGROUPS_MAX"
"callstats" : "callstats"
"O_RDWR" : "O_RDWR"
";" : ";"
"lookbehind" : "lookbehind"
"TESTPYTHONOPTS" : "TESTPYTHONOPTS"
"im_self" : "im_self"
"QL" : "QL"
"Popen" : "Popen"
"len" : "len"
"warnpy3k" : "warnpy3k"
"SRE_INFO_LITERAL" : "SRE_INFO_LITERAL"
"s_jisx0213" : "s_jisx0213"
"S_IFREG" : "S_IFREG"
"SC_GETPW_R_SIZE_MAX" : "SC_GETPW_R_SIZE_MAX"
"HAVE_WAIT4" : "HAVE_WAIT4"
"_PY_VERSION_SHORT" : "_PY_VERSION_SHORT"
"credits" : "credits"
"HAVE_UNSETENV" : "HAVE_UNSETENV"
"host" : "host"
"_some_str" : "_some_str"
"cp850" : "cp850"
"func_defaults" : "func_defaults"
"is_package" : "is_package"
"cp855" : "cp855"
"SC_XBS5_LP64_OFF64" : "SC_XBS5_LP64_OFF64"
"removedirs" : "removedirs"
"646" : "646"
"cp858" : "cp858"
"{" : "{"
"BOM_UTF32_LE" : "BOM_UTF32_LE"
"SystemError" : "SystemError"
"__base__" : "__base__"
"SIGSYS" : "SIGSYS"
"cp_gr" : "cp_gr"
"setslice" : "setslice"
"ALT_DIGITS" : "ALT_DIGITS"
"_sre" : "_sre"
"RETSIGTYPE" : "RETSIGTYPE"
"ABMON_1" : "ABMON_1"
"AST_H" : "AST_H"
"divmod" : "divmod"
"PC_LINK_MAX" : "PC_LINK_MAX"
"posix_user" : "posix_user"
"ST_UID" : "ST_UID"
"apply" : "apply"
"HAVE_EPOLL" : "HAVE_EPOLL"
"UF_IMMUTABLE" : "UF_IMMUTABLE"
"AST_C" : "AST_C"
"setquit" : "setquit"
"latin_1_encode" : "latin_1_encode"
"stream" : "stream"
"zip" : "zip"
"HAVE_WCSCOLL" : "HAVE_WCSCOLL"
"ABMON_4" : "ABMON_4"
"ST_MANDLOCK" : "ST_MANDLOCK"
"next" : "next"
"HAVE_INTTYPES_H" : "HAVE_INTTYPES_H"
"chr" : "chr"
"delslice" : "delslice"
"lexicon" : "lexicon"
"utf_16_le" : "utf_16_le"
"co_argcount" : "co_argcount"
"ABMON_9" : "ABMON_9"
"iso_8859_14" : "iso_8859_14"
"sort" : "sort"
"iso_8859_4" : "iso_8859_4"
"BLDSHARED" : "BLDSHARED"
"_safe_realpath" : "_safe_realpath"
"PROFILE_TASK" : "PROFILE_TASK"
"S_IFIFO" : "S_IFIFO"
"__stdout__" : "__stdout__"
"TESTPROG" : "TESTPROG"
"etype" : "etype"
"category_uni_not_space" : "category_uni_not_space"
"ENOENT" : "ENOENT"
"tm_yday" : "tm_yday"
"PGENOBJS" : "PGENOBJS"
"f_locals" : "f_locals"
"_Condition__waiters" : "_Condition__waiters"
"unicodelittleunmarked" : "unicodelittleunmarked"
"iso_ir_127" : "iso_ir_127"
"iso_ir_126" : "iso_ir_126"
"chdir" : "chdir"
"CS_XBS5_ILP32_OFFBIG_LDFLAGS" : "CS_XBS5_ILP32_OFFBIG_LDFLAGS"
"f" : "f"
"this" : "this"
"raw_input" : "raw_input"
"SC_NGROUPS_MAX" : "SC_NGROUPS_MAX"
"utf_16_encode" : "utf_16_encode"
"expandtabs" : "expandtabs"
"tb_lineno" : "tb_lineno"
"raw_unicode_escape_encode" : "raw_unicode_escape_encode"
"SUBPATTERN" : "SUBPATTERN"
"f_lineno" : "f_lineno"
"sre_parse" : "sre_parse"
"SC_PII_INTERNET_DGRAM" : "SC_PII_INTERNET_DGRAM"
"customize_config_vars" : "customize_config_vars"
"linux2" : "linux2"
"category_uni_not_word" : "category_uni_not_word"
"inst_dict" : "inst_dict"
"PGENSRCS" : "PGENSRCS"
"lock" : "lock"
"HAVE_ATANH" : "HAVE_ATANH"
"_IterationGuard" : "_IterationGuard"
"KeyError" : "KeyError"
"_ASSERT_CODES" : "_ASSERT_CODES"
"PendingDeprecationWarning" : "PendingDeprecationWarning"
"iso_8859_2_1987" : "iso_8859_2_1987"
"raw_unicode_escape_decode" : "raw_unicode_escape_decode"
"serial" : "serial"
"S_IXUSR" : "S_IXUSR"
"MACOSX_DEPLOYMENT_TARGET" : "MACOSX_DEPLOYMENT_TARGET"
"namespace" : "namespace"
"delay" : "delay"
"__pos__" : "__pos__"
"_pattern_type" : "_pattern_type"
"SC_2_C_BIND" : "SC_2_C_BIND"
"utf_7_decode" : "utf_7_decode"
"_getcategory" : "_getcategory"
"utf_7_encode" : "utf_7_encode"
"locked" : "locked"
"platinclude" : "platinclude"
"XMLLIBSUBDIRS" : "XMLLIBSUBDIRS"
"utf_32_be_decode" : "utf_32_be_decode"
"MutableSequence" : "MutableSequence"
"Q" : "Q"
"HAVE_TRUNCATE" : "HAVE_TRUNCATE"
"SC_INT_MAX" : "SC_INT_MAX"
"LLVM_PROF_MERGER" : "LLVM_PROF_MERGER"
"S_IEXEC" : "S_IEXEC"
"ITIMER_VIRTUAL" : "ITIMER_VIRTUAL"
"HAVE_FTELL64" : "HAVE_FTELL64"
"949" : "949"
"charmap_decode" : "charmap_decode"
"HAVE_DECL_TZNAME" : "HAVE_DECL_TZNAME"
"lines" : "lines"
"get_path" : "get_path"
"element" : "element"
"SC_NL_MSGMAX" : "SC_NL_MSGMAX"
"_OptionError" : "_OptionError"
"__subclasshook__" : "__subclasshook__"
"!" : "!"
"ComplexType" : "ComplexType"
"HAVE_SYS_POLL_H" : "HAVE_SYS_POLL_H"
"EX_USAGE" : "EX_USAGE"
"_varprog" : "_varprog"
"unicode_escape_decode" : "unicode_escape_decode"
"firstline" : "firstline"
"HAVE_GAI_STRERROR" : "HAVE_GAI_STRERROR"
"posix_home" : "posix_home"
"execle" : "execle"
"sysconfig" : "sysconfig"
"modnames" : "modnames"
"EXTRAPLATDIR" : "EXTRAPLATDIR"
"execlp" : "execlp"
"STRICT_SYSV_CURSES" : "STRICT_SYSV_CURSES"
"_multiarch" : "_multiarch"
"SIGNAL_OBJS" : "SIGNAL_OBJS"
"1" : "1"
"le" : "le"
"currentThread" : "currentThread"
"get_config_h_filename" : "get_config_h_filename"
"ln" : "ln"
"exec_prefix" : "exec_prefix"
"ansi_x3_4_1968" : "ansi_x3_4_1968"
"SC_GETGR_R_SIZE_MAX" : "SC_GETGR_R_SIZE_MAX"
"Callable" : "Callable"
"USER_BASE" : "USER_BASE"
"CS_LFS_LINTFLAGS" : "CS_LFS_LINTFLAGS"
"local_vars" : "local_vars"
"ecma_118" : "ecma_118"
"srcdir" : "srcdir"
"<" : "<"
"_Verbose" : "_Verbose"
"__getitem__" : "__getitem__"
"OP_IGNORE" : "OP_IGNORE"
"python" : "python"
"__itemsize__" : "__itemsize__"
"SC_THREAD_PRIO_INHERIT" : "SC_THREAD_PRIO_INHERIT"
"TabError" : "TabError"
"SIZEOF_LONG" : "SIZEOF_LONG"
"__pow__" : "__pow__"
"VA_LIST_IS_ARRAY" : "VA_LIST_IS_ARRAY"
"getpwnam" : "getpwnam"
"_spawnvef" : "_spawnvef"
"TMP_MAX" : "TMP_MAX"
"__rxor__" : "__rxor__"
"iterkeys" : "iterkeys"
"__delitem__" : "__delitem__"
"get_makefile_filename" : "get_makefile_filename"
"ST_WRITE" : "ST_WRITE"
"Iterator" : "Iterator"
"_PYTHON_HOST_PLATFORM" : "_PYTHON_HOST_PLATFORM"
"l6" : "l6"
"l7" : "l7"
"l4" : "l4"
"HAVE_IEEEFP_H" : "HAVE_IEEEFP_H"
"DYNLOADFILE" : "DYNLOADFILE"
"mode" : "mode"
"BINLIBDEST" : "BINLIBDEST"
"HAVE_TMPNAM" : "HAVE_TMPNAM"
"call_key" : "call_key"
"|" : "|"
"Iterable" : "Iterable"
"MAJOR_IN_MKDEV" : "MAJOR_IN_MKDEV"
"ProducerThread" : "ProducerThread"
"map" : "map"
"mkfifo" : "mkfifo"
"groupref" : "groupref"
"chunk" : "chunk"
"HAVE_SETLOCALE" : "HAVE_SETLOCALE"
"HAVE_GETHOSTBYNAME_R_6_ARG" : "HAVE_GETHOSTBYNAME_R_6_ARG"
"shift_jis_2004" : "shift_jis_2004"
"operator" : "operator"
"viewkeys" : "viewkeys"
"encodings" : "encodings"
"HAVE_COMPUTED_GOTOS" : "HAVE_COMPUTED_GOTOS"
"out" : "out"
"category" : "category"
"killpg" : "killpg"
"'" : "'"
"WITH_PYMALLOC" : "WITH_PYMALLOC"
"res" : "res"
"T_FMT_AMPM" : "T_FMT_AMPM"
"get_platform_osx" : "get_platform_osx"
"__excepthook__" : "__excepthook__"
"HAVE_FSYNC" : "HAVE_FSYNC"
"ref" : "ref"
"cwd" : "cwd"
"_script" : "_script"
"HAVE_ADDRINFO" : "HAVE_ADDRINFO"
"NI" : "NI"
"HAVE_TZNAME" : "HAVE_TZNAME"
"csiso58gb231280" : "csiso58gb231280"
"SUBDIRS" : "SUBDIRS"
"release" : "release"
"RANGE" : "RANGE"
"EllipsisType" : "EllipsisType"
"condname" : "condname"
"ipow" : "ipow"
"_slotnames" : "_slotnames"
"SC_ARG_MAX" : "SC_ARG_MAX"
"cachekey" : "cachekey"
"GROUPREF_EXISTS" : "GROUPREF_EXISTS"
"g" : "g"
"openpty" : "openpty"
"category_uni_digit" : "category_uni_digit"
"times" : "times"
"_OrderedDict__marker" : "_OrderedDict__marker"
"AT_LOC_BOUNDARY" : "AT_LOC_BOUNDARY"
"co_nlocals" : "co_nlocals"
"_record" : "_record"
"__delete__" : "__delete__"
"ndim" : "ndim"
"hkscs" : "hkscs"
"HAVE_STRING_H" : "HAVE_STRING_H"
"link_prev" : "link_prev"
"sourceget" : "sourceget"
"OBJECT_OBJS" : "OBJECT_OBJS"
"truediv" : "truediv"
"SC_MEMLOCK" : "SC_MEMLOCK"
"owner" : "owner"
"LLVM_PROF_ERR" : "LLVM_PROF_ERR"
"_int" : "_int"
"bytesdecoded" : "bytesdecoded"
"ks_c_5601_1987" : "ks_c_5601_1987"
"strict" : "strict"
"close_fds" : "close_fds"
"big5" : "big5"
"COVERAGE_REPORT_OPTIONS" : "COVERAGE_REPORT_OPTIONS"
"mkdir" : "mkdir"
"system" : "system"
"HAVE_ERFC" : "HAVE_ERFC"
"isSequenceType" : "isSequenceType"
"file_encoding" : "file_encoding"
"time" : "time"
"_RLock" : "_RLock"
"HAVE_BLUETOOTH_H" : "HAVE_BLUETOOTH_H"
"bit_length" : "bit_length"
"HAVE_SYS_BSDTTY_H" : "HAVE_SYS_BSDTTY_H"
"CFLAGSFORSHARED" : "CFLAGSFORSHARED"
"tm_min" : "tm_min"
"SF_APPEND" : "SF_APPEND"
"WITH_THREAD" : "WITH_THREAD"
"Exception" : "Exception"
"shell" : "shell"
"ZipImportError" : "ZipImportError"
"tuple" : "tuple"
"__del__" : "__del__"
"reversed" : "reversed"
"acquire" : "acquire"
"getdecoder" : "getdecoder"
"SC_MB_LEN_MAX" : "SC_MB_LEN_MAX"
"R" : "R"
"varprog" : "varprog"
"CONFIG_ARGS" : "CONFIG_ARGS"
"S_ENFMT" : "S_ENFMT"
"_mk_bitmap" : "_mk_bitmap"
"PYTHONFRAMEWORKPREFIX" : "PYTHONFRAMEWORKPREFIX"
"count_owner" : "count_owner"
"SPECIAL_CHARS" : "SPECIAL_CHARS"
"streamreader" : "streamreader"
"ArithmeticError" : "ArithmeticError"
"ibm819" : "ibm819"
"Condition" : "Condition"
"abstracts" : "abstracts"
"tm_mday" : "tm_mday"
"fromlist" : "fromlist"
"hz" : "hz"
"__rtruediv__" : "__rtruediv__"
"SC_PRIORITIZED_IO" : "SC_PRIORITIZED_IO"
"f_bavail" : "f_bavail"
"at_beginning" : "at_beginning"
"_show_warning" : "_show_warning"
"HAVE_KQUEUE" : "HAVE_KQUEUE"
"HAVE_NICE" : "HAVE_NICE"
"close" : "close"
"PATH" : "PATH"
"itemsize" : "itemsize"
"st" : "st"
"methodcaller" : "methodcaller"
"im_func" : "im_func"
"counter" : "counter"
"AT_BEGINNING" : "AT_BEGINNING"
"spawnl" : "spawnl"
"tactis" : "tactis"
"min" : "min"
"CONFIGURE_CFLAGS" : "CONFIGURE_CFLAGS"
"LLVM_PROF_FILE" : "LLVM_PROF_FILE"
"." : "."
"__dictoffset__" : "__dictoffset__"
"HAVE_FTELLO" : "HAVE_FTELLO"
"HAVE_GAMMA" : "HAVE_GAMMA"
"=" : "="
"spawnv" : "spawnv"
"cell_contents" : "cell_contents"
"abs_builddir" : "abs_builddir"
"f_flag" : "f_flag"
"_iskeyword" : "_iskeyword"
"fromhex" : "fromhex"
"__self_class__" : "__self_class__"
"HAVE_NETPACKET_PACKET_H" : "HAVE_NETPACKET_PACKET_H"
"regs" : "regs"
"callable" : "callable"
"HURD_C_THREADS" : "HURD_C_THREADS"
"lexists" : "lexists"
"U" : "U"
"ReferenceError" : "ReferenceError"
"SIGRTMIN" : "SIGRTMIN"
"latin4" : "latin4"
"latin5" : "latin5"
"HAVE_SYS_NDIR_H" : "HAVE_SYS_NDIR_H"
"latin7" : "latin7"
"latin1" : "latin1"
"latin2" : "latin2"
"viewvalues" : "viewvalues"
"Lock" : "Lock"
"latin8" : "latin8"
"EXTRAMACHDEPPATH" : "EXTRAMACHDEPPATH"
"pipe" : "pipe"
"nsmallest" : "nsmallest"
"splitdrive" : "splitdrive"
"notifyAll" : "notifyAll"
"}" : "}"
"HAVE_SELECT" : "HAVE_SELECT"
"SC_NPROCESSORS_ONLN" : "SC_NPROCESSORS_ONLN"
"getreader" : "getreader"
"__setup" : "__setup"
"is_python_build" : "is_python_build"
"text" : "text"
"readbuffer_encode" : "readbuffer_encode"
"DIRMODE" : "DIRMODE"
"elif" : "elif"
"LDSHARED" : "LDSHARED"
"__rmul__" : "__rmul__"
"utf_32_decode" : "utf_32_decode"
"INCLUDEPY" : "INCLUDEPY"
"setter" : "setter"
"DIGITS" : "DIGITS"
"pause" : "pause"
"groupsappend" : "groupsappend"
"__concat__" : "__concat__"
"dllpath" : "dllpath"
"(" : "("
"cache" : "cache"
"ibm367" : "ibm367"
"extract_tb" : "extract_tb"
"bases" : "bases"
"SC_THREAD_PRIORITY_SCHEDULING" : "SC_THREAD_PRIORITY_SCHEDULING"
"HAVE_ASINH" : "HAVE_ASINH"
"_abc_" : "_abc_"
"sjisx0213" : "sjisx0213"
"local" : "local"
"SRE_FLAG_DEBUG" : "SRE_FLAG_DEBUG"
"_Condition__lock" : "_Condition__lock"
"MAGIC" : "MAGIC"
"_splitext" : "_splitext"
"bytesencoded" : "bytesencoded"
"BOM_UTF16_BE" : "BOM_UTF16_BE"
"f_ffree" : "f_ffree"
"getpgrp" : "getpgrp"
"iteritems" : "iteritems"
"_Thread__kwargs" : "_Thread__kwargs"
"HAVE_SYS_FILE_H" : "HAVE_SYS_FILE_H"
"imap" : "imap"
"LINKCC" : "LINKCC"
"rot_13" : "rot_13"
"_make_stat_result" : "_make_stat_result"
"h" : "h"
"fixes" : "fixes"
"gbk" : "gbk"
"at_end" : "at_end"
"PREFIXES" : "PREFIXES"
"_shutdown" : "_shutdown"
"HAVE_SETVBUF" : "HAVE_SETVBUF"
"ItemsView" : "ItemsView"
"MACHDEP" : "MACHDEP"
"_parse" : "_parse"
"SC_PII_XTI" : "SC_PII_XTI"
"_abc_registry" : "_abc_registry"
"SIGTTIN" : "SIGTTIN"
"SC_MEMORY_PROTECTION" : "SC_MEMORY_PROTECTION"
"__bootstrap_inner" : "__bootstrap_inner"
"HAVE_PTY_H" : "HAVE_PTY_H"
"exists" : "exists"
"_SCHEME_KEYS" : "_SCHEME_KEYS"
"popen4" : "popen4"
"popen2" : "popen2"
"popen3" : "popen3"
"module" : "module"
"setappend" : "setappend"
"iso_8859_4_1988" : "iso_8859_4_1988"
"csisolatin1" : "csisolatin1"
"csisolatin2" : "csisolatin2"
"csisolatin3" : "csisolatin3"
"xmlcharrefreplace_errors" : "xmlcharrefreplace_errors"
"037" : "037"
"csisolatin6" : "csisolatin6"
"_commit_removals" : "_commit_removals"
"SC_RE_DUP_MAX" : "SC_RE_DUP_MAX"
"MemberDescriptorType" : "MemberDescriptorType"
"userhome" : "userhome"
"pattern" : "pattern"
"PGEN" : "PGEN"
"SC_THREAD_ATTR_STACKADDR" : "SC_THREAD_ATTR_STACKADDR"
"ERA_D_FMT" : "ERA_D_FMT"
"PC" : "PC"
"state" : "state"
"__bases__" : "__bases__"
"st_size" : "st_size"
"closed" : "closed"
"shiftjisx0213" : "shiftjisx0213"
"limit" : "limit"
"S_ISGID" : "S_ISGID"
"api_version" : "api_version"
"f_globals" : "f_globals"
"__ifloordiv__" : "__ifloordiv__"
"ms1361" : "ms1361"
"CS_PATH" : "CS_PATH"
"lookup_error" : "lookup_error"
"startpos" : "startpos"
"strides" : "strides"
"S" : "S"
"CATEGORY_UNI_WORD" : "CATEGORY_UNI_WORD"
"SIGPIPE" : "SIGPIPE"
"start_new" : "start_new"
"key" : "key"
"O_ASYNC" : "O_ASYNC"
"O_TRUNC" : "O_TRUNC"
"__ilshift__" : "__ilshift__"
"CATEGORY" : "CATEGORY"
"PLATMACDIRS" : "PLATMACDIRS"
"SC_XOPEN_CRYPT" : "SC_XOPEN_CRYPT"
"kwds" : "kwds"
"keepends" : "keepends"
"from_iterable" : "from_iterable"
"l2" : "l2"
"SC_SCHAR_MIN" : "SC_SCHAR_MIN"
"__delattr__" : "__delattr__"
"itertools" : "itertools"
"P_NOWAIT" : "P_NOWAIT"
"_heappop" : "_heappop"
"lo" : "lo"
"newitem" : "newitem"
"strftime" : "strftime"
"PARSER_HEADERS" : "PARSER_HEADERS"
"co" : "co"
"BASECFLAGS" : "BASECFLAGS"
"_parse_sub" : "_parse_sub"
"ST_NOSUID" : "ST_NOSUID"
"SF_NOUNLINK" : "SF_NOUNLINK"
"chmod" : "chmod"
"walk" : "walk"
"LITERAL_CODES" : "LITERAL_CODES"
"initial_slashes" : "initial_slashes"
"category_not_linebreak" : "category_not_linebreak"
"defpath" : "defpath"
"_setoption" : "_setoption"
"renamed_variables" : "renamed_variables"
"PY_FORMAT_SIZE_T" : "PY_FORMAT_SIZE_T"
"cp" : "cp"
"BOM_UTF16" : "BOM_UTF16"
"_eq" : "_eq"
"_tuple" : "_tuple"
"_start_new_thread" : "_start_new_thread"
"rjust" : "rjust"
"base64_codec" : "base64_codec"
"setcopyright" : "setcopyright"
"heappushpop" : "heappushpop"
"SC_THREAD_THREADS_MAX" : "SC_THREAD_THREADS_MAX"
"SIGSEGV" : "SIGSEGV"
"__set__" : "__set__"
"WIFEXITED" : "WIFEXITED"
"SRE_INFO_CHARSET" : "SRE_INFO_CHARSET"
"getwriter" : "getwriter"
"int" : "int"
"py3kwarning" : "py3kwarning"
"windows_1258" : "windows_1258"
"HAVE_PTHREAD_H" : "HAVE_PTHREAD_H"
"windows_1255" : "windows_1255"
"windows_1256" : "windows_1256"
"windows_1257" : "windows_1257"
"HAVE_UNISTD_H" : "HAVE_UNISTD_H"
"windows_1251" : "windows_1251"
"__itruediv__" : "__itruediv__"
">" : ">"
"HAVE_SETREGID" : "HAVE_SETREGID"
"fset" : "fset"
"Writer" : "Writer"
"mktime" : "mktime"
"HAVE_SHADOW_H" : "HAVE_SHADOW_H"
"WSTOPSIG" : "WSTOPSIG"
"HAVE_CURSES_RESIZE_TERM" : "HAVE_CURSES_RESIZE_TERM"
"Sized" : "Sized"
"finished" : "finished"
"MULTILINE" : "MULTILINE"
"codecaliases" : "codecaliases"
"ecma_114" : "ecma_114"
"iso_ir_109" : "iso_ir_109"
"abs_srcdir" : "abs_srcdir"
"TupleType" : "TupleType"
"itnum" : "itnum"
"utf_16_be_decode" : "utf_16_be_decode"
"SC_PII_OSI_M" : "SC_PII_OSI_M"
"HAVE_LARGEFILE_SUPPORT" : "HAVE_LARGEFILE_SUPPORT"
"groupref_ignore" : "groupref_ignore"
"AIX_GENUINE_CPLUSPLUS" : "AIX_GENUINE_CPLUSPLUS"
"sitepackages" : "sitepackages"
"utf_16le" : "utf_16le"
"iptfile" : "iptfile"
"print_exc" : "print_exc"
"value" : "value"
"HAVE_STRUCT_STAT_ST_RDEV" : "HAVE_STRUCT_STAT_ST_RDEV"
"utf8_ucs4" : "utf8_ucs4"
"BOM_UTF32_BE" : "BOM_UTF32_BE"
"UnicodeType" : "UnicodeType"
"iso8859_9" : "iso8859_9"
"iso8859_8" : "iso8859_8"
"TEMPLATE" : "TEMPLATE"
"__floordiv__" : "__floordiv__"
"iso8859_5" : "iso8859_5"
"__sub__" : "__sub__"
"iso8859_7" : "iso8859_7"
"getpwuid" : "getpwuid"
"iso8859_1" : "iso8859_1"
"func_doc" : "func_doc"
"iso8859_3" : "iso8859_3"
"~" : "~"
"rename" : "rename"
"l3" : "l3"
"STDOUT" : "STDOUT"
"PYTHON" : "PYTHON"
"xrange" : "xrange"
"HAVE_SYS_SELECT_H" : "HAVE_SYS_SELECT_H"
"W_OK" : "W_OK"
"_MainThread" : "_MainThread"
"nt_user" : "nt_user"
"rfind" : "rfind"
"arabic" : "arabic"
"HAVE_INET_PTON" : "HAVE_INET_PTON"
")" : ")"
"ST_NODEV" : "ST_NODEV"
"newcount" : "newcount"
"CODESIZE" : "CODESIZE"
"HAVE_STRUCT_STAT_ST_BLOCKS" : "HAVE_STRUCT_STAT_ST_BLOCKS"
"BuiltinFunctionType" : "BuiltinFunctionType"
"__package__" : "__package__"
"getweakrefs" : "getweakrefs"
"rot13" : "rot13"
"parts" : "parts"
"_cache_repl" : "_cache_repl"
"__version__" : "__version__"
"setstate" : "setstate"
"dedent" : "dedent"
"listdir" : "listdir"
"AT_UNI_NON_BOUNDARY" : "AT_UNI_NON_BOUNDARY"
"version_info" : "version_info"
"HAVE_FTIME" : "HAVE_FTIME"
"tm_hour" : "tm_hour"
"gb2312_1980" : "gb2312_1980"
"csisolatincyrillic" : "csisolatincyrillic"
"ior" : "ior"
"HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK" : "HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK"
"OPCODETARGETGEN" : "OPCODETARGETGEN"
"ibm775" : "ibm775"
"__dir__" : "__dir__"
"byteorder" : "byteorder"
"center" : "center"
"SC_DELAYTIMER_MAX" : "SC_DELAYTIMER_MAX"
"i" : "i"
"_class_template" : "_class_template"
"WCONTINUED" : "WCONTINUED"
"bindtextdomain" : "bindtextdomain"
"ANY" : "ANY"
"HGTAG" : "HGTAG"
"SC_TIMERS" : "SC_TIMERS"
"__mul__" : "__mul__"
"__displayhook__" : "__displayhook__"
"field_names" : "field_names"
"readinto" : "readinto"
"lseek" : "lseek"
"PATTERNENDERS" : "PATTERNENDERS"
"sameopenfile" : "sameopenfile"
"LICENSE" : "LICENSE"
"HOST_GNU_TYPE" : "HOST_GNU_TYPE"
"platlib" : "platlib"
"euc_jp" : "euc_jp"
"issuperset" : "issuperset"
"HAVE_CTERMID_R" : "HAVE_CTERMID_R"
"HAVE_GETTIMEOFDAY" : "HAVE_GETTIMEOFDAY"
"UnicodeDecodeError" : "UnicodeDecodeError"
"ebcdic_cp_he" : "ebcdic_cp_he"
"__lt__" : "__lt__"
"isinstance" : "isinstance"
"S_IRUSR" : "S_IRUSR"
"CONFINCLUDEDIR" : "CONFINCLUDEDIR"
"HAVE_GETPWENT" : "HAVE_GETPWENT"
"SHELL" : "SHELL"
"amd64" : "amd64"
"HAVE_OPENPTY" : "HAVE_OPENPTY"
"gettrace" : "gettrace"
"1250" : "1250"
"PGOBJS" : "PGOBJS"
"uu_codec" : "uu_codec"
"add" : "add"
"call_tracing" : "call_tracing"
"reason" : "reason"
"IOError" : "IOError"
"_Thread__stopped" : "_Thread__stopped"
"match" : "match"
"_print_dict" : "_print_dict"
"MAXREPEAT" : "MAXREPEAT"
"_Thread__bootstrap" : "_Thread__bootstrap"
"Thread" : "Thread"
"MIN_REPEAT" : "MIN_REPEAT"
"HAVE_WCHAR_H" : "HAVE_WCHAR_H"
"ibm424" : "ibm424"
"WIFSTOPPED" : "WIFSTOPPED"
"EEXIST" : "EEXIST"
"T" : "T"
"INSTSONAME" : "INSTSONAME"
"SIZEOF_DOUBLE" : "SIZEOF_DOUBLE"
"intersection" : "intersection"
"S_IRGRP" : "S_IRGRP"
"max_10_exp" : "max_10_exp"
"insert" : "insert"
"__stderr__" : "__stderr__"
"cp863" : "cp863"
"fsync" : "fsync"
"GETTIMEOFDAY_NO_TZ" : "GETTIMEOFDAY_NO_TZ"
"allocate_lock" : "allocate_lock"
"WITH_TSC" : "WITH_TSC"
"Py_DEBUG" : "Py_DEBUG"
"_copy_reg" : "_copy_reg"
"globals" : "globals"
"tm_mon" : "tm_mon"
"SC_MESSAGE_PASSING" : "SC_MESSAGE_PASSING"
"MAINCC" : "MAINCC"
"at_loc_non_boundary" : "at_loc_non_boundary"
"SC_VERSION" : "SC_VERSION"
"iso2022jp_2" : "iso2022jp_2"
"\x00\x00\xfe\xff" : "\x00\x00\xfe\xff"
"SIG_DFL" : "SIG_DFL"
"repr_fmt" : "repr_fmt"
"acquire_lock" : "acquire_lock"
"_compile_charset" : "_compile_charset"
"DLLLIBRARY" : "DLLLIBRARY"
"daylight" : "daylight"
"module_globals" : "module_globals"
"flush" : "flush"
"SC_NL_SETMAX" : "SC_NL_SETMAX"
"MACH_C_THREADS" : "MACH_C_THREADS"
"__getnewargs__" : "__getnewargs__"
"HAVE_BIND_TEXTDOMAIN_CODESET" : "HAVE_BIND_TEXTDOMAIN_CODESET"
"gi_frame" : "gi_frame"
"BufferError" : "BufferError"
"_exists" : "_exists"
"__setattr__" : "__setattr__"
"csiso2022kr" : "csiso2022kr"
"_Printer" : "_Printer"
"CATEGORY_UNI_SPACE" : "CATEGORY_UNI_SPACE"
"__contains__" : "__contains__"
"STRINGLIB_HEADERS" : "STRINGLIB_HEADERS"
"__getattr__" : "__getattr__"
"HAVE_LIBDLD" : "HAVE_LIBDLD"
"CATEGORY_NOT_WORD" : "CATEGORY_NOT_WORD"
"l5" : "l5"
"UF_OPAQUE" : "UF_OPAQUE"
"HAVE_MREMAP" : "HAVE_MREMAP"
"f_exc_type" : "f_exc_type"
"EXTRATESTOPTS" : "EXTRATESTOPTS"
"sitedircase" : "sitedircase"
"HAVE_LINUX_TIPC_H" : "HAVE_LINUX_TIPC_H"
"?" : "?"
"relpath" : "relpath"
"EOFError" : "EOFError"
"repeat_one" : "repeat_one"
"REPEATCODES" : "REPEATCODES"
"indexOf" : "indexOf"
"iso_8859_14_1998" : "iso_8859_14_1998"
"_joinrealpath" : "_joinrealpath"
"HAVE_MKTIME" : "HAVE_MKTIME"
"symlink" : "symlink"
"in1" : "in1"
"SC_CHILD_MAX" : "SC_CHILD_MAX"
"__delete" : "__delete"
"CRNCYSTR" : "CRNCYSTR"
"offset" : "offset"
"raise" : "raise"
"eucjp" : "eucjp"
"__imul__" : "__imul__"
"SEEK_END" : "SEEK_END"
"is_not" : "is_not"
"irix" : "irix"
"PURIFY" : "PURIFY"
"siginterrupt" : "siginterrupt"
"ASSERT_NOT" : "ASSERT_NOT"
"_time" : "_time"
"utf_16be" : "utf_16be"
"l8" : "l8"
"csHPRoman8" : "csHPRoman8"
"constructor" : "constructor"
"discard" : "discard"
"_exit" : "_exit"
"l9" : "l9"
"get_python_version" : "get_python_version"
"HAVE_INITGROUPS" : "HAVE_INITGROUPS"
"SETPGRP_HAVE_ARG" : "SETPGRP_HAVE_ARG"
"DESTSHARED" : "DESTSHARED"
"_get_exports_list" : "_get_exports_list"
"__builtin__" : "__builtin__"
"addsitedir" : "addsitedir"
"_unicode" : "_unicode"
"most_common" : "most_common"
"at_loc_boundary" : "at_loc_boundary"
"HAVE_ZLIB_COPY" : "HAVE_ZLIB_COPY"
"negate" : "negate"
"ixor" : "ixor"
"LookupError" : "LookupError"
"HAVE_LINK" : "HAVE_LINK"
"f_exc_traceback" : "f_exc_traceback"
"HAVE_EXECV" : "HAVE_EXECV"
"HAVE_DEVICE_MACROS" : "HAVE_DEVICE_MACROS"
"*" : "*"
"_acquire_restore" : "_acquire_restore"
"CHCODES" : "CHCODES"
"_getuserbase" : "_getuserbase"
"_remove" : "_remove"
"category_uni_not_linebreak" : "category_uni_not_linebreak"
"__closure__" : "__closure__"
"_newname" : "_newname"
"var" : "var"
"SIGABRT" : "SIGABRT"
"maxsplit" : "maxsplit"
"LIBRARY_OBJS" : "LIBRARY_OBJS"
"make_encoding_map" : "make_encoding_map"
"__about__" : "__about__"
"hx" : "hx"
"extract_stack" : "extract_stack"
"catch_warnings" : "catch_warnings"
"getenv" : "getenv"
"sysconf_names" : "sysconf_names"
"hi" : "hi"
"newset" : "newset"
"iso_2022_jp_2004" : "iso_2022_jp_2004"
"Consumer" : "Consumer"
"_BITS_TRANS" : "_BITS_TRANS"
"count" : "count"
"LC_MESSAGES" : "LC_MESSAGES"
"HAVE_RL_CATCH_SIGNAL" : "HAVE_RL_CATCH_SIGNAL"
"localeconv" : "localeconv"
"j" : "j"
"record" : "record"
"hash_randomization" : "hash_randomization"
"posix_local" : "posix_local"
"COREPYTHONPATH" : "COREPYTHONPATH"
"SC_OPEN_MAX" : "SC_OPEN_MAX"
"HAVE_SOCKADDR_SA_LEN" : "HAVE_SOCKADDR_SA_LEN"
"closegroup" : "closegroup"
"ImportError" : "ImportError"
"_WARNING_DETAILS" : "_WARNING_DETAILS"
"HAVE_DLFCN_H" : "HAVE_DLFCN_H"
"pid" : "pid"
"BOM_UTF16_LE" : "BOM_UTF16_LE"
"HAVE_SYS_TYPES_H" : "HAVE_SYS_TYPES_H"
"_pickSomeNonDaemonThread" : "_pickSomeNonDaemonThread"
"HAVE_PTHREAD_DESTRUCTOR" : "HAVE_PTHREAD_DESTRUCTOR"
"CS_XBS5_ILP32_OFF32_LINTFLAGS" : "CS_XBS5_ILP32_OFF32_LINTFLAGS"
"mtime" : "mtime"
"HAVE_SSIZE_T" : "HAVE_SSIZE_T"
"bufsize" : "bufsize"
"iadd" : "iadd"
"iso8859_15" : "iso8859_15"
"iso8859_14" : "iso8859_14"
"userbase" : "userbase"
"BuiltinMethodType" : "BuiltinMethodType"
"iso8859_11" : "iso8859_11"
"iso8859_10" : "iso8859_10"
"iso8859_13" : "iso8859_13"
"_Semaphore__cond" : "_Semaphore__cond"
"getsize" : "getsize"
"cp869" : "cp869"
"_StopIteration" : "_StopIteration"
"other" : "other"
"lookup" : "lookup"
"SRE_FLAG_LOCALE" : "SRE_FLAG_LOCALE"
"branch" : "branch"
"mcls" : "mcls"
"cp860" : "cp860"
"cp037" : "cp037"
"cp862" : "cp862"
"S_IFCHR" : "S_IFCHR"
"cp864" : "cp864"
"cp865" : "cp865"
"cp866" : "cp866"
"TracebackType" : "TracebackType"
"stat" : "stat"
"CH_LOCALE" : "CH_LOCALE"
"_enumerate" : "_enumerate"
"HAVE_INT32_T" : "HAVE_INT32_T"
"getcheckinterval" : "getcheckinterval"
"category_space" : "category_space"
"__newobj__" : "__newobj__"
"O_DIRECT" : "O_DIRECT"
"in2" : "in2"
"BASEMODLIBS" : "BASEMODLIBS"
"readlink" : "readlink"
"AC_APPLE_UNIVERSAL_BUILD" : "AC_APPLE_UNIVERSAL_BUILD"
"HAVE_INET_ATON" : "HAVE_INET_ATON"
"HAVE_LCHOWN" : "HAVE_LCHOWN"
"readline" : "readline"
"else" : "else"
"HAVE_STRUCT_STAT_ST_FLAGS" : "HAVE_STRUCT_STAT_ST_FLAGS"
"ifilter" : "ifilter"
"eof" : "eof"
"_processoptions" : "_processoptions"
"cspcp852" : "cspcp852"
"fpathconf" : "fpathconf"
"klass" : "klass"
"HAVE_ERF" : "HAVE_ERF"
"HAVE_POLL" : "HAVE_POLL"
"get_code" : "get_code"
"__index__" : "__index__"
"HAVE_GETLOGIN" : "HAVE_GETLOGIN"
"getslice" : "getslice"
"parse_config_h" : "parse_config_h"

213 allocations use 0xb6730 (747,312) bytes.
